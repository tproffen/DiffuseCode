1  discus

   The program is invoked by typing 'discus' at the operating system or 
   at the shell prompt. The program uses a command language to interact 
   with the user. The command 'exit' or a CTRL Z terminates the program.

   More information about the syntax, expressions etc. of the command
   language can be obtained by typing 'command' at the help prompt.

   Help on the program is obtained by typing "help" or "help <command>" to
   get specific help on the command <command>. The command may be abbreviated.
   If the abbreviation is not unique, only the first help topic that matches
   the command is listed.

   The first line of the help text gives the syntax of the command that is
   explained in the following lines. For a few commands the syntax line is
   repeated for different set of possible parameters.

   Further help topics are:

2  Summary

!p News       ! Summary of recent changes
!p addf       ! Add two files together
!p append     ! Append atom to model crystal
!p asym       ! Show the contents of the asymmetric unit
!p boundary   ! Cuts off atoms along an hkl plane
!p branch     ! Switches to KUPLOT, if within the suite
!p change     ! Changes the character of an object
!p chem       ! Enter CHEM level (see chem level for details)
!p connect    ! Enter CONNECTIVITY level
!p copy       ! Copy atom or molecule within the crystal
!p export     ! Exports the structure in a different format
!p decorate   ! Enter  DECORATE level
!p demolec    ! Enter demolecularization level
!p d2r        ! Transform vector from real to reciprocal space
!p define     ! Define DISCUS specific settings
!p diff-four  ! Enter DIFFERENCE FOURIER transform level
!p domain     ! Enter the DOMAIN level
!p find       ! Find atoms around a given point
!p four       ! Enter FOURIER transform level
!p import     ! Imports other formats into DISCUS cells
!p ins        ! Insert atom or molecule into the crystal
!p inverse    ! Enter inverse Fourier transform level
!p kick       ! Insert atom/molecule and possibly remove old atom/mole.
!p mmc        ! Enter MONTE-CARLO simulations level
!p output     ! Enter output level (save results)
!p patterson  ! Enter PATTERSON level
!p pdf        ! Enter PAIR DISTRIBUTION FUNCTION level
!p plot       ! Enter PLOT level (export crystal for plotting)
!p powder     ! Enter POWDER diffraction level
!p project    ! Calculate projections in real and reciprocal space
!p property   ! Enter the PROPERTY level 
!p purge      ! Remove voids from crystal (DO NOT USE !)
!p r2d        ! Transform vector from reciprocal to real space
!p read       ! Read structure or unit cell from file
!p remove     ! Remove atom or molecule from crystal
!p replace    ! Replace atom(s) or molecule(s) with other type
!p reset      ! Reset DISCUS to initial program start conditions
!p rmc        ! Enter REVERSE-MONTE-CARLO level
!p save       ! Enter SAVE level to save the structure
!p seed       ! Set seed for random number generator
!p shear      ! Enter the SHEAR level
!p show       ! Show various information
!p spacegroup ! Sets the space group for the current structure
!p stack      ! Enter STACKING FAULT level
!p storage    ! Enter STORAGE level
!p switch     ! Swap two atoms or molecules within crystal
!p symm       ! Enter SYMMETRY transformation level
!p transform  ! Enter unit cell TRANSFORMATION  level
!p therm      ! Displace atoms or molecules according to B
!p vprod      ! Calculate vector product in real or reciprocal space
!p waves      ! Enter WAVE type modulations level
!p wyckoff    ! Shows symmetry operations of the space group
2  News

   Here you find a list of recent changes, additions, bug corrections
3  2021_Jan

   Added a new menu ==> 'perioditize'
3  2021_Dec

   Atomic form factors
           Some values for the following elements were wrong:
           Gd  a4
           Sm  b4
           Cr  a4
           Mo  a2
           The parameterized values according to Waasmaier & Kirfel,
           ACA (1995) A51, 416-431 were added and are used as default values.
           Optional parameters table:waas or table:inter allow to 
           choose the Waasmaier or the International Tables Volume C.
   DOMAIN  enabled "orient' and 'shape' to handle format specifiers
   PLOT    enabled a 'run kill:yes' line, just to kill all previous JMOLs
   POWDER  FIXED BUG  Corrected corrlin, corrquad action in powder menue
   FIND    enabled format specifier for atom names
   FOURIER FIXED BUG, in some circumstances the average intensity output
           was missing the Friedel pairs.
   FOURIER Introduced an automatic scaling between Bragg and diffuse
           intensities that applies to a full 3D-PDF only. Not relevant
           for 3D-Delta-PDF or plain intensities.
   MMC     FIXED BUG, Feedback algorithm was always on, even for
           target "corr" with last parameter set to "ENER".
   MOLECULARIZE Improved the command by adding optional parameters.
3  2021_Oct

   Changed the reading of structures to enable files without BISO collumn.

   SURFACE  Added an optiona parameter center:<value> to the 'boundary'
            command. Added the option to set the value to "com" as in
            "center of mass" to all "cent*:com" parameters
   FIXED BUG  Corrected the determination of a periodic boundary PDF
              calculated via Debye-Scattering-Equation
3  2021_Sept

   MMC  added an optional parameter "log:screen" to the 'set finish'
        command.
3  2021_June

   Added a LAMMPS import
   Moderate improvements for plot to handle charged atoms
   Continued improvements within MMC
   Added improved output to 'show env'
   Added a file "private.f90" and a 'private' command to let the user
         develop own algorithms
3  2021_May

   Depreciated the "set neig, add" command and added an optional
   parameter "number:value" to the individual "set neigh, ..." commands.
3  2021_April

   Added an output format option 'vesta', that replaces 'xplor'
         This allows better control of the 3D visualization including
         an overlay by a calculated Patterson map.
3  2021_February

   Corrected setting of anomalous dispersion coefficients.
   Added optional parameters to ==> 'index2cell' regarding output and 
         periodic boundary conditions
   Added an option to accumulate several diffraction pattern prior to output
   ==> fourier/set
   Added an option to apply symmetry averaging to a diffraction pattern
   ==> fourier/set

3  2020_Dezember

   Added "xplor" output file format for diffraction data.
   Added a 'range' command to output to go along with the 
   "xplor" file format.

   Corrected import of RMCprofile version 6 files

   Added not on side effect to mmc ==> set ==> vec

   Added an optional paarameter to the value command in 'output'.
   Allows to limit reciprocal-space prior to 3D-PDF calculations. 
3  2020_November

   Added a linear and square (TTH/Q)-dependence of asymmetry parameters
   to powder == 'set profile'
 
   Corrected a bug that prevented the execution of macros at sub-levels
3  2020_October

   Added support for file name constructors to ==> 'import' and
      ==> 'export'
   File names may now make use of constructors like:
      "NiceFile%4D.cif", 5 ==> "NiceFile0005.cif"

   Corrected a bug that prevented a direct read of imported structures.
3  2020_September

   Added finish criteria to mmc. These allow to terminate a MMC loop
   upon reaching several convergence/stagnation criteria. 

   Added 'show scat' command to Fourier and powder menu.

   Added optional "geom:[<px>,<py>]" to ==> 'plot/run' command
3  2020_August

   Added extensive parallel computing throughout the code
3  2020_July

   Added a new energy "unid" to mmc. This is essentially the same 
   as "corr", the SRO chemical short range order energy, except taken
   strictly unidirectional from the center to the neighbor. It works
   best with a "vector" environment in a locally noncentrosymmetric
   environment.

   Improved speed of Fourier for the special case of a block of
   LxMxN pixels that are centrosymmetrically around the origin.
   All L,M,N must be odd and anomalous scattering be off.
3  2020_May

   Added more parameters to the surface => boundary command to
   specify the orientation of a cylinder / ellipsoid. 
3  2020_April

   Many major updates:

   Changed the PDF calculation to run via a "detour" through the 
   powder diffraction. Makes the calculation exact for the X-ray 
   case in in many circumstances much faster.

   Added atomic masses

   Added options to add multiple powder diffraction pattern.

   Improved the internal precision of most variables. 
3  2019_December

   Added wave length symbols 'CU12' etc that enable Kalpha1/Kalpha2
   profile functions
3  2019_November

   Added an optional parameter "metric:host" to the ==> import command.
3  2019 September

   The powder calculation was thoroughly revised. Pattern calculated 
   with the 'complete' mode are put on a better scale, proportional
   to the number of atoms in the structure. A continuous background 
   from uncorrelated thermal vibrations has been added.
   Added option parameter "distri" to ==> 'set bond' command
   within the ==> 'deco' menu.
3  2019_August

   Added optional parameter "type" to purge command. Allows to
   clear list of atom types.

   Added the option to add the surface vectors to the crystal
   structure file.
3  2019_May

   Added the option to retain the original space group to the 
   ==> 'export cif' command
   Added further output options to menu ==> 'output'.
3  2019_Apr

   Added an export option to write the structure in the format for 
   Scatty.

   powder
      Improved scaling of intensities to be independent of a
      profile function.
3  2019_Feb

   Implemented all alternative settings for the orthorhombic space
   groups. See the entry ==> "Unit_cell" for details on how to 
   define alternative settings and the entry ==> "space_groups" for
   a complete listing of all non-standard settings in the 
   orthorhombic system.

   Added a command 'displacement' that returns the displacement
   vector of an atom from its average position.

   Added the surface vector to the 'show atom' command
3  2019_Jan

   Added a demolcularize menu to delete a molecule entry while
   keeping the atoms

   surface
      Added a thickness: optional parameter that allows to define 
      individual thicknesses to hkl planes.
3  2018_Dec

   mmc
      The displacement correlation did not really work, fixed.

   CIF interpreter
      Further improvements to interpret CIF files. For unknown 
      space groups DISCUS attempts to use the symmetry operations.
3  2018_Nov

   m[<number>] 
      If an atom is removed, its scattering curve is set to zero and 
      the property 'normal' was cleared. 
      If you manually change the scattering curve back to a non-zero 
      value, the properties were not set back to 'normal' Fixed.

   save
      enforced that "scat", "adp" and "occ" and either all written
      or all omitted.

   powder
      For neutron diffraction, the output of the <f>^2 contained an
      error. The negative scattering length were added as |b|.
      Corrected.

   mmc
      Added a 'set valid, <invalid_moves>' command, that gives you more 
      control over a termination criterion.

   CIF interpreter
      Added more flexibility to recognize non standard monoclinic space 
      groups that are not listed as full Hermann-Mauguin symbol 
3  2018_Oct

   In ==> 2017_July the following "correction" was done, which proved 
   to be false.
   The ==> 'therm' command erroneously used too large a displacement.
   The average <u^2> were actually 3 times too large. 

   As of version 5.27.2 this has been corrected yet again to the 
   original, correct state. A calculation of a powder /single crystal
   pattern either with "temp use" or a combination "therm and temp ignore"
   will now produce identical results again.

   Added a 'show res' to the 'fourier' and 'connectivity' menu.

   Improved the memory handling in pdf, makes the program use much 
   less memory.
   Connected to this, all menus reduce memory usage through the 
   local 'reset' command. The 'reset' command sets all default 
   values within a menu back to program start and initializes all
   internal arrays to the smallest default size. Most of the time
   this will not bee needed. The main effect will be within the 
   Fourier menus (fourier, powder, output). The 'pdf' menu is 
   reduced as much as possible automatically. 
   
3  2018_Sep

   Added new export options:
   to CIF
   export cif, <filename>

   to RMCprofile version 6 and 7
   export rmcprofile, <filename> [,version:7]

   to VASP, POSCAR file
   export vasp, POSCAR
   export poscar, POSCAR

   If atom types exist, for which there is no more actual atom in 
   the crystal, the form factors are set to zero. This allowes you
   to define pseudo atoms for the domain without the need to 
   use the 'fourier/scat' command to set dummy scattering
   functions.

   purge, stack, domain, deco
      Turned on stricter behavior for the handling of 
      periodic boundary conditions and the "chem" quick mode
      off. It can be turned back on with after explicit 
      'set crystal' command in the chemistry menu.

   added a 'reset to the 'chem' menu
   added a 'reset to the 'domain' menu
   added a 'reset to the 'fourier', 'inverse', difffour', patterson' menu
   added a 'reset to the 'insert' menu
   added a 'reset to the 'pdf' menu
   added a 'reset to the 'shear' menu
   added a 'reset to the 'save' menu
   added a 'reset to the 'stack' menu
   added a 'reset to the 'symmetry' menu
   added a 'reset to the 'transform' menu
   added a 'reset to the 'waves' menu
   added to the global 'reset: 
       most arrays, chem, deco, domain, fourier routines, insert, mmc, 
       pdf, property, rmc, save, shear, symmetry, transform, waves

3  2018_Aug

   Added a 'reset' command to DISCUS. (Work in progress)
   Added a ==> 'storage' menu.
      This menu allows to display and manage the internally stored
      crystal structure files. 
3  2018_July

   Added the possibility to define property like features 
   that are based on the connectivities ==> property

   Fixed a bug that did not allow a read free for origin choice 2
   Added an 'exit' command to the read menu.

   Added a 'reset' command to 'plot'

   connectivity
      Modified the behavior for central atoms given by name 
      instead of type number. Connectivity will perform the 
      requested action for all atom types of this name.
      add Si, O, 1.2, 2.0, silicon
      Creates a connectivity for all Silicon atom types.

3  2018_June

   Added the possibility for interactive plots.
   See ==> plot/back
       ==> plot/poly
       ==> plot/bond
       ==> plot/run 

   Revised the reaction to a CTRL-C

   Added a ==> 'set error, ... , "save" option

   functions

   Added a new logical function that queries the properties of an atom.

   decoration
   Added a "chelate" bonding scheme and corrected the descriptions 
   for the "bridge" scheme.
   Added the missing descriptions to the "acceptor" and "donor" 
   schemes.
3  2018_May

   surface
   Corrected a BUG related to the location of cylindrical surfaces.

   read / import
   Improved handling of CIF files with atom names like "Ti4+"   
   Improved handling of CIF files with atom lines that contain
   just dots 
   Ti Ti 0.00 0.00 0.00 . 1.0
3  2018_April

   remove molecules
   Changed the behavior if whole molecules are removed. The
   molecule type is still set to zero and the atoms inside the 
   molecule are switched to 'voids'. The molecule status of the 
   individual atoms is, however, retained. This allows you to still
   work with these "removed" molecules, in strict analogy to 
   removed atoms. The full molecule entry disappears with a 'purge'

   occupancy
   An 'occupancy' was added as further atom property. 
   The philosophy behind DISCUS is a simulation of an actual
   crystal structure, thus the occupancy is really just an
   emergency measure for the simulation where you want just 
   very few or a single unit cell. 
   As side effect the format of the 'cell' file has been 
   augmented. 
   For details see ==> 'read'

   read / import
   Improved handling of CIF files that do not have an empty
   line following a 'loop'.
   Import the occupancy.
3  2018_Mar

   save
   As of version 5.17.1 DISCUS saves the atoms in its internal 
   sequence, even if molecules are involved. The molecule info
   is written into the file header and further columns have been 
   added to the atom list that specify in which molecule an atom
   is located.

   stack
   A simplified list of origin types has been added to the 
   'create' command. This list "internal.stacksimple.list" 
   contains the atom types "L001", etc at reduced origins
   starting at 0,0,0 and incrementing with [0,0,1]. This 
   list facilitates correlation analysis.

   read
   A comment with the read menu caused an exit, changed to 
   ignore the comment.

   read / import
   Improved the reading of CIF files. Attempt to replace ion
   charges with the DISCUS standard as best as possible.
   If the space group is not given or is a '?', the symmetry
   operations are read instead.
3  2018_Jan

   The logical comparisons may now take the operators:
   <, <=, ==, /=, >=, >/
   The classical fortran77 operators are still valid

   New logical functions "isvar" and "isexp" can be used within an
   "if" construction. See help entry ==>'function' in the
   general "Command_lang" section.

   Variable "mol_type[<i>]" has been made read/write

   stack
   The ==> 'create' command copies the list of layer origins
   into an internal file with fixed name "internal.stacklist.stru"
3  2017_Nov

   Added RMCprofile version 6 format to imports 

   Added an "export" command, currently just a "shelx" export format

   Added a choice to the ==> 'symmetry/mode' command
   Added the possibility to use a space group symmetry matrix.
   Related is the new variable sym_n[1] that stands for the
   number of symmetry operations in the present space group.

   Added optional parameter 'identical:' to read /cell command

   Added a command 'spacegroup' that sets the space group.

   The 'wyckoff' command returns the multiplicity of the site and 
   the space group symmetry matrices that copy the site onto itself.
3  2017_Oct

   Space Groups
     Added the space groups 
     Aem2=Abm2 (39)
     Aea2=Aba2 (41)
     Cmca=Cmce (64)
     Cmma=Cmme (67)
     Ccca=Ccce (68)

   Atom names 
     Instead of atom names or numbers, the user can specify a 
     user defined variable.
     variable character, string
     string = 'Si'
     ...
     sel  Al, string, O
     ...
     replace Al,string,...

   connectivity
     New optional parameters allows to specify if the connectivity is to
     be restricted to the same molecule as the central atom.

   stack
     The number of layers for each type is recorded into 
     the result variable.

   surface 
     The boundaries have improved and corrected behavior for internal
     hollow spaces created by the "outside" flag.

     The boundary commands create a new variable that reflects the 
     surface character and the direction of the normal to the local
     surface. 
3  2017_Sep

   Throughout the program the internal calculation of random numbers 
   was changed to the FORTRAN 90 intrinsic function. 
3  2017_July

   The decoration of ligands onto surfaces can now be restricted to
   specific faces.

   The ==> 'therm' command erroneously used too large a displacement.
   The average <u^2> were actually 3 times too large. 
3  2017_June

   Atom "AL3+" had been misspelled internally.

   The 'hkl' command in 'fourier' can now handle format strings for
   the file name.
3  2017_May

   The boundary command at the top level menu and inside the surface
   menu can now create a polyhedron from a form of symmetrically 
   equivalent hkl planes as well as a triaxial ellipsoid.
   The command at the main discus level is depreciated and you are 
   encouraged to use the (identical) command at the surface menu.
3  2017_April

   The surface menu received a new command "char" that determines
   the surface character of an atom.
3  2017_March

   The 'read' ==> 'cell' and 'stru' commands have been changed to
   accept CIF, CMAKER and RMCprofile formats as well. 

   The 'molecularize' command will add atoms to a previous molecule, if
   the first atom is inside a molecule.
3  2017_Feb

   Within the powder menu, the energy of the radiation may also 
   be specified via ==> 'set energy, <value>'
3  2017_Jan

   A new command 'first' was added to 'stack' that allows to determine
   the first layer type

   An unfortunate typing error in News/2016_Oct regarding the new
   refinement variable 
   ref_para[1...]   ( was misspelled as ref_param[1...] )
   is corrected in the  on-line help.
3  2016_Dec

   At a few select points colors are introduced into the output.
   Currently these are just the error messages.

   The new "molecularize" command allows to group atoms into molecules
3  2016_Oct

   The output of the "blen" and "bang" commands within "chemistry" 
   is now written to KUPLOT directly, if the filename starts with 
   "kuplot"

   The data stored by ==> 'chemistry' ==> 'aver' have been changed in
   a non-backwards compatible way. DISCUS now stores 9 values per
   atom: 
   the site number, the atom type on this site, the position, 
   the standard deviation of the average position and the occupancy.

   If DISCUS detects more than one "data_" sections in a CIF file,
   the second etc sections are written to a separate file, augmented by
   a number

   Global variables have been introduced that use the same syntax as
   user defined variables. This include just "pi" and variables related
   to the refinement.
   DIFFEV sets the value to these variables:
   REF_GENERATION  Current generation
   REF_MEMBER      Current population size
   REF_CHILDREN    Current children size
   REF_DIMENSION   Number of parameters 
   REF_KID         Current child Updated for DISCUS and KUPLOT only
   REF_INDIV       Current individuum Updated for DISCUS and KUPLOT only
   ref_para[1..]   Current trial parameters for current child

   Insertion of a new atom will automatically turn off the periodic
   boundary conditions.

   Periodic boundary conditions in combination with the exact search mode 
   have been enabled.

   A new menu is introduced that allows to group atoms into a molecule.

   The symmetry commands 'uvw' and 'orient' have been improved to allow
   to specify a pair, respectively one atom to define the axis/origin

   The symmetry command can now rotate partial molecule groups

   A new 'recreate' command allows to rebuild the connectivity list 
   for a specific atom type while leaving the remainder intact.
3  2016_June

   The mmc 'set move' command may now take a further parameter. This 
   will actually restrict the movement of the specified atom along
   the direction of a vector.

   DISCUS may now be interrupted gracefully with a CTRL-c.
   This will cause DISCUS to write the current structure 
   as a file called EMERGENCY.STRU.
3  2016_May

   Added option to the save menu to utilize the atom properties.
3  2016_March

   Within the ==> Fourier menu, the radiation may also be defined
   via its ==> 'energy' instead of its wavelength ==> 'wvle'

   Domains with an explicit shape (cube, sphere, cylinder) can now
   be generated with a size distribution.

   Fourier can calculate the intensities for a SHELXL file

   The 'find env' command will now return the neighbors sorted by distance.

   2D and 2D images can be written in MRC file format

   The ==> 'add' command within the ==> 'connectivity' menu can now take
   a new optional parameter that restricts the connectivity to the 
   closest N atoms. 
3  2015_Dec

   Added a command 'apply_symmetry' to the chemistry and mmc menus.
   These allow to generate symmetry equivalent correlation vectors.
   See mmc and chem ==> set vec; set neig; apply_symmetry for more help

   Added the option to calculate normalized intensities for single
   crystal pattern.
3  2015July_A

   You can now write powder files as normalized scattering function S(Q) 
   or as reduced normalized scattering function F(Q) = Q[S(Q)-1]

3  2015July

   With the release of the DISCUS_SUITE several new capabilities have 
   been introduced. 

   Within the DISCUS_SUITE the output files can be written directly into 
   KUPLOT. Simply start the file name with the fixed string 'kuplot'.
   The data set number in kuplot will be incremented automatically.

   DISCUS contains the new ==> 'branch' command that allows you to 
   change to a KUPLOT or DIFFEV section. 
3  2015February

   The speed of the PDF and powder(Debye) calculations has been improved
   considerably. No side effects on the user.

   DISCUS does check if an atom in the unit cell file has a name "void"
   and it will ignore these atom types when calculating the PDF.
   This helps to get the proper PDF density and weights for molecules
   where the first atom is a void at the center of the molecule.
3  2014November

   DISCUS will now import CIF files, see ==> import

3  2013September

   The chemical short range order in mmc can now sort groups of 
   atom types. 

3  2013June

   Finally this is it! DISCUS is now a fortran2008 program. Most of the
   substantial changes should not affect the user (or so we hope).
   Most of the large arrays are now allocated automatically, as needed,
   thus the need to compile DISCUS with different size versions should
   no longer exist.

4  Command_line_options

   The command line may now take the additional option:
   program -macro <macro_name> [<par1> [ <par2> ...]]
4  Electron

   DISCUS now offers electron diffraction in the kinematic limit as well.
   Atom form factors are taken from Table 4.3.2.3 Int. table Vol C (2006)
   respectively. from Peng, Ren, Dudarev, Whelan Acta Cryst A52 (1996), 257

   Electron diffraction works in all menus where you could switch between
   X-ray and neutrons i.e.: fourier, powder, rmc, pdf
4  internal_storage

   DISCUS now offers an internal storage of crystal structures.
   Simply start the file name with the string "internal" and
   DISCUS will write the crystal structure into a dynamically
   allocated internal data structure, instead of onto the hard disk.
   If a structure was written into an "internal" file, it can be read
   as well with ==> 'read'.
   
4  mmc

   The mmc menu can now offer a new "repulsive" energy, and may use
   the connectivity list to find interacting neighbors
4  powder

   In previous versions, DISCUS would write an unevenly spaced powder 
   pattern if you used a Q-axis and a 2Theta output or a 2Theta axis
   and a Q output. This has now been replaced by an evenly spaced 
   output. 
   If you use a Q-axis with proper Q-range, you also need to 
   specify the 2Theta limits on which you want to write the data.
   Likewise for a 2Theta axis, you need to specify a Q-range for the
   output. 
   This change mostly affects the DEBYE equation. Internally, 
   DISCUS always uses an evenly space q-grid, as the calculation is
   faster. With this bug fix, the output will be evenly spaced, for
   all combinations of axis and output.
4  connectivity

   This new menu allows you to define settings for the connectivity
   list. This connectivity list is used to quickly access neighboring
   atoms.
4  Centering

   In previous versions, DISCUS used the centering generators before
   the symmetry generators. 
   To be more in line with the International Tables, DISCUS uses now
   first all symmetry generators, followed by the centering generators.
   See also the ==> 'define' command to adjust the sequence to your
   personal taste.
4  waves

   The 'mrepl' and 'repl' commands were augmented by a "vice versa"
   option that will cause atoms/molecules to be replaced by each other 
   rather than only in one way.
3  2010Sep
4  property

   A major upgrade of DISCUS adds properties to atoms. These can be
   N = normal,   the atom is a normal atom (instead of a void)
   M = molecule, the atom is part of a molecule
   D = domain,   the atom is part of a domain
   O = outside,  the atom is outside of the crystal
   E = external, the atom is close to an external surface
   I = internal, the atom is close to an internal surface

   The new ==> 'property' menu allows global settings, plot uses its local
   settings.
   The global settings affect 'replace', 'mmc', 'find env'
   Commands that add, replace, remove atoms all affect the properties.
4  surface

   The new 'surface' menu covers the old boundary command and sets 
   options to flag the atom property near an external or internal boundary.
4  domain

   A new command 'distance' similar to the corresponding one in the 
   'surface' menu allows to set distances of atoms to internal 
   boundaries. Atoms closer than these distances are flagged as "close".  
4  plot

   The default was changed to plot the entire crystal, even if the
   'ext' or 'thick' commands had not been used.
3  2010_Aug
4  atom_coordinates

   The user may now specify the fractional coordinates in a unit cell
   or a structure file as algebraic expression as in the example:

   Si   1.-0.2, 1/3, zpos, bval

   Remember, if you use a variable as "zpos" or "bval" in this example,
   the variable must have been defined up front and been given a 
   sensible value.

   To use this feature, it is mandatory, that the fractional coordinates
   are separated by a comma.

   The old style is still possible.

4  unit_cell_dimensions

   The user may now specify the unit cell dimensions  in a unit cell
   or a structure file as algebraic expression as in the example:

   cell alat, 2*alat, 1.0+4.0, 90.000, beta, gamma

   Remember, if you use a variable as "alat" or "beta" in this example,
   the variable must have been defined up front and been given a
   sensible value.

   To use this feature, it is mandatory, that the unit cell dimensions 
   are separated by a comma.


   The old style is still possible.
3  2008may
4  atom_sequence

   In the original source code, the generators for each space group
   were applied strictly in the sequence as listed in the header of 
   the International Tables. 

   Thus for centered space groups, each atom was followed immediately
   by those created by the centering translations. The one exception
   are those rhombohedral space groups described by hexagonal axes
   that have a horizontal 2 fold axis and/or a center of inversion.
   Here the sequence of rhombohedral centering vectors is mixed up.

   To correct this, DISCUS now allows the user to choose whether 
   centering generators are applied first or last. The second, new
   sequence, will correspond more clearly to the printing of 
   symmetry operations for centered space groups as given in the 
   International Tables. Currently the old sequence is still the 
   default, this will be reversed in future releases. Presently
   the sequence can be defined by ==> 
!p define generator, {"center" | "symmetry"}
   which defines which group of generators comes first.
4  molecules

   A major issues regarding the assembly of molecules was corrected.
   In several space groups, molecules were not assembled correctly.
   See ==> "data keywords molecule" for further details
4  symmetry

   A new entry in the 'show' menu displays all symmetry operations
   of the current space group in a variety of formats
4  wyckoff

   This is a new command at the main menu level that determines the 
   local site symmetry.
4  define

   This new command defines several settings, just like the ==>"set"
   command does. The "set" command at the main menu level is reserved
   for general settings, common to all programs in the DIFFUSE suite.
   "define" is specific to the individual program.
3  2008_Apr
4  formfactors
   Within the "fourier" menu, you can define your own values for
   the atomic form factors as well as anomalous dispersion correction
   terms. A "reset" was added to switch back to the internal values.
4  stacking faults

   The new parameter "list" added to the distribution mode, allows 
   you to interpret the coordinates of atoms read from the input 
   file as positions of the respective layers. 
   Previously, the parameter "file" interpreted the atom type only 
4  boundary

   A cylindrical boundary has been added.
2  Menu

   The DISCUS section is structured into several menus that 
   are designed to modify the structure, to calculate the 
   diffraction pattern etc. 
   These menus are:

   Read/save a structure
   read       ! Read structure or unit cell from file or internal storage
   save       ! Save the structure to file or internal storage
   plot       ! Write the structure in a format for plotting
   perioditize ! Rearrange the atom sequence in a periodic fashion

   Modify a structure
   decorate   ! Decorate the surface with ligands
   demolec    ! De-molecularize a molecule 
   domain     ! Place domains into host structure
   insert     ! Insert objects into the crystal
   mmc        ! MONTE-CARLO simulations
   rmc        ! REVERSE-MONTE-CARLO simulations
   stack      ! Build a crystal with stacking faults
   symm       ! Perform a generalized symmetry operation
   shear      ! Perform a general shear/affine operation
   waves      ! Apply modulation wave modifications
   transform  ! Describe the structure with a different unit cell

   Information 
   chem       ! Analyze a structure
   connect    ! Build a connectivity table 
   property   ! Set / clear reaction to properties
   storage    ! List / manipulate internally stored structures

   Fourier calculations
   powder     ! Perform powder diffraction calculations
   fourier    ! Perform single crystal diffraction calculations
   rmc        ! REVERSE-MONTE-CARLO simulations
   inverse    ! Perform an inverse Fourier transformation
   diff-four  ! Calculate a difference Fourier map
   patterson  ! Calculate the Patterson function
   output     ! Write Fourier results to disk

   pdf        ! Calculate a Pair distribution function
2  Unit_cell

   The unit cell format adopts a key word controlled style of the data file.
   Except for the lines containing the atoms, each line contains a
   keyword in the first few characters, followed by the parameters needed
   for this keyword. 
   The first line MUST contain the keyword "title", the sequence of the
   other keywords is not relevant.
   The last keyword MUST be "atoms" which starts the list of atoms.
   You may include comments or empty lines anywhere between the 
   "title" and "atoms" keyword.

   The keywords "title", "spcgr", "cell" and "atoms" are required, all
   other keywords are optional.

   The first character after the keyword must be a blank ot TAB. All following
   parameters must be separated by a comma. White spaces between the parameters
   may be either blanks or TABs. 
   

   Example

!p title Single atom structure of NA
!p spcgr Pm-3m
!p symm  1.00,0.00,0.00,0.123, 0.00,1.0,0.00,0.00, 0.00,0.00,1.00,-0.567
!p cell  5.0,5.0,5.0,90.,90.,90.
!p atoms x,    y,    z,  Biso, Property, MoleNum, MoleAt, Occ
!p NA1+  0.0   0.0   0.0 0.1
!p NA1+  1/3, 1-0.5, 0.0, 0.1
!p NA1+  1/3, 1-0.5, 0.3, 0.1,  1
!p NA1+  1/3, 1-0.5, 0.3, 0.1,  1,  0,  0,   1.00

   Further help topics are:

3  title
!p title <title string>

   The title can be any character string up to 80 characters long
3  space
!p spcgr {<symbol> | no. } [, "2"] 
   [, setting:{'abc'| 'bac' | 'cab' | 'cba' | 'bca' | 'acb'}

   The space group symbol is used to generate all atoms within the unit
   cell. The symbols used should be the Hermann-Mauguin symbols used in
   Int. Tables Vol.A. A center of inversion should be given as "-" sign
   immediately preceding the axis. Lattice types need to be given as
   capital characters, mirror planes as small characters.

   Monoclinic cell choices 2,3 or unique c-axis will be assumed if the
   corresponding non standard full Hermann-Mauguin symbol is used.

   Origin choice 2 is indicated by setting the optional second parameter
   to "2".

   The lattice constants are used to distinguish between rhombohedral
   and hexagonal settings.

   The space group symbol is checked for contradictions with the lattice
   constants. In case of error, the unit cell is not read.

   The optional "setting:" parameter can be used in conjunction with an
   orthorhombic space group to describe a different setting. As an example
   you can use the space group # 28 Pma2 in the setting bac to get the
   non-standard space group Pbm2 with:
   spcgr Pma2, setting:bac
   Equivalently, all non-standard orthorhombic settings can be used 
   with the corresponding non-standard space group name. In this case
   omit the "setting:" parameter:
   spcgr Pbm2

   In both cases, the atom coordinates x,y,z must be provided in the
   sequence for the non-standard setting.

   See the DISCUS manual and the International Tables for 
   Crystallography Volume A for a complete listing of all
   orthorhombic settings.
3  cell
!p cell  <a>,  <b>,  <c>, <alpha>,  <beta>,  <gamma> 
!p cell  <a>   <b>   <c>  <alpha>   <beta>   <gamma>

   The first form with comma separating the lattice constants is 
   encouraged. Only with this format, can you use a variable instead
   of fixed unit cell values.

   Alternatively, the lattice constants are read in free format 
   <a b c alpha beta gamma>
   All six constants must be given.

   The space group symbol is checked for contradictions with the lattice
   constants. In case of error, the unit cell is not read.
3  atoms
!p <name>  <x>, <y>, <z>, <B> , <propertyflag>, <MoleNo>, <MoleAt>, <occ>
!p <name>  <x>, <y>, <z>, <B> , <propertyflag>
!p <name>  <x>  <y>  <z>  <B>
!p <name>  <x>  <y>  <z>

   If a unit cell is read, only those atoms in the asymmetric unit should
   be listed.
   For each of the atoms a line must be given with the name of the atom,
   the fractional coordinates and the isotropic thermal coefficient B.
   The property flag is optional. This is, however, automatically
   written to a saved structure file.
   The <MoleNo> and <MoleAt> specify in which molecule the atom is and 
   at which entry within the atom is.
   The <occ> specifies an occupancy for the atom.

   The name (in capital characters) must be left bound in the first 
   columns prior to a blank or TAB.

   The atom name and the coordinates x,y,z are mandatory. 
   The optional parameters should be listed on the 'atom' keyword line.
 
   The fractional coordinates and the B value can be in free format, if the
   lines contains no comma. In this case the property flag must be omitted.
   Otherwise, the fractional coordinates and the isotropic thermal 
   coefficient B can also be specified as arithmetic expressions.

   Optionally charged atoms can be symbolized by e.g. "NA1+".
   See the help entry 'atom names' for a complete list of atoms for which 
   scattering curves are supplied.

   Empty lines in the file are ignored.
3  keywords

   The keywords "title", "spcgr", "cell", and "atoms" are required, see 
   the help one level up. These further optional keyword allow you to
   fine tune the unit cell file.

   You may include commentaries or empty lines anywhere between the 
   "title" and "atoms" keyword.

   Further help topics are:

4  #
!p #<comment>

   You can provide commands for the data file by including lines that
   start with a "#". The content of these lines is ignored.

4  title
!p title <title string>
   The string used as title can be any character string up to 80 characters
   long
4  spcgrp
!p spcgr {<symbol>, <no>} [,"2"]

   The "spcgr" keyword defines the space group of the crystal. 
   The space group is used to generate all atoms within the unit
   cell. The symbols used should be the Hermann-Mauguin symbols used in
   Int. Tables Vol.A. A center of inversion should be given as "-" sign
   immediately preceding the axis. Lattice types need to be given as
   capital characters, mirror planes as small characters.

   Monoclinic cell choices 2,3 or unique c-axis will be assumed if the
   corresponding non standard Hermann-Mauguin symbol is used.

   Origin choice 2 is indicated by setting the optional second parameter
   to "2".

   The lattice constants are used to distinguish between rhombohedral
   and hexagonal settings.

   The space group symbol is checked for contradictions with the lattice
   constants. In case of error, the unit cell is not read.
4  scat
!p scat <name> [,<name>...]

   By explicitly listing the atom names on a 'scat' command line, you
   can define a specific sequence of scattering curves that is independent
   of the sequence of atoms found in the structure file.

   If the structure is read using the 'stru' or 'lcell' commands, DISCUS
   compares the names and atomic displacement parameters (B-values) to
   those found on the 'scat' and ==> 'adp' command lines. If an atom name
   and adp match, the atom is assigned to the scattering curve, otherwise
   an additional new scattering type is defined.
   If you read a unit cell with the 'cell' command, the scattering type
   read from any 'scat' and ==> 'adp' line will define the first 
   scattering types. All atoms that follow will be assigned to new
   additional scattering types, regardless of their name and adp, even 
   if they match the values from the 'scat' and ==> 'adp' command.

   This command is needed if you want to create a list of 
   layer type origins which are read by ==> 'stack'.

   You can use more than one 'scat' and ==> 'adp' command in the structure
   file. The number of atoms on the individual 'scat' and ==> 'adp' 
   lines does not matter, as long as the total number of atom types and
   adp's is identical. Atom names and adps's are matched pairwise using 
   the sequence with which they were read from the 'scat' and ==> 'adp'
   lines.
   Starting with DISCUS 4.0, the number of atom names on the 'scat' and 
   'adp' command lines must be identical. Thus, both commands must be
   present.
4  adp
!p adp <B-value> [,<B-value>...]

   By explicitly listing the atomic displacement parameters (adp) on a
   'adp' command line, you can define a specific sequence of scattering
   curves that is independent of the sequence of atoms found in the
   structure file.

   If the structure is read using the 'stru' or 'lcell' commands, DISCUS
   compares the names and atomic displacement parameters (B-values) to
   those found on the ==> 'scat' and 'adp' command lines. If an atom name
   and adp match, the atom is assigned to the scattering curve, otherwise
   an additional new scattering type is defined.
   If you read a unit cell with the 'cell' command, the scattering type
   read from any ==> 'scat' and 'adp' line will define the first 
   scattering types. All atoms that follow will be assigned to new
   additional scattering types, regardless of their name and adp, even 
   if they match the values from the ==> 'scat' and 'adp' command.

   This command is needed if you want to create a list of 
   layer type origins which are read by ==> 'stack'.

   You can use more than one ==> 'scat' and 'adp' command in the structure
   file. The number of atoms on the individual ==> 'scat' and 'adp' 
   lines does not matter, as long as the total number of atom types and
   adp's is identical. Atom names and adps's are matched pairwise using 
   the sequence with which they were read from the ==> 'scat' and 'adp'
   lines.
   Starting with DISCUS 4.0, the number of atom names on the 'scat' and 
   'adp' command lines must be identical. Thus, both commands must be
   present.
4  generator
!p generator g11,g12,g13,g14, g21,g22,g23,g24, g31,g32,g33,g34 [, power]

   You can define additional generators through the optional "generator"
   keyword. These generators act identical to the generators defined
   through the space group symbol. All previously generated copies of
   the atom in the asymmetric unit are copied by this generator, and will
   in turn be copied by any generators following later.

   The optional parameter power specifies whether this generator is to 
   be applied only once (default) or whether the generator is to be 
   applied again to the first image. A generator for a three fold axes must
   be applied once to copy atom x,y,z to -y,x-y,z and then again to copy
   atom -y,x-y,z to -x+y,-x,z.

   Since these additional generators are applied after the space group
   generators, you can use these generators to create non-standard groups
   or to create a set of symmetries that does not from a group.

   The generator forms the matrix algebra:

   ( g11  g12  g13 )   ( x )   ( g14)
   ( g21  g22  g23 ) * ( y ) + ( g24)
   ( g31  g32  g33 )   ( z )   ( g34)

   The generators:
!p    gene 1,0,0,0.5, 0,1,0,0.5, 0,0,1,0.0, 1
!p    gene 1,0,0,0.5, 0,1,0,0.0, 0,0,1,0.5, 1
   for example would create the following copies of an atom at 0,0,0:
!p     0  ,0  ,0
!p     0.5,0.5,0.0
!p     0.5,0.0,0.5
!p     0.0,0.5,0.5
4  symmetry
!p symmetry s11,s12,s13,s14, s21,s22,s23,s24, s31,s32,s33,s34 [, power]

   You can define additional symmetry operations through the optional
   "symmetry" keyword. These symmetry operations act different than the
   generators defined through the space group symbol or listed as additional
   generators. The symmetry operations copy only those atoms created by the
   generators. The symmetry operations do not act on copies of the atoms 
   created by previous symmetry operations.

   The optional parameter power specifies whether this symmetry operation 
   is to be applied only once (default) or whether the symmetry operation 
   is to be applied again to the first image. A symmetry operation for a 
   three fold axes must be applied once to copy atom x,y,z to -y,x-y,z and 
   then again to copy atom -y,x-y,z to -x+y,-x,z.

   Since these additional symmetry operations are applied after the space group
   generators, you can use these symmetry operations to create non-standard
   groups or to create a set of symmetries that does not from a group.

   The symmetry operation forms the matrix algebra:

   ( s11  s12  s13 )   ( x )   ( s14)
   ( s21  s22  s23 ) * ( y ) + ( s24)
   ( s31  s32  s33 )   ( z )   ( s34)

   The symmetry operations:
!p    symm 1,0,0,0.5, 0,1,0,0.5, 0,0,1,0.0, 1
!p    symm 1,0,0,0.5, 0,1,0,0.0, 0,0,1,0.5, 1
   for example would create the following copies of an atom at 0,0,0:
!p     0  ,0  ,0
!p     0.5,0.5,0.0
!p     0.5,0.0,0.5
4  cell
!p cell  <a>,  <b>,  <c>, <alpha>,  <beta>,  <gamma>
!p cell  <a>   <b>   <c>  <alpha>   <beta>   <gamma>

   The first form with comma separating the lattice constants is 
   encouraged. Only with this format, can you use a variable or 
   an arithmetic expression instead of fixed unit cell values.

   Alternatively, the lattice constants are read in free format 
   <a b c alpha beta gamma>
   All six constants must be given.

   The space group symbol is checked for contradictions with the lattice
   constants. In case of error, the unit cell is not read.

   All six constants must be given.

   The space group symbol is checked for contradictions with the lattice
   constants. In case of error, the unit cell is not read.
4  ncells
!p ncells  nx, ny, nz, ncatoms

   This command tells DISCUS how large the crystal is in terms of unit cells
   along the x,y and z axis.
   This is useful, if you have stored the crystal created by a previous
   simulation and want to continue work on this crystal. In order for
   fast references between atom number and the location of its corresponding
   unit cell, DISCUS must now how many unit cells were created by the
   original ==> 'read/cell' command.
   <ncatoms> is the number of atoms in each unit cell. You can determine
   this number by typing the command "eval n[3]".

   If you saved the structure, using the keyword controlled format,
   see help on the 'save' menu, you can tell DISCUS to save the number of
   unit cells and number of atoms per unit cell values for you.
4  atoms
!p <name>  <x>, <y>, <z>, <B> [, <propertyflag>]
!p <name>  <x>  <y>  <z>  <B>

   If a unit cell is read, only those atoms in the asymmetric unit should
   be listed.
   For each of the atoms a line must be given with the name of the atom,
   the fractional coordinates and the isotropic thermal coefficient B.
   The property flag is optional. This is, however, automatically
   written to a saves structure file.

   The name (in capital characters) must be left bound in the first four
   columns. 
   The fractional coordinates and the B value can be in free format, if the
   lines contains no comma. In this case the property flag must be omitted.
   Otherwise, the fractional coordinates and the isotropic thermal 
   coefficient B can also be specified as arithmetic expressions.

   Optionally charged atoms can be symbolized by e.g. "NA1+".
   See the help entry 'atom names' for a complete list of atoms for which 
   scattering curves are supplied.

   Empty lines in the file are ignored.
4  molecule
!p molecule [parameter]

   This keyword is allowed anywhere between the atoms of the unit cell file.
   It marks the beginning of a group of atoms that are grouped to form a
   molecule.
   Optional parameters are used to specify further details. The first 
   'molecule' keyword must have no parameters.

   Molecules are used in DISCUS for three purposes.
   Regular molecules define a group of atoms that may be moved around as
           a group. The do not have to form a molecule in strict chemical
           sense but are just a group of atoms linked for convenience.
   Objects define a three dimensional object used to simulate small angle
           scattering. The pseudo atoms within the "object" describe the
           position, orientation, and distortion of the "object".
   Domains are representations of domain origins ==> 'domain'. They
           allow you to manipulate just the positions, shape, and size of
           the domains.  Once the positions are fixed, you can insert
           the structure represented by the domain into the host
           crystal.
   Valid parameters are:

5  end
!p molecule end

   The parameter "end" signals the end of a molecule. All atoms still listed
   in the unit cell file are treated as individual atoms.

5  type
!p molecule type,<type>

   The molecule is of type no. <type>. All molecules of the same type 
   can be handled together by several commands like the symmetry menu.

5  generator
!p molecule generator

   This parameter has become obsolete!

   DISCUS determines the internal symmetry of the molecule by determining the
   Wyckoff site symmetry of the first atom within the molecule.

   The first atom of any molecule that lies on a symmetry element of the 
   space group must be located at the point of highest symmetry of the
   molecule. If the structure does not have an atom at this site you must
   include a "void" on this site. This could be the case .e.g. if you have
   an empty triangle on a threefold axis.

   This site symmetry is taken as the internal symmetry of the molecule.

   DISCUS compares the lists of atoms created by the space group and by the
   internal molecule symmetry. Identical sections are linked to one molecule.

   Atoms created by other symmetry operations (like lattice centering...)
   will form a new molecule of the same type.

   See the section on site symmetry in the
   International Tables for further details.
5  symmetry
!p molecule symmetry

   This parameter has become obsolete!

5  character
!p molecule character,{"atoms"|"cube"|"cylinder"|"sphere"}
!p molecule character,{"domain_cube"|"domain_cylinder"|"domain_sphere"}

   A molecule may either represent a list of real atoms, or represent
   an extended object. The distinction is given through the molecule
   character. If the character is set to "atoms", the molecules consists
   of true atoms, and may contain many different atoms. You should 
   calculate the Fourier transformation using the ==> 'fourier'
   command ==> 'set internal'.

   Alternatively, the molecule may represent extended objects. They are
   considered to consist of continuous matter, without any further 
   internal structure. The boundary is a step function, i.e. outside
   there is nothing, inside is continuous matter of constant density.
   Their Fourier transform is calculated using analytical expressions. 
   For each of the available characters, a specific Fourier transformation
   is calculated. Each object must consist of four pseudo atoms.
   The first atom defines the atoms, which represent the matter and
   defines the location of the object within space.
   The next three atoms represent the orientation and lengths of the
   axes of the object. If these are not Cartesian, the object will not
   be the ideal object reflected by its name but a distorted object.
   Each of the axes is the 'half' axis of the object, i.e. half the
   edge length of a cube, radius and half the length of a cylinder,
   and the radius of a sphere.

   Each axis is represented by the difference vector between the 
   position of the corresponding pseudo atom ((Numbers two to four) and
   the first atom. This allows you to apply all DISCUS commands to 
   the individual pseudo atoms, thereby changing the size of the object.

   The axes refer to the base system you used in the ==> 'cell' 
   keyword of the unit cell file, or set using the ==> 'free' command
   at the ==> 'read' menu prompt. If you want to create a sphere of 
   10 Angstrom radius, centered at 0.5,0.5,0.5 in a base system 
   of orthogonal 1 Angstrom long base vectors, the entry should be:

   cell  1.00, 1.00, 1.00,  90.00, 90.00, 90.00
   molecule character,sphere
   molecule density, 5.0
   c       0.500,  0.500,  0.500, 1.45
   xaxi   10.500,  0.500,  0.500, 0.0
   yaxi    0.500, 10.500,  0.500, 0.0
   zaxi    0.500,  0.500, 10.500, 0.0
   molecule end

   
   Useful commands to shift objects are the ==> 'symm' menu,
   to deform an object, use the ==>'shear' menu.
   New objects can be added to the structure with the ==> 'insert' menu.
5  content
!p molecule content, <type> [,<number>]

   This keyword signals the beginning of a list of content for a molecule.
   The parameter <type> gives the type number of the molecule. All molecules
   of identical type can be referred to by a number of DISCUS commands.
   The optional <number> gives the number of the molecule in the list of
   molecules. This number is written by the ==> 'save' command. On input
   the number is ignored! All molecules read via 'molecule content' 
   commands are appended to the list of existing molecule.

   The molecule content must be followed by ==> 'molecule atom' commands 
   and terminated by a 'molecule end' command.

5  biso
!p molecule biso, <value>

   This keyword sets an isotropic displacement parameter for the molecule.
   All intra-molecular distances in a PDF and powder pattern only use
   the atomic displacement parameters, while intermolecular distances
   use this molecular isotropic displacement factor as well.
5  density
!p molecule density, <value>

   This keyword helps you to create objects of identical volume yet 
   different scattering power. The density is expressed in number of 
   atoms per unit volume within the object. 
5  atoms
!p molecule atoms [,<i> ...]

   The atom number <i> is part of the molecule. The number <i> refers to
   the number of the atom in the current crystal. Up to 20 atoms may be
   specified on the 'molecule atom' command line.

   The molecule content must be terminated by a 'molecule end' command.

3  old_format
!p Format of unit cell data file

   The old unit cell data file contains 3 initial lines and one line per
   atom in the unit cell. All lines are in free format, beginning in
   the left most column.

!p Line 1:   Title up to 80 characters
!p line 2:   Space group symbol [,origin choice number]
!p line 3:   Lattice constants a,b,c,alpha,beta,gamma

   and for each atom a line with:

!p           Name(4 characters) x  y  z  isotropic B

   Empty lines be in the cell data file will be ignored.

   Example

!p Single atom structure of NA
!p Pm-3m
!p   5.0 5.0 5.0 90. 90. 90.
!p NA1+  0.0 0.0 0.0 0.1

2  addf
!p addf <resultfile> , <inputfile1> , <scale> , <inputfile2> [, <type>]

   Adds two files. The intensity of the second inputfile is multiplied
   by the scale and added to the intensity read from inputfile 1.
   Optionally the type of the input files can be given. It defaults
   to "ni" for files in the standard format. The <type> should be "gnu" for
   gnuplot files and "1d" for one-dimensional files.

   For standard files, the respective headers are compared for consistency.
   for gnuplot and one dimensional files the h,k,l are compared line by
   line. If an error is detected, the procedure stops. Thus it is possible
   for the result files to be incomplete. They are not deleted to allow
   comparison with the input files.

   Any one of the two input files may be identical to the result file,
   while the two input files must be different files.
2  append
!p appe <name>, <x>,<y>,<z> ,<t>, <na>,<ne>, <delx> [,<dely> [,<delz>]]
!p appe <name>, <x>,<y>,<z> ,<t>, <na>,<ne>, -<bondlength>

   Conditionally inserts an atom of type <name> at the position <x,y,z>
   in crystal space. The temperature coefficient must be given.
   'appe' checks the position <x>,<y>,<z> with respect to all atoms 
   numbered <na> to <ne>. The new atom is NOT inserted, if any of these
   atoms is within the block <x> +- <delx>; <y> +- <dely>; <z> +- <delz>.
   If <dely> and/or <delz> are not given, then they default to the value
   of the last <del.> given on this 'appe' command.

   Note, that the <del.> are in fractional coordinates, NOT in Angstrom.

   In the alternative form, the eight's parameter is interpreted as 
   a bond distance. To distinguish the two forms, the <bondlength> must
   be less than zero. The new atom is inserted, if no atom is less than
   <bondlength> Angstrom from the position <x>,<y>,<z>.

   If the crystal is empty, i.e. n[1]=0, the 'append' command ignores the
   parameters <na>,<ne>, <delx> [,<dely> [,<delz>]]. Since there is no 
   atom within the crystal, there is no need for a comparison. Effectively,
   the 'append' command acts just as an equivalent 'insert' command.

   The parameters <na> and <ne> must be in the range 1 to current 
   number of atoms in the crystal i.e. the value of variable "n[1]",
   and <na> must be less or equal to <ne>.
   The one exception is <na> = n[1]+1 and <ne> = n[1]. This allows you
   to start building e.g. a new layer within which you would like to
   optionally insert atoms without affecting the previous layer.
   Example
   i[0] = n[1]+1
   do i[1]=1,10
     insert  al,ran(0),ran(0),0.5, 1.0, i[0],n[1], -2.4
   enddo
   This loop inserts up to 10 Al atoms in the x,y range 0 to 1 at
   z=0.5 with a minimum distance of 2.4 Angstrom. Since i[0], the 
   value for <na> is initially at n[1]+1, all previously inserted
   atoms are not affected. Since i[0] remains fixed within the loop,
   each new Al atom affects all Al atoms previously inserted within
   this loop.
2  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
2  boundary

   The boundary command at the main discus level is depreciated.
   Please use the ==> 'boundary' command at the ==>'surface' menu,
   further options beyond a simple removal of outside atoms are available
   through the 'surface' menu.
2  branch
!p branch kuplot [, "-macro" <macro_name> [ <par1> [ , <par2> ...]]]
!p branch diffev [, "-macro" <macro_name> [ <par1> [ , <par2> ...]]]

   Active within the discus suite only!

   Branches to the "kuplot" or "diffev" section.

   Within this section any standard KUPLOT command can be
   given. The behavior of "kuplot" is essentially the same
   as in the stand alone version. Likewise for DIFFEV.
  
   The main use will branch to KUPLOT while the discus section
   is run via run_mpi from a DIFFEV slave.

   Optionally the "-macro" qualifier instructs the suite to run the 
   macro <macro_name> (with its optional parameters) before the 
   interactive session is started.
2  change
!p change "object","character",<number>,{"atom"|"cube"|"cylinder"|"sphere"}

   The 'change' command allows you to change settings and characteristics.
   So far, it has only been applied to objects.

!p change "object","character",<number>,{"atom"|"cube"|"cylinder"|"sphere"}

   This command allows you to change the character of an extended
   object. The character of the object Number <number> will be changed
   to one of {"atom"|"cube"|"cylinder"|"sphere"}.
2  chemistry
!p chemistry

   Enters the 'chem' sub level. Here all kind of statistics about the
   model crystal can be obtained like relative amount of elements,
   distribution of bond-lengths, ...

   NOTE: The MMC and CHEM sub level share some variables which define
         neighbors etc. and settings made in this sub level might be
         altered when using the other sub level. It is always save to
         repeat settings when entering this sub level if both levels
         are used. 

   Further information is available for commands

3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help level)
!p =       ! Algebra (see main help level)
!p angl    ! Calculate average bond angles for given neighbors
!p apply_symmetry ! Use the space group symmetry to generate vectors
!p aver    ! Calculates average structure and occupancies
!p bang    ! Calculates distribution of bond angles
!p blen    ! Calculates distribution of bond lengths
!p bval    ! Calculates the bond valence sum for given atom
!p continue! Continue a stopped macro (see main help level)
!p corr    ! Calculates neighbor frequencies/correlations
!p disp    ! Calculated average distances for given neighbors
!p echo    ! Echos a string (see main help level)
!p elem    ! Show relative abundances of elements in crystal
!p env     ! Find neighbors around atom/site or position
!p eval    ! Evaluate an expression (see main help level)
!p exit    ! Terminates the chem sub level.
!p field   ! Calculates a correlation field
!p help    ! Gives on-line help for 'chem' (see main help level)
!p homo    ! Calculate concentration/correlation distributions
!p mode    ! Toggles between atoms and molecules mode
!p neig    ! Show neighbors for given neighbor definition
!p set     ! Change settings of 'chem' parameters
!p show    ! Show current parameters
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p trans   ! Transforms between atom-index and unit-cell/site
!p wait    ! Waits for user input (see main help level)
3  angl
!p angl { <name>|<number>|"all"},{<name>|<number>|"all" },
!p      {<name>|<number>|"all" } [,<file>]

   This command calculates the average bond angles and sigmas for the
   specified triplets of atom types for the given neighbors. The neighbor
   determination parameters are set via the commands -> 'set neig' and
   -> 'set ang'. The first atom on the 'angl' command forms the center of
   the bond angle. If an additional parameter <file> is given, all position 
   parameters of the central atom (in lattice units) are written to the
   corresponding file for possible further analysis or plotting.
3  apply_symmetry
!p apply_symmetry [<output_file>]

   This command applies the space group symmetry to generate the 
   symmetrically equivalent vectors. You must have defined one or
   several vectors with the ==> 'set vec' command and grouped 
   these into neighborhoods via ==> 'set neigh'.

   The general concept assumes that you have defined the vector
   correlations for the position x,y,z within the asymmetric unit
   and would like DISCUS to generate the corresponding vector 
   correlations for the other atom positions as well.

   Example if an atom is on a general position you could specify:
   set vec, 1,  1, 2, 0,0,0
   set neig, vec, 1
   apply_symmetry
   This would generate the corresponding vector correlations for 
   the other atoms in the unit cell that are symmetrically
   equivalent to xyz.

   If an atom is on a special position, like a mirror plane, the 
   apply_symmetry command will generate the mirror image of the 
   vector.


   If the optional <output_file> is given, DISCUS will write the
   original "set vec, ..." and the generated ones into this file.
3  aver
!p aver [ "one" | "ind"]

   This command allows to calculate the average structure of the current
   model crystal. The average position, the standard deviation and the
   occupancy of every site within the unit cell is given. 

   CHANGE as of Version 5.6.5 !!! Non-backwards compatible !!!
   The site number, the atom type that occupies this site, the average
   positions and sigmas and the occupancies are stored in the variable 
   array 'res'. Per site and multiple atom type on a site nine numbers
   are written to the result variable. 

   Without parameters or with parameter "one", all atoms on a site are
   treated as one type and a common average position is calculated.
   With parameter "ind", the average position is calculated individually
   for different atom types that may be present on a given site.

!p Warning: This command works only correct, if the structure is given
!p          in the order created by the 'read cell' command. Appended
!p          atoms are simply ignored ! However, using the PURGE command
!p          is not recommended when using this commands !!!!
3  bang
!p bang { "all" | <name> | <number> }, 
!p      { "all" | <name> | <number> }, 
!p      { "all" | <name> | <number> }, [<filename>]

   This command calculates the bond angle distribution between the
   selected atoms (by <name>, <number> or "all"). The histogram
   is saved to the file <filename>. The number of points of the
   histogram is given by 'set bin,<ip>'. The calculation mode
   can be switched between "quick" and "exact". The mode "exact"
   calculates the bond angle for EVERY atom pair within the crystal
   whereas the mode "quick" only looks at neighboring unit cells.
   BUT in the "quick" mode errors can occur due to using the "purge"
   command or appending atoms to the structure. 
   Allowed bond angle range, bond length range, calculation mode and 
   sigmas for a neighbor matching criteria are given with the 
   'set' command.

   If the first letters of the filename are "kuplot", the output
   is transferred directly to the KUPLOT section. This is valid 
   within the suite only, a stand-alone DISCUS program will write a
   file that starts with the letters "kuplot".
3  blen
!p blen { "all" | <name> | <number> }, 
!p      { "all" | <name> | <number> }, [<filename>]

   This command calculates the bond length distribution between the
   selected atoms (by <name>, <number> or "all"). The histogram
   is saved to the file <filename>. The number of points of the
   histogram is given by 'set bin,<ip>'. The calculation mode
   can be switched between "quick" and "exact". The mode "exact"
   calculates the bond length for EVERY atom pair within the crystal
   whereas the mode "quick" only looks at neighboring unit cells.
   BUT in the "quick" mode errors can occur due to using the "purge"
   command or appending atoms to the structure. 
   Allowed bond length range, calculation mode and sigmas for a neighbor
   matching criteria are given with the 'set' command.
   The resulting distances, standard deviations and number of pairs
   of atoms are stored in the res[i] variables.

   If the first letters of the filename are "kuplot", the output
   is transferred directly to the KUPLOT section. This is valid 
   within the suite only, a stand-alone DISCUS program will write a
   file that starts with the letters "kuplot".
3  bval
!p bval "atom",<ia>,<radius>
!p bval "site",<nx>,<ny>,<nz>,<site>,<radius>

   This command calculates the bond valence sum for a given atom. The
   parameters are identical to those of the command -> env. The atom
   can either be specified by its index ("atom") or unit cell and 
   site number ("site"). The radius specifies the maximum distance 
   for the function to search for neighbors. The radius is given in
   Angstroms. Note that bond valence parameters are only available
   for certain pairs of atoms in a specific oxidation state. It is
   also required to use the corresponding atom names, e.g. Zr4+ rather
   than Zr in the structure file. The bond valence parameters are
   taken from a list compiled by I.D. Brown, McMaster University, Canada.
   The resulting bond valence sum is stored in variable res[1].
3  corr
!p corr "occ", { <name>|<number>}, {<name>|<number>}
!p corr "disp",{ <name>|<number>|"all"},{<name>|<number>|"all" }

   This command starts the calculation of occupational ("occ") or
   displacement ("dis") correlations within the crystal. The occ.
   correlations require the name or number of two DIFFERENT atom
   types to be given. The displacement correlation calculations
   requires atom names or "all" to use all atom types. The neighbor
   determination parameters are set via the commands -> 'set neig' and
   -> 'set vec'. The displacement directions used to calculate disp.
   correlations are set using the -> 'set dir' command.  Correlation
   values can be :

!p correlation > 0 : preferred same neighbors / displacement
!p correlation = 0 : random distribution 
!p correlation < 0 : preferred different neighbors / displacements

   The correlations are calculated according to the following 
   equations:

!p           occupational                         displacement
!p ------------------------------------------------------------------
!p           P(i,j) - theta**2                     <x(i)x(j)>
!p  c(i,j) = -----------------     c(i,j) = ------------------------
!p           theta * (1-theta)              sqrt(<x(i)**2><x(j)**2>)
!p
!p  P(i,j): pair prob. sites i,j   x(i): displacement from average pos.
!p  theta : concentration          <>  : average
!p
   The resulting correlations are stored in the variables res[<i>] 
   with <i> being the number of the corresponding definition for
   neighboring distances or vectors. The variable res[0] contains as 
   usual the number of variables returned by the command.
3  disp
!p disp { <name>|<number>|"all"},{<name>|<number>|"all" } [,<file>]

   This command calculates the average distances and sigmas for the
   specified pairs of atom types for the given neighbors. The neighbor
   determination parameters are set via the commands -> 'set neig' and
   -> 'set vec'. If an additional parameter <file> is given, all difference
   vectors (in lattice units) are written to the corresponding file
   for possible further analysis or plotting.
3  elem
!p elem [ { "on" | "off" } ]

   Displays information about elements in the model crystal like 
   relative abundances of the elements. 'void' stands for a vacancy.
   The results (range 0..1 rather than %) are stored in the variable
   res[<i>+1], with <i> the number of the atom type. 
   Entry res[0] give the number of atom types. 
   Entry res[1] gives the relative number of VOIDS.   
   The optional parameter "on" or "off" controls if screen 
   output is produced.
3  env
!p env "atom",<ia>,<radius>
!p env "site",<nx>,<ny>,<nz>,<site>,<radius>
!p env "pos", <x>,<y>,<z>,<radius>

   The command 'env' allows the user to print out all atoms within
   a distance of <radius> A around the given positions. This position
   can be given by an atom index <ia> ("atom"), a unit cell <nx>,<ny>,
   <nz> and site <site> ("site") or as absolute position <x>,<y>,<z>
   in lattice units ("pos"). The neighbor determination mode and
   possible periodic boundaries can be defined using the command 
   -> 'set mode'. The atom indices of the neighboring atoms are 
   stored in the variable res[i]. The variable res[0] contains the
   number of neighbors that were found.
3  field
!p field {"occ" | "disp"},<a1>,<a2>,<file>,<xmin>,<xmax> [,<ymin>,<ymax>]

   This command allows the calculation of a correlation field. The
   first parameter determines the use of 'occupational' or 'displacement'
   correlations. The next two parameters specify the atoms to be used.
   They can be specified as number or name (-> corr). The next 
   parameter is the name <file> for the output graphics file that
   can be read by the plot program KUPLOT. The last parameters define
   the range in x- and y-direction. If no y-values are given, only
   a 1-dimensional field is calculated. The values of <xmin>, <xmax>,
   <ymin> and <ymax> are multiples of the neighbor vectors defined.
   
   The following example will compute the correlation field along <100> 
   up to the 20th neighbor:

!p discus/chem> set vec,1,1, 1,0,0
!p discus/chem> set neig,vec,1
!p discus/chem> field zr,void,corr.xy,0,20
3  homo
!p homo "occ",<atom>,<file>
!p homo "cor",{"occ" | "dis"},<at1>,<at2>,<file>

   This command computes the concentration or correlation distribution
   within the crystal. The sampling volumes are set using the -> 'set
   lots' command. The size of the resulting histogram can be altered
   using the command -> 'set bin'. The following two options are 
   available:

   "occ": Here the concentration distribution of the atom <atom> is
   computed. The resulting histogram is written to the file named
   <file>. 

   "cor": Here the correlation distribution for all defined neighbors
   is computed. The third parameter determines whether occupational 
   or displacement correlations are computed. The next two parameters
   specify the atom types and the last parameter the filename for
   the histogram output. Note that *all* defined neighbors will be
   written to the file. To get a specific correlation distribution 
   use a single neighbor definition.
3  mode
!p mode [ { "atom" | "mole" } ]

   This command determines whether CHEM commands operate on atoms
   or on molecules. Note that when working with molecules the atom
   names or numbers in the command descriptions have to be replaced
   with molecule types. Note that not all commands are available
   in molecule mode (e.g. 'aver', 'blen').
3  neig
!p neig <index>,<ic>

   This command determines and displays the neighboring atoms or
   molecules around a given atom or molecule given by <index> for 
   the neighbor definition <ic> (-> 'set neig').

   The resulting atom or molecule indices of the determined neighbors
   are stored in the variable res[i] where i is the number of the
   neighbor. The variable res[0] contains the number of found
   neighbors.
3  set
!p set <subcommand>,...

   This command sets various parameters within the 'chem' section of 
   the DISCUS program. Valid <subcommands> are:

4  commands
!p "ang"     : defines the neighbors for bond angle calculations
!p "bang"    : sets range for bond angle calculations
!p "blen"    : sets range for bond length calculations
!p "bin"     : sets number of points for bond length histogram
!p "cryst"   : sets crystal dimensions (if determined wrong by read stru)
!p "lots"    : sets crystal sampling volumes for 'homo'
!p "mode"    : sets calculation mode ("quick"/"exact")
!p "neig"    : defines how correlations are calculated
!p "vec"     : defines correlation vectors
4  ang
!p set "ang",<iv>,<is1>,<is2>,<dx2>,<dy2>,<dz2>,<is3>,<dx3>,<dy3>,<dz3>

   This command is used to define the neighbors for bond angle calculations.
   To group these neighbor definitions use the ==> 'set neig' command. The
   first parameter <iv> is the number of the angle to be defined. The
   variable <is1> gives the number of the crystal site at the center of the
   angle. Variables <is2> and <is3> give the number of the crystal site at each
   end of the angle. The values of <dx*>,<dy*> and <dz*> define relative 
   position of the neighbors in the same or adjacent unit cells. Neighbors
   within one unit cell have <dx*>,<dy*> and <dz*> set to zero. If you want
   to define angles crossing the unit cell boundaries set <dx*>,<dy*> and
   <dy*> accordingly.
4  bang
!p set "bang",<min>,<max>

   This command sets the range <min> to <max> of the bond-angle to be
   calculated and binned to the histogram.
4  blen
!p set "blen",<min>,<max>

   This command sets the range <min> to <max> of the bond-length to be
   calculated and binned to the histogram.
4  bin
!p set "bin",<number>

   This command sets the number of points for the histograms created
   by 'chem'.
4  cryst
!p set "cryst",<nx>,<ny>,<nz>,<natoms>

   A bug in the current version of DISCUS sometimes causes wrong crystal-
   dimensions. This command allows to rewrite the values for the crystal-
   dimension <nx>,<ny>,<nz> and number of atoms in a unit cell <natoms>.
4  lots
!p lots "off"
!p lots {"box" | "ellipsoid"},<lx>,<ly>,<lz>,<n>,{"yes" | "no"},[<fname>]

   This command allows the definition of 'small crystal volumes' to
   be used to check the homogeneity of the crystal (-> 'homo').
   For details about the command and its parameters see the help file
   entry for -> 'four lots'. 
4  mode
!p set "mode",{"quick"|"exact"} [, {"period" | "normal"}] [,<axes>]

   This command switches the calculation mode between "quick" and "exact".
   In the "quick" mode only the neighboring unit cells around a certain
   atom are taken into account. If the command 'purge' is performed or a
   structure is read where the atoms are not listed in the DISCUS order
   this mode might fail, because the calculation of the index of an atom
   in a neighboring unit cell can be wrong. In this case the "exact" mode
   should be used which taken ALL other atoms into account. 

   The second optional parameter determines if periodic boundaries are
   used. Note that this only works if the "quick" mode is selected and
   NO extra atoms were added to the crystal.

   Note that this setting does not affect the calculation of correlations
   defined by vectors using the 'set vec' command.
4  neig
!p set "neig",<subcommand>

   This command determines how DISCUS calculates the correlation value
   using the command 'corr'. These settings might be overwritten when
   using the MMC sub level. The following subcommands are valid:

5  commands
!p "ang"  : Defines neighbors via given angles
!p "add"  : Adds current definition to list of correlations
!p "dis"  : Defines neighbors via distance criteria
!p "dir"  : Defines directions for displacement correlation calculations
!p "rese" : Resets list of defined neighbors
!p "vec"  : Defines neighbors via given vectors
!p     [,"number:"<value>]
!p     [,"number:next"]

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2
5  ang
!p set "neig","ang",<iv1> [,<iv2>,..]
!p set "neig","ang",<iv1> ,<iv2>, "range"
!p     [,"number:"<value>]
!p     [,"number:next"]

   "Ang" results in DISCUS using correlation angles <iv> to be used
   for the calculation. The parameters are the numbers <iv> of the 
   correlation angles defined with 'set ang'.
   If the second command form is given, the correlation angles in the
   range <iv1> to <iv2> will be used for the calculation.

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2
5  add
!p set "neig","add"
   
   This command is depreciated. Best use the optional parameter
   number:value on the regular "set neig, ..." commands instead.

   "Add" adds the current neighbor definition to the list of
   definitions executed later by the -> 'corr' command. Use 'show'
   to get a list of defined correlation vectors/distances. DISCUS saves
   actually a copy so that no "add" is needed after the last definition
   is entered.
5  dis
!p set "neig","dis",<u>,<v>,<w>,<fsig> [, <wsig>] [, {"sym" | "nosym"}]
!p     [,"number:"<value>]
!p     [,"number:next"]

   "Dis" causes DISCUS to determine the neighbors used for the 
   calculation of the correlations using the given distance and 
   direction (optional). Those neighbors having a distance corresponding
   to the vector <u>,<v>,<w> given in unit cell units are taken into
   account for the calculation. The parameter <fsig> sets the allowed
   difference of the observed distance to the theoretical value
   (+- <fsig>/2). The next optional parameter gives the allowed deviation 
   from the neighboring direction given by <u>,<v>,<w>. The last 
   parameter determines if symmetrically equivalent directions to 
   <u>,<v>,<w> should be used as well. If this parameter is omitted ALL
   neighbors with the correct distance are valid.

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2
5  dir
!p set "neig","dir",<x1>,<y1>,<z1> [,<x2>,<y2>,<z2>]
!p set "neig","dir","all"
!p     [,"number:"<value>]
!p     [,"number:next"]

   This command sets the displacement directions to be used for the
   calculation of displacement correlations. The parameter "all" will
   calculate the displacement correlations for displacements in all
   directions, i.e. the resulting correlation gives the correlation
   of displacements of two neighboring atoms regardless of the direction
   of the displacement itself. One can also give specific directions,
   e.g. if one wants to determine the correlations of displacements 
   in  z-direction of site i with the ones in x direction of site j 
   one would enter the command 'set dir,0,0,1,1,0,0'. Note that the 
   neighboring vector between sites i and j is set by the command 
   'set neig'. If <x2>,<y2>,<z2> are not given their values are set to 
   those of <x1>,<y1>,<z1>.

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2
5  rese
!p set "neig","rese"

   "Rese" resets the list of correlation vector/distances definitions.
5  vec
!p set "neig","vec",<iv1> [,<iv2>,..]
!p set "neig","ang",<iv1> ,<iv2>, "range"
!p     [,"number:"<value>]
!p     [,"number:next"]

   "Vec" results in DISCUS using correlation vectors <iv> to be used
   for the calculation. The parameters are the numbers <iv> of the 
   correlation vectors defined with 'set vec'.

   If the second command form is given, the correlation vectors in the
   range <iv1> to <iv2> will be used for the calculation.

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2
4  vec
!p set "vec",<iv>,<is1>,<is2>,<dx>,<dy>,<dz>

   This command is used to define correlation vectors that might be used
   to calculate correlations within the crystal (-> 'set neig'). The 
   first parameter <iv> is the number of the vector to be defined. The
   variables <is1> and <is2> give the number of the crystal site at each
   end of the vector. The values of <dx>,<dy> and <dz> define the vector
   in unit cells. Correlation vectors within one unit cell have <dx>,<dy>
   and <dz> set to zero. If you want to define correlation vectors crossing
   the unit cell boundaries set <dx>,<dy> and <dy> accordingly.
3  show
!p show

   This command lists the current settings and correlation vector
   definitions on the screen.
3  trans
!p trans <atomindex> or
!p trans <x>,<y>,<z>,<site>
!p            ",output:screen" | ",output:none"
!p            ",boundary:periodic" | ",boundary:crystal"

   This command allows to transform between a given index of the
   storage array <atomindex> and the corresponding unit cell <x>,<y>,<z>
   and site <site>. The parameter not given is calculated ...

   The optional parameter "boundary:periodic" will apply periodic boundary
   conditions to the unit cell indices <x>, <y>, <z>

   The optional parameter "output:none" will suppress the screen output.

   Trans stores the results in the "res[]" variable:
   res[1] : <atomindex>
   res[2] : <x>
   res[3] : <y>
   res[4] : <z>
   res[5] : <site>

   The command is identical to the ==> 'index2cell' command in the
   main menu.
2  connectivity

   Switches to the connectivity menu.
   At this menu all parameters related to interatomic distances
   and the connectivity list are defined.

   Modification Note: As of version 5.24 DISCUS will perform the
      requested action (add, set, remove) for all central atom
      types with this name if the central atom is specified by
      name instead of type number.
      add Si, O, 1.2, 2.0, silicon
      Creates a connectivity for all Silicon atom types.
      add  3, O, 1.2, 2.0, silicon
      Creates a connectivity for atom type 3 only.

3  Commands
!p add     ! Adds a new definition 
!p create  ! Creates the actual connectivity list for each atom
!p delete  ! Deletes the connectivity list around atoms
!p recreate  ! Recreates the actual connectivity list for each atom
!p remove  ! Removes an individual connectivity definition
!p reset   ! Resets to program start, removes all def.s and the 
!p         !        connectivity list
!p set     ! Sets an individual definition
!p show    ! Shows the current definitions
3  add
!p add <central_atom_type>, <neigh types>, <rmin>, <rmax> 
       [,<max_neig], <def_name>, 
       ["molescope:"{"ignore"|"within"|"outside"}]

   Add a new connectivity definition. 
   For the atom type <central_atom_type> a new definition is 
   added. Atoms of types <neigh types> that are in a distance shell 
   from <rmin> to <rmax> are entered into this definition. 

   If <rmin> is set to zero, all neighbors, even at infinitely small
   distances are included in the connectivity. The central atom itself
   is excluded from the list. 
   Keep in mind that the central atom number may appear in the 
   connectivity list, if periodic boundary conditions are included.
   This will be the case if <rmax> is large enough to wrap around 
   the complete crystal. 

   The last but one parameter is optional and can be used to limit the 
   number of neighbors in the connectivity. If present, it takes the
   form: "first:1" or "first:2" etc. The string "first:" is mandatory
   and is followed by the actual number of neighbors. If DISCUS finds 
   less than these neighbors, the connectivity is of course less than
   the intended number of neighbors.

   The last parameter is a name for this definition. 

   As of version 5.14 a new optional parameter allows you to restrict
   the scope of the connectivity to atoms that are within the same
   molecule as the central atom. This parameter takes the form:
   "molescope:"{"ignore"|"within"|"outside"}
      Choice "ignore" signals that connectivity will ignore if the
      central atoms and any of its neighbors are within a molecule
      or not.
      Choice "within" creates a connectivity between a central atom
      that must be within a molecule and other atoms within the
      very same molecule.
      Choice "outside" creates a connectivity for a central atom
      that must be within a molecule and other atoms that are 
      not part of this molecule.

   This command just defines the settings of this connectivity. The 
   actual list is created via ==> 'create'.

   Keep in mind that many different atom types may exist, even if 
   the names and ADP of two or more atoms in the cell file were 
   identical. If you read the structure with the "cell" command 
   all atoms within this asymmetric unit are treated as individual 
   atom types! Use the atom type number instead of the atom name
   for a clear distinction.
   Alternatively read the structure with the "lcell" command
3  create
!p create {<central_atom_type>, {<def.no.>| <def_name>}}

   Creates the actual connectivity list. 
   The program performs a loop over all atoms and searches for neighbors
   that are valid under any of the connectivity definitions. The valid
   neighbors are recorded into the connectivity list

   Warning, keep in mind that ==> 'property' settings will affect the
   search for neighbors as well.

   Any old connectivity list is replaced by a new 'create' command.

   If the second command form with parameters is chosen, only the 
   connectivity for the specified atom will be created. 
   This is helpful if: 
     you create (several) connectivities first, 
     then perform a modification of the crystal that may affect the 
     original connectivities
     Finally need to create a new connectivity but do not want to
     change the original connectivities.
   This command for  is identical to a 
     recreate <central_atom_type>, {<def.no.>| <def_name>}
3  delete
!p delete
!p delete <central_atom_type>, <def_name>

   Deletes the current connectivity list for all atom types.

   The second form deletes the named connectivity list for the
   specified atom types. The remaining connectivities persist 
   for the atom type. All connectivities for all other 
   atom types remain as well.
3  recreate
!p recreate <central_atom_type>, {<def.no.>| <def_name>}

   Recreates the connectivity list for the specified atom type and 
   connectivity definition.
   All neighbors to a central atom of this type are redetermined. 
   The previous entry in the connectivity list is completely lost.

   If the connectivity does not create, it is created without
   any error message.

   All other connectivities are not affected by this command.
3  remove
!p remove <central_atom_type>, {<def.no.>| <def_name>}

   Removes the definition number <def.no.> or name <def_name> for 
   central atom type <central_atom_type>.
   If further definitions exist for this atom type, they are shifted
   forward, and their definition no. is decremented.
3  reset

   Resets the connectivity to program start conditions.
   All definitions are removed and the connectivity list is deleted.
3  set
!p set <central_atom_type>, {<def.no.>| <def_name>}, <neigh types>, <rmin>, 
                                                                    <rmax> 

   This command allows you to replace the settings for the definition 
   number <def.no.> or name <def_name> for the central atom type 
   <central_atom_type>.
   The definition must have been created by a previous 'add' command.
3  show
!p show
!p show "connectivity", <atom_no.>, <def.no.>

   Without arguments, the 'show' command shows a list of all 
   connectivity definitions that have been added.

   With the fixed first parameter "connectivity", the show command will
   show the list of neighbors around atom no. <atom_no.>, which have
   been found using definition number <def.no.> for the scattering
   type of atom no. <atom_no.>
   The list of atom numbers is copied into the result variable "res".
3  switch
!p switch
!p switch <is>, {<conn_number>|<conn_name>}
!p switch <iatom>,<is>, {<conn_number>|<conn_name>}

   Switch the connectivity between a pair of atoms. 
   DISCUS will find a random atom A and randomly choose a neighbor
   atom B among the selected connectivity. For atom A a further 
   neighbor C and for atom B a further neighbor D is chosen among 
   the respective connectivities. Atom C is then connected to 
   atom B and atom D to atom A:

   prior     afterwards
   A ==> B   A ==> B
   A ==> C   A ==> D
   B ==> A   B ==> A
   B ==> D   B ==> C
   
   With no parameters any atom with any atom type is selected and
   the connectivity is the connectivity number one.

   With two parameters, an atom of type <is> is chosen and the
   connectivity must be specified.
   With three parameters, atom number <iatom> is chosen and the
   scattering type <is> must match this atom, and the 
   connectivity must be specified.
2  copy
!p copy <s> , < n> , <x> , <y> , <z>

   Copies an atom. If <s> is "a" the atom number <n> is copied to
   absolute positions <x>,<y>,<z> in crystal space, if <s> is "r", a
   relative motion copies the atom number <n> to the sum of present
   position and vector <x>,<y>,<z>.
2  export
!p export "cif",<file{".cif"]> [, "spcgr:original"]
!p export "shelx",<file{".ins"]>
!p export "rmcprofile",<file{".rmc6f"]>  [version:{"6"|"7"}]
!p export "vasp",<file]>
!p export "poscar",<file]>
!p export "scatty",<file]>

   cif
   Exports the atoms of the current structure as a minimal CIF
   file. With the optional parameter "spcgr" set to original you
   can retain this original space group instead of the default
   space group "P1". 
   You can even specify another space group instead of the string
   "original" if you want to change the space group. Be aware 
   the 'export' does not check the compatibility of the 
   space group and lattice parameters.

   shelx
   Exports the atoms of the current structure as a SHELXL instruction file

   rmcprofile
   Exports the atoms of the current structure as a RMCprofile 
   version 6 or 7 input file

   vasp
   poscar
   Exports the atoms of the current structure as a VASP "POSCAR" file. 

   scatty
   Exports the atoms of the current structure as a SCATTY file
   Only the "*_atoms_01.txt" file is written. The user has to edit his
   "scatty_config.txt" file individually.
2  d2r
!p d2r <u>,<v>,<w>

   This command transforms direct space vector <uvw> into its corresponding
   reciprocal space coordinates. See "r2d" for the reverse transformation.
   The resulting vector is stored in "res[1]", "res[2]", "res[3]".

   The parallel, equivalent vector, normalized to 1/(length of [u,v,w]) 
   is stored in "res[4]", "res[5]", "res[6]"
2  decorate

   The main menu for surface decoration. 
   The commands allow you to define a variety of decoration modes for 
   guest structures (molecules=ligands) to be placed on top of an external
   surface.

   The operation tries to do this quietly in the background but does have 
   a few side effects. Once started the program will:
   Distribute the surface atoms (=anchors) that are bonded to the ligands as 
   evenly as possible on the surface. To achieve this, it builds resets the 
   ==> 'connectivity', builds its own and then uses ==> 'mmc' with a repulsive
   potential to distribute the anchors evenly and to avoid close anchor-anchor
   distances. Eventually the internally saved core is placed back into the 
   surface shell via the 'domain' concept. These steps overwrite previous user
   settings within the connectivity, mmc, and domain menu's.
   The ligands are read from their structure files
   and automatically transformed to the metric of the host structure. There is
   no need to transform the ligand metric to that of the host structure prior
   to being used. As the ligand molecules need to be rotated anyway to fit the 
   local surface, the orientation relationship between the ligand metric and 
   the host metric is not relevant. 

   If deco successfully placed molecules onto the surface, the crystal
   is no longer periodic. Thus periodic boundary conditions and 
   the "chem" quick mode are off. They can be turned back on after 
   explicit 'set crystal' command in the chemistry menu.

3  Commands
!p add     ! Add a new definition
!p reset   ! Reset and clear all definitions
!p run     ! starts the calculation
!p set     ! Define parameters for a definition
!p show    ! Show all current definitions

3  add
!p add <name>, <type>
   Adds a new definition, called <name> of type <type>.
   The definition is referenced by its name in the details on the 'set' command.
   Valid types are:
   "normal"   The ligand molecule is place on top of a single surface atom. 
              A single ligand atom is bonded to the surface atoms. 
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly one 'set bond...' command is required.
   "chelate"  The ligand molecule is placed on top of a single surface atom. 
              A pair of ligand atoms is bonded to the identical surface atom.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.
              
              Exactly two 'set bond...' commands are required.
   "bridge"   The ligand molecule is placed bridging between two different
              surface atoms. 
              A single ligand atom is bonded to two (neighboring) surface atoms.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly two 'set bond...' commands are required.
   "double"   The ligand molecule is bonded with individual bonds to two surface
              atoms. Each bond connects a single surface atom to a single
              ligand atom.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly two 'set bond...' commands are required.
   "multi"    The ligand molecule is bonded with several bonds to a group of 
              surface atoms. 
              A first bond connects (another) ligand atom to
              a (group of) surface atom(s). 
              A second bond connects a ligand atom to a single surface atom.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly two 'set bond...' commands are required.
   "acceptor" Place a ligand molecule with a hydrogen bond type. 
              The surface atom acts as acceptor atom. The surface atom should
              be a reasonable acceptor atom like O, N... and the ligand atom
              should be a Hydrogen. 
              The ligand atom is placed at a user specified distance to the 
              surface atom. This distance should be around 1.9  Angstrom. 
              Within the H atom DISCUS will create a roughly 170 degree bond 
              angle.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly one 'set bond...' command is required.
   "donor"    Place a ligand molecule with a hydrogen bond type. 
              The surface atom acts as donor atom. The surface atom should
              be a reasonable donor atom like H, and the ligand atom
              should be a reasonable acceptor atom like O, N, ... 
              The ligand atom is placed at a user specified distance to the 
              surface atom. This distance should be around 1.9  Angstrom. 
              Within the H atom DISCUS will create a roughly 170 degree bond 
              angle.
              The orientation of the molecule is defined by its axis which is
              placed normal to the local surface.

              Exactly one 'set bond...' command is required.

3  reset
!p reset

   Reset all decoration definitions back to the default values at 
   system start. 
3  run
!p run
   Starts the decoration. 
3  set
!p set
!p set <name>, "ligand", <file>, <density>
!p set <name>, "bond", <atom_type> [, <atom_type>,...], <ligand atom no>, 
!p                                                      <distance>
!p                                  [, "angle:"<b_angle>]
!p                                  [, "anchor:"<n_anchors>]
!p                                  [,{"distri:even" ! "distri:fixed"} ]
!p set <name>, "axis", <ligand atom no 1 >, <ligand atom no 2>
!p
!p set <name>, "tilt", "angle", <value>
!p set <name>, "tilt", "atoms", "auto"
!p set <name>, "tilt", "atoms", <n1>, <n2>, <n3>, <n4>
!p
!p set <name>, {"hkl"| "form"}, {<h>, <k>, <l>| "none"}
!p set <name>, "surface", <ligand atom no> [, <ligand atom no>...]

   This command allows to set the detailed definitions needed to decorate the
   surface.

   set <name>, "ligand", <file>, <density>
       Defines the input file from which the ligand is read. 
       The last parameter <density> defines the ligand density on the surface in
       units of [ligands per A^2]. DISCUS estimates the surface area by counting 
       the number of atoms with the "external" property flag. An average area of
       11.0 A^2 is assigned to each surface atom. 

   set <name>, "bond", <atom_type> [, <atom_type>,...], <ligand atom no>, 
                       <distance>, [, "angle:"<b_angle>]
                                   [, "anchor:"<n_anchors>]
       Defines the bonds of length <distance> between surface atoms of type 
       <atom_type> and atom number <ligand atom no> of the ligand. 

       The number of surface atom types can be flexible, the number 
       of 'set bond ' commands depend on the 
       decoration that is defined by the "add" command.
       For the "normal", "acceptor" and "donor" type exactly 
           one 'set bond' command is required.
       For the "bridge", "chelate", "double", and "multi" type exactly 
           two 'set bond' commands are required.
       For the "multi" type exactly three surface type
           parameters must be given.
           Two 'set bond' commands are required.
           The first 'set bond' command requires three surface types.

       The surface types can be given as type number or as type name. 
       If the type number is given, this atom type will act as anchor. 
       If the type name is given, all atom types with this atom name will act
       as anchors.

       The optional parameter "angle:" is relevant to "acceptor" and
       "donor" bond schemes only. For these schemes the angle is 
       interpreted as the hydrogen bond angle in the Hydrogen atom and
       should be close to 170°.

       The optional parameter "distri" with default value "even" 
       allows you to influence the distribution of surface sites 
       onto which the ligand molecules at bonded. In the default 
       case of "even", the surface site will be -reasonably- evenly
       spread across the surface. With "fixed", the surface sites 
       will be randomly chosen among the surface atoms defined by 
       the <atom_type> parameter, but their locations will remain 
       fixed. As optional parameters default if absent, make sure
       that you specify this optional parameter on the last 
       'set bond' command.

   set <name>, "tilt", "angle", <value>
   set <name>, "tilt", "atoms", "auto"
   set <name>, "tilt", "atoms", <n1>, <n2>, <n3>, <n4>
       Defines a tilt of the molecules relative to the local surface normal.
       If the molecule is reasonably flat, one can expect that the molecules
       will be tilted around an axis that is parallel to both, the 
       local surface and the molecule plane. 
       With "tilt, atoms, auto" DISCUS will 
       calculate a least squares plane through the ligand molecule and 
       tilt the molecule around the axis described above. 
       Alternatively, DISCUS can construct the normal to the molecule
       if you provide the four atom numbers <n1>, <n2>, <n3>, <n4>.
       The normal will be calculated via the vector product of the
       two difference vectors between the pairs: n2-n1  and n4-n3. Make sure
       that these two vectors are not parallel. One of the atoms may
       be present in both vectors. The value of <n1> could for example be
       identical to either <n3> or <n4>.

   set <name>, "axis", "auto"
   set <name>, "axis", <ligand atom no 1 >, <ligand atom no 2>
       Defines the ligand molecule axis. This axis is placed normal to the local
       surface, in as much as the decoration type allows. 
       The two atom numbers define the ligand axis. 

       For the default mode "auto", DISCUS searches for the furthest molecule
       atom that is not involved in a bond. The axis is then defined by
       the first bonding atom and this furthest atom.
       If a molecule consists of just one atom or just of the two atoms
       involved in the "double" or "multiple" bonds, the "auto" mode will
       flag an internal message not to rotate the molecule at all.

       For the types "normal" and "bridge" the axis is placed parallel to the
       normal by an appropriate rotation of the ligand. 
       For the types "double" and "multi" the orientation of the molecule is
       partially defined by the bonds. The remaining freedom is to rotate
       the molecule around the axis defined by the two atoms involved in the
       two bonds. The molecule is rotated to place the axis into a 
       plane that is parallel to the local surface normal.

   set <name>, {"hkl"| "form"}, {<h>, <k>, <l>| "none"}
       Allows to define a restricted placement of the ligands onto one or
       several surface faces or complete forms.
       With "hkl" the restriction applies to a single face <h>, <k>, <l>,
       with "form" the Miller indices <h>, <k>, <l> are expanded to the 
       complete form for the current crystal system. 
       You can use several commands to combine more than one restriction.
       DISCUS calculates the local surface normal and applies a strict
       adherence to the specified Miller indices.
       If the last parameter is "none", all restrictions are removed.

   set <name>, "surface", <ligand atom no> [, <ligand atom no>...]
       Allows to define, which ligand atom numbers will be flagged as
       new surface atom types. All these molecule atoms will inherit the
       surface properties from the site to which this molecule as bonded
       to.  
3  show
!p show
   Show all current definitions
2  define
!p define generator, {"center" | "symmetry"}

   The define commands sets a variety of parameters that are specific
   to the special program, here DISCUS. See the ==> "set" command at
   the "Command Language" help entry for information of general settings
   common to all programs within the DIFFUSE suite.

!p define generator, {"center" | "symmetry"}

   In the original program development, all generators of a given space
   group were applied strictly in the sequence as printed in the header
   of the International Tables. Specifically, the centering generators
   were applied prior to all other generators. Each atom is immediately 
   followed by the corresponding atom to which the centering vector has
   been added.

   In R-centered space groups, a horizontal 2-fold axis, or a center of
   inversion turns the centering vector upside down, effectively 
   converting it into the other centering vector. Thus in these space
   groups, the sequence of some atoms is not exactly that as printed in
   the Tables.

   To adjust this, DISCUS now offers a new mode, in which the centering
   generators are applied after all other generators. Under this new mode,
   all atoms are in the sequence as printed in the International Tables.
   For centered space groups, this block of atom is followed by a
   corresponding block of atoms that is simply translated by the centering
   vector.

   define generator,symmetry
   turns on the sequence in which symmetry generators are applied first
   define generator,center
   turns on the sequence in which centering generators are applied first

   The "symmetry" mode now the default value.
2  demolecularize
!p demolecularize

   Enters the menu to de-molecularize a molecule.
   The molecule entry is removed from internal list, and the 
   molecule properties of the atoms that were in the selected 
   molecul(s) are cleared.

3  deselect
!p deselect moletype:{"all"|"none"| <number> | (<n1>, <n2>...}
!p deselect atomtype:{"all"|"none"| <number> | (<n1>, <n2>...}

   The optional parameter "moletype" deselects which molecule
   types are to be demolecularized.
   The parameter defaults to "all", which means that no
   molecule type will be demolecularized.

   The optional parameter "atomtype:" defines which atom 
   types must be present in the selected molecule types. 
   The parameter defaults to "all", which means that no
   atom type needs to be present. A molecule may contain
   any atom type to be demolecularized.
3  exit
!p exit

   Leave the demolecularize menu, go back to the main
   DISCUS menu.
3  include
!p include molerange:{"none"|"all"| <number> | (<n1>, <n2>...)}
!p include atomrange:{"none"|"all"| <number> | (<n1>, <n2>...)}

   The optional parameter "molerange" selects which molecule
   range are to be demolecularized.
   The parameter defaults to "none", which means that no
   molecule range will be demolecularized.

   The optional parameter "atomrange:" defines whether atoms
   must be within the specified range if the selected 
   molecules are to be demolecularized. 
   The parameter defaults to "none", which means that no
   specific atom range needs to be present. A molecule may
   contain any atom range to be demolecularized.
3  prop
!p prop {"ignore"|"present"|"absent"} , <property> [, <property> ...]

   Defines which properties all atoms in the molecule must have
   for the molecule to be demolecularized.

   "ignore"
   The properties listed will be ignored. The listed properties do
   not have an affect on the choice to demolecularize the molecule
   or not. 
   "present"
   All atoms in the molecule must have the properties listed, 
   for the molecule to be demolecularized.
   "absent"
   All atoms in the molecule are not allowed to have the 
   properties listed.

   The properties can be one of:
   "all"
   Apply the rule to all properties.
   "normal"
   The rules apply if an atom is a normal atom (not a void)
   "molecule"
   The rules apply if an atom is part of a molecule
   "domain"
   The rules apply if an atom is part of a domain
   "outside"
   The rules apply if an atom is outside of the crystal. This status
   is set if the atom has been cut off by a ==> 'boundary' command.
   "external"
   The rules apply if an atom is close to an external surface, either
   on the inside or on the outside. 
   The flag is set by the ==> 'boundary' command. Individual distances
   to the boundary can be set within the ==> 'surface' menu through
   the ==> 'surface/fuzzy' command.
   "internal"
   The rules apply if an atom is close to an internal surface, either
   within the host or within the guest structure. 
   The flag is set by placing a guest structure into the crystal through
   the ==> 'domain' menu. Individual distances
   to the boundary can be set within the ==> 'domain' menu through
   the ==> 'domain/fuzzy' command.
3  select
!p select moletype:{"none"|"all"| <number> | (<n1>, <n2>...)}
!p select atomtype:{"none"|"all"| <number> | (<n1>, <n2>...)}

   The optional parameter "moletype" selects which molecule
   types are to be demolecularized.
   The parameter defaults to "none", which means that no
   molecule type will be demolecularized.

   The optional parameter "atomtype:" defines which atom 
   types must be present in the selected molecule types. 
   The parameter defaults to "none", which means that no
   atom type needs to be present. A molecule may contain
   any atom type to be demolecularized.
3  show

   Show the current settings
3  reset

   Reset to system start, which means that:
   no molecule types are selected 
   the molecule range is set to zero
   any atom may be present
   no specific atom range needs to be present
3  run

   Perform the actual calculation
2  diff-four
!p diff

   Switches to the difference Fourier level of DISCUS.
   All input parameters are identical to "inverse" see the help to
   "inverse" for further details.

   The difference Fourier can only be calculated from a "shelxl" type 
   file. The program calculates (Fobs-Fcalc) and then calculates the
   corresponding inverse Fourier.
2  displacement
!p displacement <iatom> [,out:{"no"|"yes"}] [,aver:{"no"|"yes"|"off"}]
                        [,indi:{"no"|"yes"}]

   This command calculates the displacement vector of atom number
   <iatom> from its average position. The result is stored in
   the result variables res[1] to res[3].

   The optional parameters do:
   out:{"no"|"yes"}  A short output will be written to screen
       Default is "no"
   aver:{"no"|"yes"|"off"}  The average positions are calculated.
       Default is "no", it is much faster to do this once 
       in the chem menu prior to an analysis of the 
       displacement vector for several atoms.
       The first time that the 'displacement' command is used,
       DISCUS will automatically calculate the average structure,
       unless you explicitly turn this off with "aver:off". 

       The automatic calculation of the average structure is
       turned back on only with a DISCUS ==> 'reset' or the
       'chem' 'reset' commands. If you modify the structure or
       read a new cell/structure the automatic calculation will 
       NOT be turned on again. As this might give very wrong 
       displacement vectors, it is highly recommended to
       calculate the average position with the "chem" 
       command "aver" prior to the displacement commands. 
   indi:{"no"|"yes"}  The displacement vector is by default 
       taken relative to the average of all atom species 
       that may be on a given site. In analogy to the 
       ==> 'aver indi' command in the ==> 'chem' menu
       the displacement vector of an atom may also be 
       calculated relative to the average position of all
       atoms of the same chemical species.
2  domain

   This command branches to the domain menu level.

   Domains are understood as any group of atoms which is to replace
   part of the original structure. A domain may be encoded within the
   file in two different ways:
   A) A list of pseudo-atoms
   B) A list of explicit domains

   The pseudo-atom file structure is identical to any DISCUS structure 
   file. The atoms are interpreted as positions of the domains within 
   the host structure. Size, character, and orientation of the domain
   can be set by the user via the 'assign' commands at the domain level.

   The domain lists encode the size, character, and orientation within 
   the file itself.

   If domain successfully placed guests into the crystal, the crystal
   is no longer periodic. Thus periodic boundary conditions and 
   the "chem" quick mode are off. They can be turned back on after 
   explicit 'set crystal' command in the chemistry menu.

   Valid commands at this sub level are:
3  commands

!p assign     ! Assigns size, character etc to the pseudo-atoms
!p inputfile  ! Defines the input file name
!p mode       ! Defines the interpretation of the input file 
!p reset      ! Set definitions back to system start
!p run        ! Perform the actual replacement
!p set        ! Sets various definitions
!p show       ! Show current settings

3  Instructions on usage

   These are some quick hints on how to use the domain level.

   An explicit domain is encoded similar to a molecule:

   domain
   domain character,domain_fuzzy
   domain file,domain_a.stru
   domain fuzzy,0.8
   posi      0.0000     0.0000    0.0000  0.000
   xaxi      1.0000     0.0000    0.0000  1.000
   yaxi      0.0000     1.0000    0.0000  1.000
   zaxi      0.0000     0.0000    1.0000  1.000
   cent      0.0000     0.0000    0.0000  0.000
   xdim      1.0000     0.0000    0.0000  1.000
   ydim      0.0000     1.0000    0.0000  1.000
   zdim      0.0000     0.0000    1.0000  1.000
   domain end

   This encoding allows you to use all of the DISCUS tools to create a
   distribution of domains within the host crystal. An alternative 
   encoding is the use of "pseudo-atoms". These are regular atoms, which are
   interpreted by the domain level as positions of a domain.

   See the ==> 'insert' command for instructions to insert a domain into
   a dummy structure.

   The domain character may be any of "domain_cube", "domain_cylinder",
   "domain_fuzzy", or "domain_sphere". 
   A "domain_cube" is a cube with dimensions given by the xdim, ydim,
   and zdim dimensions. These values are elements of a distortion matrix
   which allows you to rotate and distort the cube.
   A "domain_cylinder" is a cylindrical domain. The initial rotation 
   axis is parallel to the z-axis.
   A "domain_fuzzy" domain has no predefined boundary. DISCUS reads all
   corresponding atoms from the file and deletes all host atoms, that 
   are less than the fuzzy separation away from any of the domain atoms.
   A "domain_sphere" is an initially spherical domain.

   A domain replaces all atoms that exist prior within the crystal. 
   The exception are those atoms with special names that define a
   domain or an object. These atoms are not replaced by a new domain.
   This allows you to replace a structure in part with other domains,
   where these domains remain intact, even if they overlap.


   See the manual for full details.

   The file contains the actual atoms that will be inserted into the 
   host structure. You must make sure that the atoms from this file to
   fill out the space freed by the domain.

   The fuzzy value gives the minimum distance between domain atoms and
   host atoms. Any atom closer than this separation is deleted for the
   host structure.
   If the fuzzy distance is set to zero or a negative value, the check
   is not performed and all old host atoms remain in the structure.

   The "posi" line is understood as the center of the domain atoms,
   the following three lines as the transformation matrix. The actual
   position onto which the domain atom is placed is calculated as:
   (t11  t12  t13 ) (xcoordinate)   (posi(x))
   (t21  t22  t23 ) (ycoordinate) + (posi(y))
   (t31  t32  t33 ) (zcoordinate)   (posi(z))
   
   Each of the matrix elements is calculated as follows:
   t11 = xaxi(x) - posi(x)
   t12 = xaxi(y) - posi(y)
   ..
   t21 = yaxi(x) - posi(x)
   ..
   Thus the transformation matrix is actually encoded by adding the 
   position to all matrix elements. This seemingly complication actually
   allows you to modify the domain by all DISCUS elements like the 
   generalized symmetry operation ==> 'symm'. A rotation for example will
   thus actually leave the matrix nicely intact.

   Likewise the next four lines are used to encode the transformation 
   matrix used to define the domain shape. Again, the actual transformation
   matrix is the difference between the lines "*dim" and the "cent" line.
   By increasing the dimension, you increase the domain size. You can 
   similarly distort the domain shape. 

   The generalized symmetry level ==> "symm" allows you to change the
   position, orientation and shape of the domain and/or the atom transformation
   matrix. 
3  assign
!p assign "character",<pseudoatom name>,{"cube"|"cylinder"|"fuzzy"|"sphere"}
!p assign "content",<pseudoatom name>,<contentfile>
!p assign "fuzzy",<pseudoatom name>,<radius>
!p assign "orient",<pseudoatom name>,<row>,<ti1>,<ti2>,<ti3>,<ti4>
!p assign "shape",<pseudoatom name>,<row>,<ti1>,<ti2>,<ti3>,<ti4> [, <sigma>]

   These commands allow you to assign extended properties to the pseudo
   atoms. Since the pseudo atoms are identical to regular atoms, they can 
   only encode the position and type of a domain. The character, size, and
   orientation of the atoms with respect to the host structure may be 
   assigned via these commands.

!p assign "character",<pseudoatom name>,{"cube"|"cylinder"|"fuzzy"|"sphere"}

   A domain may be any of four different principal shapes. 
   The "cube" domain is a domain consisting of the six {100} faces. 
   The default distance of each face from the center is one respective
   unit cell. 
   A "cylinder" domain has cylindrical geometry with the default cylinder axis
   parallel to the c-axis. The radius is one b-axis length. Top and bottom
   are terminated by the two {001} faces.
   A "sphere" domain initially is spherical with radius one b-axis.

   All host atoms that are within the domain are removed, the void is 
   filled by the atoms from the corresponding <contentfile>. The size and
   shape of these domains may be changed by adjusting the 
   ==> ' assign shape' of the domain. 

   The "fuzzy" domain follows a very different concept. It does not have
   a predefined size or shape. Instead all atoms that are read from the 
   <contentfile> replace host atoms that are close to their position.

!p assign "content",<pseudoatom name>,<contentfile>

   The <contentfile> contains a DISCUS type structure file with all the
   atoms that are to be placed inside the host crystal. You need to make 
   sure that the structure listed in the <contentfile> is large enough
   to fill the empty void created by the respective domain. 
   The space group and unit cell dimensions of the domain structure and 
   the host crystal must be identical.

!p assign "fuzzy",<pseudoatom name>,<radius>

   All host atoms that are closer than this <radius> to any of the 
   domain atoms are removed from the original host structure. This holds 
   for all domain character types.
   If the <radius> is set to zero or any negative number, the check is
   not performed for this domain type. Atoms of this domain type could
   thus be right on top of an atom of the host structure! 

!p assign "orient",<pseudoatom name>,<row_i>,<ti1>,<ti2>,<ti3>,<ti4>

   The orientation provides you a transformation matrix that is applied 
   to each domain atom prior to insertion into the host. 
   To keep the input lines short, each of the three rows <row_i> must
   be given separately.
   Each atom is transformed by:
   (t11  t12  t13 ) (xcoordinate)   (t14)   (posi(x))
   (t21  t22  t23 ) (ycoordinate) + (t24) + (posi(y))
   (t31  t32  t33 ) (zcoordinate)   (t34)   (posi(z))
   The translational part <ti4> is added to the position of the 
   pseudo atom.

!p assign "shape",<pseudoatom name>,<row>,<ti1>,<ti2>,<ti3>,<ti4> [, <sigma>]

   The shape transformation matrix is used to determine the size and shape
   of the domain. Default size at program start are +- one unit cell
   along each axis. Enlarge the domain by increasing the elements <tii>
   of the shape matrix, distort by changing the off-axis elements.
   The shape is distorted by:
   (t11  t12  t13 ) (xaxis)   (t14)   (posi(x))
   (t21  t22  t23 ) (yaxis) + (t24) + (posi(y))
   (t31  t32  t33 ) (zaxis)   (t34)   (posi(z))
   The translational part <ti4> is added to the position of the
   pseudo atom. The shape transformation works independent from the atom
   transformation matrix.
   If the character of the domain is "cube", "cylinder", or "sphere", 
   DISCUS checks whether the position of the domain atom after its 
   transformation fits into the domain shape. If true, it is inserted into
   the guest structure.

   The optional <sigma> allows for a size distribution of the domains.
   The matrix part is multiplied by a factor (1 + gran(sigma)). 
   Discus cuts the factor at 0.01, all large values are allowed.
3  inputfile
!p inputfile <inputfile>

   DISCUS read the domain positions from the file <inputfile>. See the
   ==> 'mode' command on how DISCUS interprets this file.
3  mode
!p mode {"domain" | "pseudoatoms"}

   This command tells DISCUS how to interpret the input file. 
   With the "pseudoatoms" option, DISCUS expects to find a standard
   DISCUS structure file. Each "atom" in the file is interpreted as 
   a domain position. See the ==> 'assign' commands for further details.

   With the "domain" option DISCUS expects to read a file structured 
   like:
   A general header like all DISCUS structure files followed by as many 
   domain descriptors as needed. Each domain descriptor is designed 
   similarly to the molecule and object descriptors:
3  reset
!p reset

   Reset all Fourier definitions back to the default values at 
   system start. 
3  run
!p run

   This starts the actual incorporation of the domains into the host 
   crystal. The positions, characters etc. for each domain are read
   from file <inputfile>. The corresponding domain structure is used to
   replace part of the host structure.
3  set
!p set

   Set various definitions

4  distance
!p set distance, {"external" | "internal" |"all" }, <at_list>, <distance>

   Set the distances at which an atom from the atom list shall be 
   considered to be close to a surface.
4  remove
!p set remove {"strict" | "initial" | "trust" | "none"}

   When DISCUS replaces (parts of) an old structure with the 
   content of domains. it needs to remove the old atoms. You have 
   three choices how this shall be done:

   strict
   Old atoms are removed EVERYTIME an individual domain is inserted
   into the crystal. Old atoms are considered to be all atoms that 
   were in the crystal just before this domain was inserted. This
   includes domains that were inserted by the very same 'run' 
   command. 
   You need to do this, if you suspect or know that domains do
   overlap. You must use this for example to simulate overgrowth of
   domains on top of each other.

   initial
   This time only those atoms are removed that were in the crystal 
   prior to the current 'run' command. The atoms that are inserted
   during the current 'run' command are not tested. They may overlap
   if you are not careful. 

   trust
   OK, you trust that no domains overlap with each other and that you
   know exactly which host atoms have to be removed. The removal is
   performed after all domains have been inserted. DISCUS collects 
   all fuzzy distances from the ==> assign commands and uses the 
   maximum value of any assign command. This is necessary, since at this 
   point the information from which domain type a new atom was taken
   has been lost.
   This removal is MUCH faster than  the previous two.

   none
   The ultimate trust! No host atoms are removed at all. You can do this,
   if you read a crystal that consisted only of dummy atoms and each of 
   these represents a domain. 
   You should remove these dummy atoms after you leave the 'domain'
   menu via a ==> replace dummy, void, all,1.0 command.
   This combination is the fastest but be advised that you really need to
   know where the dummy atoms and the inserted atoms are. Otherwise you
   might end up with lots of strange overlapping atoms.
3  show
!p show

   Shows the current settings.

2  find
!p find "env",{"all"|{<name>|<number>} [, ...]},x,y,z,min_radius,max_radius
!p find "menv",{"all"|{<name>|<number>} [, ...]},x,y,z,min_radius,max_radius

   This command serves to find something. The first parameter defines
   what DISCUS shall find.

!p "env"
   DISCUS finds the environment around a given position. This environment 
   consists of all atoms that are closer than a given radius. 
   Only those atoms are included that fulfill the global property
   selection rules ==> 'property'.

!p "menv"
   DISCUS finds the environment around a given position. It consists
   of all molecules that are closer than the given distance.

   The last two parameters define the minimum and maximum radii of the
   shell within DISCUS will search for neighbors.
   The three parameters immediately prior to the radii define the 
   central position whose environment is to be found.
   The second to last but five parameter(s) define which of the 
   surrounding atoms are to be included in the environment. If the
   second parameter is "all" all atoms are included in the environment,
   else only those atoms specified by <name> or <number> of the 
   scattering curve.

   The number of neighboring atoms is stored in "env[0]", the indices
   are stored in the next <env[0]> elements of "env". The resulting bond
   lengths are stored in the first <env[0]> elements of "res". "res[0]"
   is set to the same value as "env[0]". Thus, for example, it is possible 
   to search selectively for the next oxygen atoms, while ignoring all 
   other atoms.
   The command returns the list of neighbors sorted by distance, 
   shortest first.

   Examples

!p find all,0,0,0, 0.1,3.05

   Finds the environment consisting of all atoms at distances larger
   or equal to 0.1 Angstrom up to 3.05 Angstrom from the origin.

!p find env,o,n, 1.25,-5.25,3.34, 2.0,2.9

   Finds all oxygen and nitrogen atoms that are between 2.0
   and 2.9 Angstrom from position 1.25,-5.25,3.34
2  fourier
!p fourier

   This sub level of DISCUS calculates the Fourier transform of the given 
   crystal structure. The algorithm to speed up the explicit Fourier is 
   based on the program 'diffuse' by B.D. Butler. See also: B.D. Butler & 
   T.R. Welberry, (1992).  J. Appl. Cryst. 25, 391-399.

   The program allows to calculate X-ray and neutron scattering including
   isotropic temperature factors and anomalous scattering. The program
   also allows to subtract the structure factor of the average structure
   from the calculated diffraction pattern. 

   You may calculate a single line through reciprocal space, a layer
   or a three dimensional volume.

   Further help topics are:

3  commands
   Valid commands at this level are:

!p @       ! execute a macro file (see main help level)
!p =       ! assigns the value to a variable (see main help level)
!p abs     ! defines the coordinate of the abscissa
!p delf    ! defines the anomalous scattering corrections for an element
!p disp    ! switches anomalous dispersion on/off
!p calc    ! calculates at a single point in reciprocal space
!p continue! continue a stopped macro (see main help level)
!p echo    ! echo a string (see main help level)
!p electron! switches to electron calculation
!p energy  ! defines the energy of the radiation
!p eval    ! evaluates an expression for interactive check
!p exit    ! terminates Fourier level
!p help    ! help to Fourier commands (see main help level)
!p hkl     ! calculate a list of Bragg reflection intensities
!p layer   ! defines the layer in reciprocal space to be calculated
!p ll      ! defines the lower left corner in reciprocal space
!p lots    ! defines the crystal volume to be used for the Fourier transform
!p lr      ! defines the lower right corner in reciprocal space
!p nabs    ! defines the number of points along the abscissa
!p neut    ! switches to neutron diffraction
!p nord    ! defines the number of points along the ordinate
!p ntop    ! defines the number of points along the top axis
!p ord     ! defines the coordinate of the ordinate
!p reset   ! Reset and clear all definitions
!p run     ! starts the calculation
!p scat    ! defines the scattering factor for an element
!p set     ! sets Fourier mode
!p show    ! shows the current settings for the Fourier transform
!p stop    ! stops execution of a macro (see main help level)
!p system  ! executes operating system command (see main help)
!p temp    ! defines whether temperature coefficients are to be used
!p tl      ! defines the top   left corner in reciprocal space
!p top     ! defines the coordinate of the top axis
!p ul      ! defines the upper left corner in reciprocal space
!p wait    ! waits for user input (see main help level)
!p wvle    ! defines the wave length to be used
!p xray    ! switches to X-ray calculation
3  abs
!p abs <switch>

   Defines which the component of the vector parallel to the abscissa
   is written to the output file.
3  calc
!p calc <h>,<k>,<l>
   Calculates the structure factor at a single point h,k,l.
   The real value is stored in res[1], the imaginary value in res[2].
   The corresponding value normalized to one unit cell are stored in
   res[3] and res[4], respectively. res[0] is set to 4 to indicate 
   that 4 values may be found in res.
3  delf
!p delf { <name> | <number> } , <f'> , <f''>
!p delf { <name> | <number> | "all" } , "internal"

   Defines for the element <name> or the scattering curve number <number>
   the real <f'> and the imaginary <f''> correction terms for the 
   scattering factors. 
   DISCUS calculates the effective atomic form factor as:
                   f + f' + i*f''
   This means that you should enter the value of f' as a negative number
   and f'' as a positive number.

   The correction terms are used only, if the dispersion is set to
   anomalous ==> 'disp'.

!p delf { <name> | <number> | "all" } , "internal"

   The second command form allows you to set the values back to the
   internally tabulated values. Keep in mind that these only work with 
   wavelengths specified by their name as in ==>  wvle moa1'. 
   This command just sets the flag for the element. 
   The values are actually not changed, until the anomalous dispersion 
   is set on ==> 'disp'.
3  disp
!p disp [<switch>]

   Switches anomalous dispersion on /off. If <switch> is "anom" anomalous
   dispersion will be calculated, if the switch is omitted, no anomalous 
   dispersion is calculated.
3  electron
!p electron

   switches to electron calculation
3  energy
!p energy <value>

   Defines the energy of the radiation. 
   For X-rays and electrons the value is to be given in units of keV,
   for neutrons in units of meV.
3  hkl
!p  hkl <infile>, <outputfile>, <scale>, "4"

   This command reads the SHELX HKLF4 file <infile> and calculates
   the intensity using the current structure. The data are written 
   in a SHELX hklf4 type format (3I4,2x, F8.2,F8.2). 
   The calculated intensities are multiplied by <scale>
3  layer
!p layer <e11,e12,e13, e21,e22,e23, e31,e32,e33, inc1,inc2>

   Sets the lower left, lower right and upper left corner of the
   Fourier plane to be calculated and sets the number of data
   points along the horizontal and the vertical.
3  ll
!p ll <e11> , <e12> , <e13>

   Sets the lower left corner of the Fourier plane to be calculated.
3  lots
!p lots "off"
!p lots {"box" | "ellipsoid"},<lx>,<ly>,<lz>,<n>,{"yes" | "no"}
!p lots {"box" | "ellipsoid"},<lx>,<ly>,<lz>,"all",{"yes" | "no"}

   The program allows to Fourier transform large crystals by averaging
   the scattering from smaller volumes selected at random. This allows
   to avoid very long correlations which might occur if the complete
   crystal scatters in phase. 

   If this option is not wanted and the complete crystal should be 
   transformed at once, this option can be turned off by the 
   command 'lots off'. Otherwise the following parameters must be
   specified: First the lot shape. The choices are "box" or 
   "ellipsoid". Usually the first letter of the parameter is sufficient.
   The following parameters <lx>,<ly> and <lz> describe the size of
   the sub-volumes in unit cells. 
   The parameter <n> specifies the number of such volumes to be averaged. 
   If the number is chosen with the keyword "all", DISCUS will place
   the origin of the lots onto each unit cell and the number of the lots
   corresponds to the total number of unit cells in the crystal.
   The last parameter can be "yes" or "no" and selects if periodic
   boundary conditions should be applied.

   The lot size should be slightly larger than the longest correlations
   present in the model crystal studied. The number of lots to be
   averaged should be set to a value that complete crystal will be
   covered once on average. 

!p WARNING:
   If the command 'purge' is performed or a structure is read where the 
   atoms are not listed in the DISCUS order this command should be set
   to 'lots off'.
3  lr
!p lr <e21> , <e22> , <e23>

   Sets the lower right corner of the Fourier plane to be calculated.
3  nabs
!p nabs <inc1>

   Sets the number of data points that will be calculated along the
   abscissa.
3  neut
!p neut

   Switches to neutron diffraction
3  nord
!p nord <inc2>

   Sets the number of data points that will be calculated along the
   ordinate.
3  ntop
!p ntop <inc2>

   Sets the number of data points that will be calculated along the
   top axis.
3  ord
!p ord <switch>

   Defines which the component of the vector parallel to the ordinate
   is written to the output file.
3  reset
!p reset

   Reset all Fourier definitions back to the default values at 
   system start. 
3  run
!p run [ sigabs:[<sigma>, <h>, <k>, <l>]] [, sigord:[<sigma>, <h>, <k>, <l>]]
!p     [,sigtop:[<sigma>, <h>, <k>, <l>]]

   Starts the Fourier calculation. 

   The optional parameters enable you to apply a convolution with a 
   triaxial Gaussian resolution function. 
   The sigma's are in units of reciprocal Angstrom, keep in mind that
   DISCUS uses the definition a* = 1/a instead of a* = 2pi/a.

   The sigma and the directions for the three half axes of the 
   ellipsoid are independent. The directions <h>, <k>, <l> can be 
   omitted. In this case the directions default to the abscissa, 
   ordinate and top axis of the Fourier calculation.
3  scat
!p scat { <name> | <number> },<a1>,<b1>,<a2>,<b2>,<a3>,<b3>,<a4>,<b4>,<c>
!p scat { <name> | <number> | "all" }, <name>
!p scat { <name> | <number> | "all" }, "internal"

   The first command form defines for the element <name> or the scattering 
   curve number <number> a new scattering factor in the exponential form.
   The scattering factor is calculated as:
   f(h) = a(i) * e**(b(i)/4*h**2) + c(i)
   For neutron scattering lengths, set a(i) and b(i) to zero.

!p scat { <name> | <number> | "all" }, <name>

   The second form of the command allows you to set the scattering factor
   of two elements to identical values. This comes in handy when you would
   like to use elements like O1, O2 etc for different oxygen species, or 
   for dummy atom names like xxxx. The command 
   scat O1,O  
   would set the scattering factor of O1 to those values of oxygen. The 
   second parameter must be a valid atom name. See the entry "atom names"
   for a list of valid names.

!p scat { <name> | <number> | "all" }, "internal"

   The third form finally allows you to set the scattering factor back
   to the internally tabulated values.
3  set
!p set "aver" [, <per>]
!p set {"external"|"internal"}
!p     {"mode:single" | "mode:init" | "mode:accumulate" | "mode:finish"}
!p     "symm:apply"

!p set "aver" [, <per>]

   The Fourier level of DISCUS allows to subtract the average structure
   factor <F> by setting the parameter <per> to a value not equals zero. 
   The value of <per> sets the percentage of the crystal to be used to 
   calculate <F>. 

   The average is calculated by putting <per> % of the crystals atoms 
   into a single unit cell which is Fourier transformed and multiplied 
   with the interference function of the lot shape.

!p WARNING:
   If the command 'purge' is performed or a structure is read where the 
   atoms are not listed in the DISCUS order the average structure will
   not be calculated correctly !

!p     {"mode:single" | "mode:init" | "mode:accumulate" | "mode:finish"}

   As default mode, DISCUS will calculate a single Fourier transform 
   that can be written to an output file. 
   As an alternative to the ==> 'lots' command, you can also perform a
   simulation and calculate a diffraction pattern and then accumulate
   several such calculations into the final pattern.
   Prior to such a loop, use within the fourier menu the command
   set mode:init
   During the loop use 'set mode:accumulate'
   After the loop go back to fourier and use:
   set mode:finish
   before you use the ==> 'output' menu to write the data.

!p For a small to moderate crystal, the actual realization of the disorder
   might not match the crystals symmetry very well. you can improve the
   situation by applying the point group symmetry to the diffraction 
   pattern with:
   set symm:apply
   This optional parameter can be combined with the 'mode:finish' parameter
   and will apply both to a single as well as to an accumulated pattern.

!p set "symm:apply"

   
!p set {"external"|"internal"}

   Usually DISCUS will assume that all atoms in the crystal represent
   real atoms. In this case the internally tabulated atomic form factors
   are used to calculate the Fourier transformation. You can explicitly
   set this mode by typing "set internal".
   As of version 3.4.2 DISCUS can handle extended objects such as 
   cubes, cylinders, and spheres. Their Fourier transform is calculated
   using the appropriate analytical expression. In order to activate
   this state, you must set the Fourier to "external".
3  show
!p show
!p show "scat", {<name> | <number> } [, {<name> | <number> }...]

   Shows the current settings for the Fourier transform file

   The second form shows the scattering curve of the selected atom types,
   which may be given as the scattering number of as the element name.

   The values for the scattering curve are stored into the res[] 
   variable in the order:
   a1, a2, a3, a4,  b1, b2, b3, b4, c
3  temp
!p temp <switch>

   Sets whether temperature coefficients are to be used or not.
   Valid values for <switch> are "use" and "ignore". The first
   two letters of the switch are sufficient.
3  tl
!p tl <e41> , <e42> , <e43>

   Sets the top   left corner of the Fourier volume to be calculated.
3  top
!p top <switch>

   Defines which the component of the vector parallel to the top axis
   is written to the output file.
3  ul
!p ul <e31> , <e32> , <e33>

   Sets the upper left corner of the Fourier plane to be calculated.
3  wvle
!p wvle { <name> | <value> }

   Defines the wave length to be used. Anomalous dispersion will only
   be calculated if the wave length is given as symbol.
3  xray
!p xray  [table:{"waass" | "inter"}

   Switches to X-ray calculation

   The parameterized values according to Waasmaier & Kirfel,
   ACA (1995) A51, 416-431 were added and are used as default values.
   Optional parameters table:waas or table:inter allow to 
   choose the Waasmaier or the International Tables Volume C.
2  functions

   The following DISCUS specific functions exist. For a listing
   of general intrinsic functions see help entry 'functions' in
   the 'Command language' section of the online help.

!p bang(u1,u2,u3,v1,v2,v3[,w1,w2,w3])
!p                                 ! Returns the bond angle at the site v
!p                                   If only vectors u and v are given, the
!p                                   angle between u and v is returned.
!p bang(atom,i1,i2[,i3])           ! Returns the bond angle at atom i2.
!p                                   If only atoms i1 and i2 are given, the
!p                                   angle at the origin between the vectors
!p                                   to atoms i1 and i2 is calculated.
!p bang(envi,i1,i2)                ! Returns the bond angle in the center of
!p                                   the last find env command. The angle 
!p                                   between the vectors from the center to
!p                                   entries i1 and i2 in the environment is
!p                                   calculated.
!p blen(u1,u2,u3[,v1,v2,v3])       ! Returns the length of vector v-u.
!p                                   Vector v defaults to zero.
!p blen(atom,i1,i2)                ! Returns the length of the vector
!p                                   between atoms i1 and i2
!p blen(envi,i1)                   ! Returns the distance from the center of
!p                                   the last environment to atom i1 in the 
!p                                   environment
!p dstar(h1,h2,h2[,k1,k2,k3])      ! Returns the length of reciprocal
!p                                   vector k-h. Vector k defaults to zero.
!p mol_test(i1)                    ! Returns the molecule number that contains
!p                                    atom number <i1>. If the atom is not part
!p                                   of any molecule zero is returned. The
!p                                   result is stored as res[1] as well. 
!p                                   res[2] receives the position of the atom 
!p                                   within the molecule.
!p rang(h1,h2,h3,k1,k2,k3[,l1,l2,l3])
!p                                 ! Returns the angle between vectors
!p                                   k-h and k-l at reciprocal site k.
!p                                   If l is omitted, the angle between the
!p                                   reciprocal vectors h and k is returned.
!p scalpro(u1,u2,u3,v1,v2,v3 [,{"dd"|"rr"|"dr"|"rd"}])
!p                                 ! Returns the scalar product between
!p                                   the two vectors u and v. 
!p                                   Both vectors may be given in direct
!p                                   or real space coordinates, flagged 
!p                                   in parameter no 7. "d" means real space,
!p                                   "r" reciprocal space.
!p gran(val,typ)                   ! Returns Gaussian distributed pseudo
!p                                   random number with mean zero and a width
!p                                   given by parameter <val>. If <typ> is
!p                                   "s" <val> is taken as sigma, if <typ>
!p                                   is "f", <val> is taken as FWHM.
!p gbox(r1,r2,r3)                  ! Returns pseudo random number with
!p                                   distribution given by a box centered
!p                                   at 0 with a width of <r2> and two half
!p                                   Gaussian distributions with individual
!p                                   sigmas of <r1> and <r3> to the left and
!p                                   right, respectively.

   The arguments to any of these functions are any arithmetic expression.

!p isprop(i1, propstring)
!p isprop(i1, and:propstring [,or:propstring])
!p                                 ! Returns a logical true if the properties
!p                                   encoded in <propstring> are true for 
!p                                   atom number <i1>.
!p                                   Valid forms for the property string are
!p                                   individual names of the properties as:
!p                                   'normal', 'molecule', 'domain',  
!p                                   'outside', 'external', 'inside', 
!p                                   'ligand'.
!p                                   The function will thus be used to query
!p                                   exactly one property. 
!p                                   Alternatively the propstring can take 
!p                                   the form 'NMDOEIL' or 'nmdoeil'
!p                                   The number of letters and their sequence
!p                                   is up to the user.
!p                                   With a property string in capital 
!p                                   letters as "and:'NMDOEIL'" the function 
!p                                   is true if all properties that are 
!p                                   listed are true for atom <i1>. 
!p                                   With a property string in small 
!p                                   letters as "and:'nmdoeil'" the function 
!p                                   is true if all properties that are 
!p                                   listed are false for atom <i1>. 
!p                                   Capital and small letters can be 
!p                                   mixed at will. 
!p                                   With a leading "or:" the function is 
!p                                   true if any of the properties in
!p                                   capital letters is present and any
!p                                   of the properties in small letters is
!p                                   absent. 
!p                                   Both, the "and:" and "or:" arguments
!p                                   may be used simultaneously to form
!p                                   complex queries. 
!p                                   
2  import
!p import "cif",<file[".cif"]>
!p import "cmaker",<file[".xyz"]>
!p import "lammps",<file>
!p import "shelx",<file[".ins"]>
!p import "rmcprofile",<file[".cssr"]>
!p           [, "sort:discus" ]
!p import "cell",<file>
!p        [, "metric:host" [,"space:host"] ]
!p
!p import "stru",<file> , "metric:host" [,"space:host"] 

   This command converts other crystal structure formats into a DISCUS 
   unit cell.

   The file name may be presented with format specifications as in
   "gold%3D.cif", 3  for a file name 'gold003.cif'

   The optional parameter "metric:host" instructs DISCUS to perform a
   unit cell transformation of the input structure into the metric of the 
   crystal structure that is currently present within DISCUS. As the 
   two coordinates system will usually differ considerably, the space
   group of the imported structure is set to P1 unless the optional
   parameter space:host is used which changes the space group to that 
   of the present structure, the host.

   In order to transform a DISCUS file format the "metric:host" 
   parameter becomes mandatory.
3  cif
!p "cif", <file{".cif"]>

   Imports a CIF file into the corresponding discus "stru" file.

   Multiple "data_" entries are written to separate files. 
   Entries 2 etc have the corresponding number appended to the 
   file name.
3  cmaker
!p "cmaker", <file{".xyz"]>

   Imports a CrystalMaker file into the corresponding discus "stru" file.
3  lammps
!p import "lammps",<file>

   Imports a LAMMPS output file. 
   At the present, a simple dump output file is imported.

   DISCUS will read the input file and create a file <file>".stru" in
   the DISCUS cell format.
3  shelx
!p "shelx",<file{".ins"]>

   If the first parameter is "shelx" the input file is assumed to be a
   SHELX "*.ins" or "*.res" file. The extension ".ins" may be omitted.
   DISCUS will read the input file and create a file <file>".cell" in
   the DISCUS cell format.
   The space group is always set to P1, since SHELX defines the individual
   symmetry operations. 
   The lattice is written into the DISCUS file as a generator.
   The SHELX symmetry operations are written as individual generator operations
   into the DISCUS file.
   The atom names are taken from the SHELX "SFAC" instruction and used for
   the individual atoms.
   Atom coordinates are properly interpreted including the use of SHELX free
   variables.

   LIMITATIONS
   The "DISP" instruction is ignored.
   Explicit form factors on the "SCAT" instruction are ignored
   ALL instructions following the "FVAR" instruction up to the "HKLF" 
   instructions are interpreted as atoms, unless they are valid SHELX 
   commands.
   The site occupation factors are ignored.
   The anisotropic atomic displacement parameters are crudely replaced
   by a very approximate isotropic U.
   Currently DISCUS does not recognize the internal symmetry of a molecule.
3  rmcprofile

   DISCUS will read a RMCProfile *.cssr  or "rmcf6" file and write a corresponding
   structure file.
   If the optional parameter "sort:discus" is present, DISCUS will attempt to
   sort the structure in the DISCUS style, breaking it down into the individual
   unit cells.
2  index2cell
!p index2cell <atomindex> or
!p index2cell <x>,<y>,<z>,<site>
!p            ",output:screen" | ",output:none"
!p            ",boundary:periodic" | ",boundary:crystal"

   This command allows to switch between a given index of the
   storage array <atomindex> and the corresponding unit cell <x>,<y>,<z>
   and site <site>. The parameter not given is calculated ...

   The optional parameter "boundary:periodic" will apply periodic boundary
   conditions to the unit cell indices <x>, <y>, <z>

   The optional parameter "output:none" will suppress the screen output.

   index2cell stores the results in the "res[]" variable:
   res[1] : <atomindex>
   res[2] : <x>
   res[3] : <y>
   res[4] : <z>
   res[5] : <site>

   The command is identical to the ==> 'trans' command in the
   chemistry menu.
2  ins
!p ins <name>, <x>,<y>,<z> [,t>]

   Inserts an atom of type <name> at the position <x,y,z>
   in crystal space. Optionally the temperature coefficient may be
   given.

   This command will automatically turn off the periodic boundary
   conditions.
2  insert
!p insert {"domain"|"object"|"molecule"}

   Opens the menu to insert objects or molecules.

   Objects are special molecules, that represent extended objects.
   DISCUS treats these objects as uniformly and continuously filled 
   matter. Depending on the shape of the object, specialized 
   Fourier transformations are calculated.
   Objects consist of four pseudo atoms with special names, that
   characterize the location, shape and orientation of the object.

   Domain are special molecules as well, which are used to represent 
   a guest structure within a host.

   Further help topics are:

3  commands
!p adp        ! Defines the atomic displacement parameter of an object
!p character  ! Defines the object/domain character = cube, cylinder, sphere
!p cent       ! Defines the center of atoms within a domain
!p density    ! Defines the scattering density of the object
!p file       ! Defines the file name with the actual domain content
!p fuzzy      ! Defines the distance between domain atoms and host atoms
!p origin     ! Places the origin of the object/domain in real space coordinates
!p reset   ! Reset and clear all definitions
!p run        ! Does the actual insertion
!p show       ! Show the current parameters
!p type       ! Defines the object type number
!p xaxis      ! Gives a deformation/scaling of the X-axis
!p yaxis      ! Gives a deformation/scaling of the Y-axis
!p zaxis      ! Gives a deformation/scaling of the Z-axis
!p xdim       ! Gives a deformation/scaling of the domain shape
!p ydim       ! Gives a deformation/scaling of the domain shape
!p zdim       ! Gives a deformation/scaling of the domain shape

3  adp
!p adp <value>
3  character
!p character {"cube"|"cylinder"|"sphere"}[,<atom name>]

   Defines the character of the object, which may be one of 
   {"cube"|"cylinder"|"sphere"}. Depending on the character, 
   different formulae are used to calculate the Fourier transformation.

   A "cube" object is defined by the six {100} faces and thus extends 
   along each axis from -1. to +1. Its volume is thus eight times 
   the volume of the unit cell. For a non-cubic unit cell, the 
   faces are inclined accordingly. 

   A "cylinder" object has it's cylinder axis along the [001] axis and
   extends from -1 to +1. The cross section in the x,y plane has a
   radius of 1. Thus it's volume is 2*pi*2 times the unit cell volume.
   For non cubic unit cells, the cylinder will be ellipsoidal and
   possibly oblique. The top and bottom limiting ellipsoids are 
   parallel to the two {001} faces.

   A "sphere" object has a radius of 1. and a volume of 4pi/3 times
   the unit cell. For non cubic unit cells, a general triaxial 
   ellipsoid results.

   The second, optional, parameter sets the atom type for the object.
   DISCUS will now assume that the object consists of atoms of this
   type, or at least that most of the atoms correspond to this type.
3  cent
3  density
!p density <value>

   Defines the scattering density of the object type. The scattering
   factor calculated for objects of this type is multiplied by this
   density. This allows to simulated objects of identical volume yet 
   different scattering density like bubbles of a denser material
   versus bubbles of empty space.
3  file
3  fuzzy
3  origin
!p origin <x>,<y>,<z>

   The center of the object is placed at the vector <x>,<y>,<z>.
   DISCUS describes this position by the coordinates of the first
   of the atoms. It's name represents the 'character' of the object
3  reset
!p reset

   Reset all insert definitions back to the default values at 
   system start. 
3  run

   Performs the actual insertion.
3  show

   Shows the current settings
3  type
!p type {<number>|"new"}

   Each object/molecule is assigned a type number and you may use this
   to perform the same operation on objects/molecules of identical 
   type (like ==> symmetry, shear, plot).

   If <number> is given as a positive integer, the object/molecule will
   receive this number, which must correspond to an existing type.

   If "new" is given, the object/molecule will receive the next higher
   unused type number.
3  xaxis 
!p xaxis  <x>,<y>,<z>

   Defines in crystal space the scaling /and/or deformation of the
   x-axis. A set of values like 2,0,0 would mean a doubling of the
   objects x-axis. 

   DISCUS does not perform a check, whether the values that you 
   entered correspond to any special deformation tensor. The 
   ==> 'shear' menu provides elegant ways to deform an object.
3  yaxis 
!p yaxis  <x>,<y>,<z>

   Defines in crystal space the scaling /and/or deformation of the
   y-axis. A set of values like 2,0,0 would mean a doubling of the
   objects x-axis. 

   DISCUS does not perform a check, whether the values that you 
   entered correspond to any special deformation tensor. The 
   ==> 'shear' menu provides elegant ways to deform an object.
3  zaxis 
!p zaxis  <x>,<y>,<z>

   Defines in crystal space the scaling /and/or deformation of the
   z-axis. A set of values like 2,0,0 would mean a doubling of the
   objects x-axis. 

   DISCUS does not perform a check, whether the values that you 
   entered correspond to any special deformation tensor. The 
   ==> 'shear' menu provides elegant ways to deform an object.
2  internal
!p Internal storage of the structure

   When reading a new cell, the program stores the content of each
   unit cell consecutively. The program always generates a block of
   nx * ny * nz unit cells. The innermost -fastest- loop is nx, the
   slowest nz.
2  inverse
!p inverse

   Branches to the inverse Fourier transform level of DISCUS
   The inverse Fourier transform is calculated from two input files.
   The two files must contain the intensity, real or imaginary part
   amplitude or phase in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       phase
!p amplitude       phase
!p real            imaginary

   The user must specify the Fourier plane that had been calculated
   and the real space plane to be calculated.

   Further help topics are:

3  commands
   Valid commands at this level are:

!p @       ! execute a macro file (see main help level)
!p =       ! assigns the value to a variable (see main help level)
!p abs     ! defines the coordinate of the abscissa
!p continue! Continue a stopped macro (see main help level)
!p echo    ! echo a string (see main help level)
!p eval    ! Evaluates an expression (see main help level)
!p exit    ! terminates Fourier level
!p file    ! defines the input file name(s)
!p form    ! defines the input file format
!p help    ! help to Fourier commands (see main help level)
!p layer   ! defines the layer in reciprocal space to be calculated
!p ll      ! defines the lower left corner in reciprocal space
!p lr      ! defines the lower right corner in reciprocal space
!p na      ! defines the number of points along the abscissa
!p no      ! defines the number of points along the ordinate
!p ord     ! defines the coordinate of the ordinate
!p reset   ! Reset all Fourier definitions
!p reset   ! Reset all Fourier definitions
!p rhoabs  ! defines the coordinate of the real space abscissa
!p rholayer! defines the layer in real space to be calculated
!p rholl   ! defines the lower left corner in real space
!p rholr   ! defines the lower right corner in real space
!p rhona   ! defines the number of points along the real space abscissa
!p rhono   ! defines the number of points along the real space ordinate
!p rhoord  ! defines the coordinate of the real space ordinate
!p rhoul   ! defines the upper left corner in real space
!p reset   ! Reset and clear all definitions
!p run     ! starts the calculation
!p scale   ! defines an overall scale factor
!p set     ! sets various parameters
!p show    ! shows the current settings for the inverse Fourier transform
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p ul      ! defines the upper left corner in reciprocal space
!p wait    ! Waits for user input (see main help level)

3  abs
!p abs <switch>

   Defines which the component of the vector parallel to the abscissa
   is written to the output file.
3  file
!p file {"a"|"b"},<filename>

   Defines the filenames needed for the inverse Fourier.

   The inverse Fourier transform is calculated from two input files.
   The two files must contain the intensity, real or imaginary part
   amplitude or phase in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       
!p amplitude       
!p real            imaginary

   If the input format is 'shelxl' then one input file is sufficient.
   DISCUS assumes the input file to be a SHELXL List type 5 containing
   <h> <k> <l> <Fobs> <Fcalc> <phase angle in degree>
   The file is read as free format.
3  format
!p form {"gnu" | "stan" | "shelxl"}

   Defines the input format that will be used. 
   Valid parameters are:

!p "gnu" 
   Sets the type of the output file to gnuplot. The intensities are
   written in blocks of intensities along the abscissa, with an empty
   line separating each block. Each line of each block contains:
   index along abscissa, index along ordinate, intensity, third index.

!p "stan" 
   Sets the output to standard file format, which is used by KUPL. 
   The output file contains two initial lines and then a block for each 
   data line separated by an empty line. The first line contains the 
   number of data points along the abscissa and the ordinate, the 
   second line the minimum and maximum value of the indices in reciprocal
   space along the abscissa and ordinate respectively.

!p "shelxl" [, {"fobs" | "fcalc"}]
   Sets the input file format to SHELXL. DISCUS assumes the input file
   to be a SHLEXL List type 5 containing
   <h> <k> l> <Fobs> <Fcalc> <phase angle in degree>
   The file is read as free format. All reflections are expanded by the
   appropriate symmetry operations, including proper phase transformation.

   If the optional parameter is "fobs", the observed structure factor is
   used for the calculation, if the parameter is "fcalc", the calculated
   structure factor is used.

3  layer
!p layer <e11,e12,e13, e21,e22,e23, e31,e32,e33, inc1,inc2>

   Sets the lower left, lower right and upper left corner of the
   Fourier plane to be calculated and sets the number of data
   points along the horizontal and the vertical
3  ll
!p ll <e11> , <e12> , <e13>

   Sets the lower left corner of the Fourier plane to be calculated.
3  lr
!p lr <e21> , <e22> , <e23>

   Sets the lower right corner of the Fourier plane to be calculated.
3  na
!p na <inc1>

   Sets the number of data points that will be calculated along the
   abscissa.
3  no
!p no <inc2>

   Sets the number of data points that will be calculated along the
   ordinate.
3  ord
!p ord <switch>

   Defines which the component of the vector parallel to the ordinate
   is written to the output file.
3  rhoabs
!p rhoabs <switch>

   Defines which the component of the vector parallel to the 
   real space abscissa is written to the output file.
3  rholayer
!p rholayer <e11,e12,e13, e21,e22,e23, e31,e32,e33, inc1,inc2>

   Sets the lower left, lower right and upper left corner of the
   real space plane to be calculated and sets the number of data
   points along the horizontal and the vertical
3  rholl
!p rholl <e11> , <e12> , <e13>

   Sets the lower left corner of the real space plane to be calculated.
3  rholr
!p rholr <e21> , <e22> , <e23>

   Sets the lower right corner of the real space plane to be calculated.
3  rhona
!p rhona <inc1>

   Sets the number of data points that will be calculated along the
   real space abscissa.
3  rhono
!p rhono <inc2>

   Sets the number of data points that will be calculated along the
   real space ordinate.
3  rhoord
!p rhoord <switch>

   Defines which the component of the vector parallel to the
   real space ordinate is written to the output file.
3  rhoul
!p rhoul <e31> , <e32> , <e33>

   Sets the upper left corner of the real space plane to be calculated.
3  reset
!p reset

   Reset all Fourier definitions back to the default values at 
   system start. 
3  run
!p run

   Starts the inverse Fourier calculation.
3  scale
!p scale <scale-factor>

   Defines an overall scale factor. Together with the automatic scaling
   by 1/vol(unit cell), this scale factor serves to put the electron
   density on an absolute scale of electrons per cubic Angstrom. The
   scale factor should effectively multiply the observed F(000) such that
   it is equal to F(000) calculated for one unit cell of the average
   structure.
   
   Every time you enter "inverse" the scale factor is calculated to be
   number of atoms in crystal / number of atoms in one unit cell. If you
   use experimental data, you MUST specify the scale factor every time you 
   enter the "inverse" sub menu.
3  set
!p set "accu",{"init"|"add"}
!p set "excl",{none"|<value>}
!p set "rsym",{appl"|"igno"}

   Set defines various parameters.

4  set "accu",{"init"|"add"}

   Sets the mode for the accumulation of inverse Fourier transforms.

!p "init"  
   The electron density array is initialized, i.e. set to zero.

!p "add"   
   The next inverse Fourier transform is added to the previous value.
   This way several inverse Fourier transforms will contribute to a single
   layer in direct space, which is necessary to create a inverse Fourier
   section rather than a projection onto the layer. See the manual for 
   further details.

   If you use DISCUS to calculate the input data for the inverse Fourier,
   you MUST separate the loop that calculates the Fourier from the loop
   that calculates the inverse Fourier!!! Both parts of the program use
   the same variable to store the results and by mixing the loops, the
   result will be unpredictable nonsense !

4  "excl",{"none"|<value>}

   Signals whether certain data points should be ignored.

!p "none"
   All data points are treated as normal data points, regardless of their
   value.
   This is the default at program start.

!p <value>
   Data points that are equal to <value> are excluded from the inverse Fourier
   transform. You can use this option to mask out regions of the input
   data by setting their values to <value>.
   In the companion program KUPLOT, data points of value equal to -9999. are
   treated as excluded regions.

4  set "rsym",{"appl"|"igno"}

   Determines whether the space group symmetry is applied to all reflections.
   If the second parameter is "appl", all symmetry elements are applied to
   all reflections and the phases are transformed accordingly. This allows
   you to read a set of unique reflections and calculate the inverse Fourier.
3  show
!p show

   Shows the current settings for the Fourier transform file
3  type
!p type {"a"|"b"},
!p      {"intensity"|"amplitude"|"real"|"imaginary"|"phase"|"fobs"|"fcalc"}

   Defines the content of file "a" or "b".

   The inverse Fourier transform is calculated from two input files.
   The two files must contain the intensity, real or imaginary part
   amplitude or phase in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       phase
!p amplitude       phase
!p real            imaginary

   If the input format is "shelxl", DISCUS reads just one file. You can
   calculate the inverse Fourier from Fobs or Fcalc data by choosing the
   appropriate file type from one of the following choices:

!p file a          file b
!p -------------------------
!p amplitude
!p fobs
!p fcalc

3  ul
!p ul <e31> , <e32> , <e33>

   Sets the upper left corner of the Fourier plane to be calculated.
2  kick
!p kick <name>, <x>,<y>,<z> ,<t>, <na>,<ne>, <delx> [,<dely> [,<delz>]]
!p kick <name>, <x>,<y>,<z> ,<t>, <na>,<ne>, -<bondlength>

   Inserts an atom of type <name> at the position <x,y,z>
   in crystal space. The temperature coefficient must be given.
   'kick' checks the position <x>,<y>,<z> with respect to all atoms 
   numbered <na> to <ne>. All atoms that are within the block <x> +- <delx>;
   <y> +- <dely>; <z> +- <delz> are removed from the structure.

   If <dely> and/or <delz> are not given, then they default to the value
   of the last <del.> given on this 'kick' command.

   Note that the <del.> are in fractional coordinates, NOT in Angstrom.

   In the alternative form, the eight's parameter is interpreted as 
   a bond distance. To distinguish the two forms, the <bondlength> must
   be less than zero. The new atom is inserted and all atoms within
   <bondlength> Angstrom from the position <x>,<y>,<z> are removed.

   The parameters <na> and <ne> must be in the range 1 to current 
   number of atoms in the crystal i.e. the value of variable "n[1]",
   and <na> must be less or equal to <ne>.
   The one exception is <na> = n[1]+1 and <ne> = n[1]. This allows you
   to start building e.g. a new layer within which you would like to
   optionally insert atoms without affecting the previous layer.
   Example
   i[0] = n[1]+1
   do i[1]=1,10
     insert  Al,ran(0),ran(0),0.5, 1.0, i[0],n[1], -2.4
   enddo
   This loop inserts up to 10 Al atoms in the x,y range 0 to 1 at
   z=0.5 with a minimum distance of 2.4 Angstrom. Since i[0], the 
   value for <na> is initially at n[1]+1, all previously inserted
   atoms are not affected. Since i[0] remains fixed within the loop,
   each new "Al" atom affects all "Al" atoms previously inserted within
   this loop.
2  mc
!p mc

   NOTICE:
   The "mc" level has been depreciated and is no longer supported.
   Please move to the "mmc" level, which has the same functionality
   plus lots of extra possibilities.

   The "mc" level has been removed in this version of the program.


   Enter "Monte Carlo" section of DISCUS. This sub level allows to create
   disordered structures with given correlations and/or displacements
   using MC simulations. See help entry 'commands' for a complete list
   of commands available in this sub level. 

   NOTE: The MC and CHEM sub level share some variables which define
         neighbors etc. and settings made in this sub level might be
         altered when using the other sub level. It is always save to
         repeat settings when entering this sub level if both levels
         are used. 
 
3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help)
!p =       ! Algebra (see main help)
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echos a string, just for interactive check
!p eval    ! Evaluates an expression (see main help)
!p exit    ! Terminates the MC sub level, returns to the main DISCUS level.
!p help    ! Gives on-line help for 'mc' (see main help)
!p reset   ! Reset and clear all definitions
!p run     ! Starts MC simulation
!p save    ! Saves structure (see main help -> save)
!p set     ! Sets most MC parameters
!p show    ! Shows current settings
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
3  run
!p run

   This command starts the MC simulation for the given parameters and
   number of MC moves.
3  set
!p set <subcommand>

   This command allows to define the wanted correlations and most other
   parameters for the MC simulation. The help entry 'commands' contains
   a list of valid subcommands for the 'set' command. Further help can
   be found for the following subcommands:

4  commands
!p angle   : Definition of interaction angles
!p atom    : Setting of atom types for MC simulation
!p const   : Setting of interaction constants
!p cyc     : Setting of maximum number of MC moves
!p energy  : Setting of MC mode (energy calculation)
!p feed    : Setting of display/feedback interval
!p mode    : Setting of MC mode (crystal modification)
!p mole    : Setting molecule types for MC simulation
!p move    : Setting size of generated SHIFT moves
!p neig    : Setting of the neighbor definitions
!p target  : Setting of correlations values to be achieved
!p temp    : Setting of MC simulation temperature
!p vec     : Definition of interaction vectors
4  angle
!p set "ang",<iv>,<is1>,<is2>,<dx1>,<dy1>,<dz1>,<is3>,<dx2>,<dy2>,<dz2>

   This command is used to define correlation angles that might be used
   to calculate correlations within the crystal (-> 'set corr'). The
   complete description is given in the CHEM section of the online
   help (-> set vec).
4  atom
!p set "atom",{ <name> | <number> }, { <name> | <number> }
!p          [,{ <name> | <number> }]

   This command allows the user to select the atoms types used for
   the MC simulation. They can either be specified by <name> (e.g. Zr)
   or <number>. Not that different MC energy definitions have different
   restrictions on the selection of the atoms. 
   The angular distortions need three angles, while the other ones
   need just two.
4  const
!p set "const",<ic>,<const> [,<fac>]

   The introduction of certain correlations depend on a given set of
   near neighbor interactions. These values are initially unknown and
   are adjusted using a feedback method (-> set feed). This command
   allows the user to set initial interaction parameters <const> for
   the corresponding interaction/correlation <ic>. The optional last
   parameter <fac> is a factor used in the feedback process and controls
   how 'fast' the interactions are changed in each feedback cycle.
4  cyc
!p set "cyc",<number>

   This command sets the number of MC moves (i.e. visited sites) to
   be executed by the 'run' command. The number <number> actually
   defines the number of 'tried' MC moves. Note that we refer to a
   MC cycle as the number of moves needed to visit every crystal site
   once on average.
4  energy
!p set "energy",{"angle" | "cocc" | "cdis" | "disp"}

   This command selects the type of MC energy to be used for the
   simulation. The MC sub level of DISCUS currently allows to 
   introduce occupational correlations ("cocc"), displacement 
   correlations ("cdis"), distortions ("disp") and angles ("angle").
   The energy for the correlation modes is based on an Ising model
   whereas the distortions are expressed using Hookes law. The 
   angular distortions are expressed as the square of the deviation
   from the target value.
4  feed
!p set "feed",<number>

   The interaction values for the given correlation structure are
   determined by a feedback process. This command sets the number
   of moves between each feedback run. This value is also used for
   the interval of screen outputs. Note that the energy mode "disp"
   does not use the feedback mechanism and the value <number> given
   here only determines the output interval.
4  mode
!p set "mode",{ "shi[ft]" | "swc[hem]" | "swd[isp]" | "ext[ernal]" },
!p           [{ "a[ll]"   | "l[ocal]"  | "sl[ocal]" | "si[te]"     }]

   This command determines the type of MC move used for modifying
   the crystal. The settings are explained in the RMC section under
   -> set mode.
4  neig
!p set "neig","add"
!p set "neig","ang",<iv1> [,<iv2>,..]
!p set "neig","dis",<u>,<v>,<w>,<fsig> [, <wsig>] [, {"sym" | "nosym"}]
!p set "neig","dir",<x1>,<y1>,<z1> [,<x2>,<y2>,<z2>]
!p set "neig","rese"
!p set "neig","vec",<iv1> [,<iv2>,..]

   This command is used to define the neighbors used to determine the
   correlations. The subcommand 'dis' uses the distance as a criterion
   whereas 'vec' uses defined interaction vectors (-> set vec). The
   subcommand 'ang' uses an angle at a site, defined by (-> set ang). The
   subcommands 'add' and 'rese' allow the storage and reset of the 
   list of definitions. The details of these commands are given in the
   online help for the same command 'set neig' in the CHEM sub level.
4  mole
!p set "mole",<typ1>,<typ2>

   This command allows the user to select the molecule types used for
   the MC simulation. Not that different MC energy definitions have 
   different restrictions on the selection of the molecule types. 
4  move
!p set "move",{ "all" | <name> | <number> },<sx>,<sy>,<sz>

   Sets an user defined sigma for the generates moves. The created shifts
   are Gaussian distributed. The default is a sigma of 0.2 unit cell. Note
   that the values of <sx>, <sy> and <sz> are given in unit cell units to
   speed up the MC runs. In case molecules are selected <number> specifies
   the molecule type, otherwise atoms are addressed by their <number> or
   <name>.
4  range
4  target
!p set "target",<ic>,<value>
!p set "target",<ic>,{<number> | <name> | "all"},
!p                   {<number> | <name> | "all"}, <dist>

   The first  command sets the desired correlation value <value> for 
   modes "cocc" and "cdis" for the neighbor definition <ic>.

   The second version of the command sets the desired distance 
   between the given atom types to <dist> A. This setting is used
   for mode "disp". If <disp> is set to zero the corresponding 
   atom pair is not used in the MC simulation.
4  temp
!p set "temp",<kt>

   This command sets the temperature <kt> used for the MC simulation.
   In order to be able to use the feedback procedure to determine the
   interaction energies the value of <kt> should be set to 1.0 (default).
   As a result the interaction energies will be in units of kT. If no
   feedback is used, <kT> can be set to the desired simulation temperature.
4  vec
!p set "vec",<iv>,<is1>,<is2>,<dx>,<dy>,<dz>

   This command is used to define correlation vectors that might be used
   to calculate correlations within the crystal (-> 'set corr'). The
   complete description is given in the CHEM section of the online
   help (-> set vec).
3  show
!p show

   This command lists all current settings for the MC simulation part
   of DISCUS on the screen.
2  mmc
!p mmc

   Enter "Multi Energy Monte Carlo" section of DISCUS. This sub level
   allows to create disordered structures with given correlations and/or
   displacements using Monte-Carlo simulations. Several different 
   "energies" can be minimized simultaneously.

   See help entry 'commands' for a complete list
   of commands available in this sub level. 

   NOTE: The MMC and CHEM sub level share some variables which define
         neighbors etc. and settings made in this sub level might be
         altered when using the other sub level. It is always save to
         repeat settings when entering this sub level if both levels
         are used. 

   The mmc menu modifies the crystal according to the moves, ==> 'set move'
   that you define. Only those atoms will take part of the 'moves' and
   be included in the energy calculations, whose properties fulfill the
   global property selection rules ==> 'property'.
 
3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help)
!p =       ! Algebra (see main help)
!p apply_symmetry ! Use the space group symmetry to generate vectors
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echos a string, just for interactive check
!p eval    ! Evaluates an expression (see main help)
!p exit    ! Terminates the MMC sub level, returns to the main DISCUS level.
!p help    ! Gives on-line help for 'mmc' (see main help)
!p rese    ! Reset the MMC to startup values
!p run     ! Starts MMC simulation
!p save    ! Saves structure (see main help -> save)
!p set     ! Sets most MMC parameters
!p show    ! Shows current settings
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
3  apply_symmetry
!p apply_symmetry [<output_file>]

   This command applies the space group symmetry to generate the 
   symmetrically equivalent vectors. You must have defined one or
   several vectors with the ==> 'set vec' command and grouped 
   these into neighborhoods via ==> 'set neigh'.

   The general concept assumes that you have defined the vector
   correlations for the position x,y,z within the asymmetric unit
   and would like DISCUS to generate the corresponding vector 
   correlations for the other atom positions as well.

   Example is an atom is on a general position you could specify:
   set vec, 1,  1, 2, 0,0,0
   set neig, vec, 1
   apply_symmetry
   This would generate the corresponding vector correlations for 
   the other atoms in the unit cell that are symmetrically
   equivalent to xyz.

   If an atom is on a special position, like a mirror plane, the 
   apply_symmetry command will generate the mirror image of the 
   vector.


   If the optional <output_file> is given, DISCUS will write the
   original "set vec, ..." and the generated ones into this file.
3  rese
!p rese

   Resets the value of all internal variables, counters, etc to the 
   startup default values.
3  reset
!p reset

   Reset all mmc definitions back to the default values at 
   system start. 
3  run
!p run

   This command starts the MMC simulation for the given parameters and
   number of MMC moves.
3  set
!p set <subcommand>

   This command allows to define the wanted correlations and most other
   parameters for the MMC simulation. The help entry 'commands' contains
   a list of valid subcommands for the 'set' command. Further help can
   be found for the following subcommands:

4  commands
!p allowed : Define which atom types are part of a neighborhood
!p angle   : Definition of interaction angles
!p con     : Definitions of interaction connectivities
!p cyc     : Setting of maximum number of MMC moves
!p envir   : Definitions of interaction environments
!p feed    : Setting of display/feedback interval
!p finish  : Convergence criteria to finish MMC
!p fixed   : Setting of atom ranges that are fixed
!p limit   : Setting of a limited atom range
!p mode    : Setting of MMC mode (crystal modification)
!p move    : Setting size of generated SHIFT moves
!p neig    : Setting of the neighbor definitions
!p range   : Setting of the neighboring ranges
!p target  : Setting of correlations values to be achieved
!p temp    : Setting of MMC simulation temperature
!p valid   ! Sets maximum number of non_valid cycles
!p vec     : Definition of interaction vectors
4  allowed
!p set "allowed", <is1> [,<is2]...]

   Usually mmc will automatically determine, which atom types play
   a role in the Monte-Carlo process. To do so mmc analyzes the
   ==> 'set target' command to find out which atoms are involved.

   In some cases, you might have defined a target simply as
   "set target, 1,repulsive,void,void, ..."
   Here the purpose is to define a repulsive interaction between
   voids, while all other atoms do not play a role. 
   MMC needs to know, however, whether it may shift/switch chemistry
   of voids with other atoms through the "set mode" definitions.

   To allow atoms to take part in the "set mode" modifications of
   the crystal, although they do not influence the energy of the
   crystal, you need to list these atoms on this "set allowed"
   command.
4  angle
!p set "ang",<iv>,<is1>,<is2>,<dx1>,<dy1>,<dz1>,<is3>,<dx2>,<dy2>,<dz2>

   This command is used to define correlation angles that might be used
   to calculate correlations within the crystal (-> 'set target'). The
   complete description is given in the CHEM section of the online
   help (-> set ang).
4  con
!p set "con",<iv>, {<is1>| <at_name>}, {<def.no>| <def.name>}

   This commands is used to define correlations between atoms through
   their connectivity list. See main menu 'connectivity' for further
   details. The second and third parameter allow alternative input.
   <iv>  is simply the number of the connectivity definition within mmc.
         One or several connectivity definitions can be grouped 
         to a neighborhood.

   <is1> is the atom type of the central atom around which neighbors 
         shall be searched via the connectivity list.
   <at_name> is the name of the central atom type around which
         neighbors hall be searched via the connectivity list.

   <def.no.> is the number of the definition that has been added/set
         within the connectivity menu.
   <def.name> is the name of the definition that has been added/set
         within the connectivity menu.
4  cyc
!p set "cyc",<number>

   This command sets the number of MMC moves (i.e. visited sites) to
   be executed by the 'run' command. The number <number> actually
   defines the number of 'tried' MMC moves. Note that we refer to a
   MMC cycle as the number of moves needed to visit every crystal site
   once on average.
4  disallowed
!p set "disallowed", <is1> [,<is2]...]

   Usually mmc will automatically determine, which atom types play
   a role in the Monte-Carlo process. To do so mmc analyzes the
   ==> 'set target' command to find out which atoms are involved.

   Sometimes, you might want to fix an atom to a place within the 
   crystal structure. At the same time, though you might want the
   correlations between this atom and other atoms to be taken into
   account. This is needed, for example if you want to sort atoms 
   of type A into the center of a sphere, while keeping atoms of type
   B on the outside. In this case a dummy atom of type C should be 
   fixed at the center, and negative chemical short range order
   be realized between this C atom and atoms of type A.

   To allow an atom type to participate in the moves defined 
   by ==> set move, use the set allowed command. 

   As the ==> 'set target' command allows all atoms that it finds
   to participate in a move, the 'set disallowed' command must be
   place after the last 'set target' instruction.
4  environment
!p set "env", 

4  feed
!p set "feed",<number>

   The interaction values for the given correlation structure are
   determined by a feedback process. This command sets the number
   of moves between each feedback run. This value is also used for
   the interval of screen outputs. Note that the energy mode "disp"
   does not use the feedback mechanism and the value <number> given
   here only determines the output interval.
4  finish
!p set "finish" [, feed:<nfeed>] [, diff:<maxdiff>] [, change:<maxchange>]
!p              [, aver:<maxaver>]
!p              [, {log:none}| log:screen]

   Set criteria that MMC uses to finish the cycles.

   Default or "stop:cycles" disables the convergence criteria. 
   MMC will run the full amount of ==> set cycles.

   With "stop:converge", MMC will apply the two convergence criteria
   and stop running once both are met.

   diff:<maxdiff>
      If the largest deviation:
      |(target-achieved)/target| is less than <maxdiff> MMC has converged

   change:<maxchange> 
      If the largest change of |(target-achieved)/target| observed over
      the last <nfeed> feedbacks is less than <maxchange>, MMC is
      considered to be stagnant and will be stopped.

   aver:<maxaver>
      If the average changes over the last nfeed cycles are less than
      <maxaver>, MMC is considered to be stagnant.

   feed:<nfeed>
      Number of feedback that are considered for the "change" criterion.

   log:screen or log:none
      Turns a display of the convergence status on/off. At "screen", a
      short report on the current values of the convergence criteria is
      displayed on the screen. This helps to find good valus for the 
      parameters.
4  limited
!p set "limited", "OFF"
!p set "limited", "atom", <nmin>, <nmax>

   Allows to limit the atom selection the interval [<nmin>:<nmax>].
   Atoms outside this interval are ignored and thus do not take part
   in the Monte Carlo process.

   The "set limit, OFF" command switched the limitation off.
4  mode
!p set "mode",<prob>,{ "shi[ft]" | "swc[hem]" | "swd[isp]" | "ext[ernal]" },
!p           [{ "a[ll]"   | "l[ocal]"  | "sl[ocal]" | "si[te]"     }
!p            , [<atom_list>] ]

   This command determines the type of MMC move used for modifying
   the crystal. You can simultaneously use any of the moves. The 
   user defined values of the probabilities <prob> are internally 
   scaled to add up to one and give the probability for each type
   of move. The settings are explained in the RMC section under
   -> set mode.
   If the atom list is given, the fourth parameter that specifies the 
   site must also be present. The atom list allows you to "move" or
   "exchange" atoms, even if they are not involved in any of the 
   target energies.
4  move
!p set "move",{ "all" | <name> | <number> },<sx>,<sy>,<sz>
!p set "move",{ "all" | <name> | <number> },<u>,<v>,<w>,  <sig>

   Sets an user defined sigma for the generates moves. The created shifts
   are Gaussian distributed. The default is a sigma of 0.2 unit cell. Note
   that the values of <sx>, <sy> and <sz> are given in unit cell units to
   speed up the RMC runs. In case molecules are selected <number> specifies
   the molecule type, otherwise atoms are addressed by their <number> or
   <name>.

   If the second form is used, the parameters <u>,<v>,<w> define a vector.
   The movement of the atom is restricted along this vector. The last 
   parameter is a multiplicative sigma along this direction.
4  neig
!p set "neig","rese"
!p set "neig","add"
!p set "neig","ang",<iv1>,{ [<iv2>,..] | <iv2>, "range" }
!p set "neig","env",<iv1>,{ [<iv2>,..] | <iv2>, "range" }
!p set "neig","vec",<iv1>,{ [<iv2>,..] | <iv2>, "range" }
!p     [,"number:"<value>]
!p     [,"number:next"]

   This command is used to define the neighbors used to determine the
   correlations. 
   The subcommand 'env' uses defined interaction 
   environments (-> set env). 
   The subcommand 'vec' uses defined interaction vectors (-> set vec).
   The subcommand 'ang' uses an angle at a site, defined by (-> set ang).
   Subcommand "reset" is used to set the number of neighborhoods 
   back to zero.

   The optional parameter "number:" replaces the "set neig, add" 
   command that was required in between two "set neig,..." commands.
   You can either specify a specific numerical value:
     set neig, number:1, vec, 1, 2
   or increment the neighborhood number with
     set neig, number:next, vec, 1, 2

   The subcommand 'add' is depreciated and it is reccommended to use 
   the optional parameter "number:" instead.
   The details of these commands are also given in the
   online help for the same command 'set neig' in the CHEM sub level.

   If the last parameter is "range", and exactly two arguments 
   <iv1>,<iv2> are given, then the contiguous range of correlations
   from <iv1> to <iv2> is used.

   Examples
   set neig, reset             ! Back to initial state
   set neig, number:1, vec 1, 2     ! define neighborhood 1 with vectors. 
   set neig, number:next, vec 3, 4  ! define the next neighborhood
   set neig, number:3,    vec, 1,2,3,4,5,6
   set neig, number:4,    vec, 1,6,range

   Old examples:
   set neigh, rese              ! Back to initial state
   set neig, vec, 1,2           ! use the listed vectors
   set neig, add                ! Increment number of neighborhoods
   set neig, vec, 1,2,8,7
   set neig, add                ! Increment number of neighborhoods
   set neig, vec, 1,2,3,4,5,6
   set neig, add                ! Increment number of neighborhoods
   set neig, vec, 1,6,range     ! Use vectors 1 to 6
   !                            ! Do not use "set neig, add" after the
   !                            ! last neighborhood
4  move
!p set "move",{ "all" | <name> | <number> },<sx>,<sy>,<sz>

   Sets an user defined sigma for the generated moves. The created shifts
   are Gaussian distributed. The default is a sigma of 0.2 unit cell. Note
   that the values of <sx>, <sy> and <sz> are given in unit cell units to
   speed up the MMC runs. In case molecules are selected <number> specifies
   the molecule type, otherwise atoms are addressed by their <number> or
   <name>.
4  range
!p set "range"

4  target
!p set "target",<ic>,"corr",     {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"},
!p                               <correlation>, <energy>, {"CORR" | "ENER"}
!p set "target",<ic>,"corr",    ({<number> | <name> | "all"}[, {<number> | <name> | "all"}...]),
!p                              ({<number> | <name> | "all"}[, {<number> | <name> | "all"}...]),
!p                               <correlation>, <energy>, {"CORR" | "ENER"}
!p set "target",<ic>,"unid",     {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"},
!p                               <correlation>, <energy>, {"CORR" | "ENER"}
!p set "target",<ic>,"unid",    ({<number> | <name> | "all"}[, {<number> | <name> | "all"}...]),
!p                              ({<number> | <name> | "all"}[, {<number> | <name> | "all"}...]),
!p                               <correlation>, <energy>, {"CORR" | "ENER"}
!p set "target",<ic>,"cd",       {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"},
!p                               <correlation>, <energy>, {"CORR" | "ENER"}
!p
!p set "target",<ic>,"angle",    {<number> | <name> | "all"},    ! Central atom
!p                               {<number> | <name> | "all"},    ! neighbors
!p                               {<number> | <name> | "all"},    ! neighbors
!p                               <angle>,       <energy>
!p
!p set "target",<ic>,"spring",   {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"},
!p                               <distance>,    <energy>
!p set "target",<ic>,"lennard",  {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"}, 
!p                               <distance>,    <energy> [, <pr>, <pa>] 
!p set "target",<ic>,"bucking",  {<number> | <name> | "all"},
!p                               {<number> | <name> | "all"}, 
!p                               <a>, <rho>, <b>
!p set "target",<ic>,"repulsive",{<number> | <name> | "all"},
!p                               {<number> | <name> | "all"}, 
!p                               <energy>,    <scale> [, <rmin> [, <pa>] ]
!p

   The target command sets the desired correlation values for each of
   the defined interaction neighborhoods <ic> (-> set neigh).

   Depending on the neighborhood type you must specify exactly one
   or several target energy types for each <ic>. The neighborhoods 
   "vector", "cor", and "angle" require one energy type, while the
   neighborhood "environment" may take several different energies.
   For each interaction <ic> you may specify several targets for different 
   atom combinations.

   set "target",<ic>,"corr", {<number> | <name> | "all"},
                             {<number> | <name> | "all"},
                             <correlation>, <energy>, {"CORR" | "ENER"}
   set "target",<ic>,"corr", ({<number> | <name> | "all"}
                              [, {<number> | <name> | "all"}...]),
                             ({<number> | <name> | "all"}
                              [, {<number> | <name> | "all"}...]),

   A chemical short range order correlation is defined 
   between the two atom types. 
   The last keyword defines how the target shall be achieved. 
   With "CORR", you want to achieve the target <correlation>.
   DISCUS uses the feedback loop to adjust the value of the
   Ising Energy in order to achieve the desired correlation.
   With "ENER", you fix the value of the Ising energy to the 
   value of <energy>. For negative <energy> values like atoms 
   will tend to be neighbors, while a positive <energy> favors
   opposite atoms next to each other.
   If you use several targets at the same time, it is necessary to 
   use the "ENER" keyword. Otherwise, the feedback mechanism will
   increase the absolute value of the Ising energy at each feedback 
   until the target <correlation> is achieved. This target will
   therefore overrule the other targets that all have fixed energy
   values.
   If you specify a positive correlation, like tom types will tend to
   cluster together, while for a negative correlation you will get 
   mostly opposite atom types as first neighbors.
 
   The second command form allows you to define correlations between 
   groups of atom types. Place each of the two sets of atom types
   in round brackets. In this case a positive correlation will 
   lead to clusters that consist of any atom of the first group to be
   neighbor to another atom of the first group and likewise at a 
   different place in the crystal for the second group. A negative 
   correlation will give you a crystal in which an atom of the first 
   group has an atom of the second group as neighbor.

   set "target",<ic>,"unid", {<number> | <name> | "all"},
                             {<number> | <name> | "all"},
                             <correlation>, <energy>, {"CORR" | "ENER"}
   set "target",<ic>,"unid", ({<number> | <name> | "all"}
                              [, {<number> | <name> | "all"}...]),
                             ({<number> | <name> | "all"}
                              [, {<number> | <name> | "all"}...]),

   This energy form is essentially identical to the chemical 
   correlation energy. The difference is that this energy form
   serves to distinguish directional pairs. For the target:
   set target, 1, unid, A, B, -1.0, 0.00, CORR
   the program will sort the structure favoring A => B pairs
   over all other pairs (A => A; B =>B; B =>A). 
   This energy works best for "vector" neighborhoods, and you 
   should only use a given vector and not the opposite vector.

   set "target",<ic>,"cd",   {<number> | <name> | "all"},
                             {<number> | <name> | "all"},
                             <correlation>, <energy>, {"CORR" | "ENER"}

   The intended correlation is a correlation between the displacements
   of the atoms in the neighborhood. A positive correlation means
   that the displacements from the average position shall be in the 
   same direction, while a negative correlation means a preference
   for opposing displacements. 
   Equal displacements are characterized by a positive value of the 
   scalar product of the two displacement vectors. Naturally this 
   energy works best in a local environment that is not centrosymmetric.
  

   set "target",<ic>,"lennard",  {<number> | <name> | "all"},
                                 {<number> | <name> | "all"}, 
                                 <distance>,    <energy> [, <pr>, <pa>] 

   A Lennard Jones type potential energy is calculated for the two
   atom types. 
   The energy is calculated as:
   E = A/<r>^<pa> - <B>/<r>^<pa>
   Here <r> is the interatomic distance and 
   A and B are calculated to give the minimum of the 
   Lennard-Jones potential at distance <distance> with a potential
   depth of -1.*|<energy>|

   set "target",<ic>,"repulsive",{<number> | <name> | "all"},
                                 {<number> | <name> | "all"}, 
                                 [<energy>[,<scale> [, <rmin> [, <pr>] ]]]

   A purely repulsive energy is calculated between the two atom types.
   The energy is calculated as:
   -1.*|<energy>| + ((<distance> - <rmin>)/<scale>)^<pr>
   Thus <energy> is the energy between the two atoms at infinite distance.
   As mmc compares the energy differences between two atom configurations,
   the value of this energy is not really relevant.

   For interatomic distances shorter than <rmin> the program calculates:
   -1.*|<energy>| + ((0.000001                    )^<pr>

   For a steep descent, choose a high value of the power <pr>. With a 
   high value of <pr>, the potential levels off at shorter distances 
   and energy differences become less relevant. Thus the atoms will be
   pushed apart more strongly at shorter distances, yet at longer 
   distances the influence of this potential is less critical.

   To push atoms far apart over the whole range of distances, choose a 
   large value of <scale>.

   <energy> defaults to zero
   <scale>  defaults to 1.0
   <rmin>   defaults to zero
   <pr>     defaults to 1.0

   set "target",<ic>,"angle",    {<number> | <name> | "all"},    ! Central atom
                                 {<number> | <name> | "all"},    ! neighbors
                                 {<number> | <name> | "all"},    ! neighbors
                                 <angle>,       <energy>
  
   Define an angular potential. The first atom type is the central atom, at
   whose position the bond angle is located. 
   The potential is <energ>*(alpha-<angle>)**2. Compared to the Lennard-Jones
   potential, the energy values should usually be smaller by a factor 10 or so.
4  temp
!p set "temp",<kt>

   This command sets the temperature <kt> used for the MMC simulation.
   In order to be able to use the feedback procedure to determine the
   interaction energies the value of <kt> should be set to 1.0 (default).
   As a result the interaction energies will be in units of kT. If no
   feedback is used, <kT> can be set to the desired simulation temperature.
4  valid
!p valid <invalid_moves>

   MMC will pick an atom or an atom pair at random. If a pair of atoms
   has the same chemistry, a "switch chemistry" move will not change
   anything. Such a pair is considered an invalid trial. As the structure
   converges into a highly ordered state, the probability of picking 
   an invalid pair increases. In order to prevent an infinite loop, 
   DISCUS terminates mmc once the number of invalid tried configurations
   exceeds the number of <invalid_moves>.
   Default for <invalid_moves> is 1000. 
   For large structures it might be helpful to increase this number,
   for example to a value around the number of atoms. 
4  vec
!p set "vec",<iv>,<is1>,<is2>,<dx>,<dy>,<dz>

   This command is used to define correlation vectors that might be used
   to calculate correlations within the crystal (-> 'set neig'). The 
   first parameter <iv> is the number of the vector to be defined. The
   variables <is1> and <is2> give the number of the crystal site at each
   end of the vector. The values of <dx>,<dy> and <dz> define the vector
   in unit cells. Correlation vectors within one unit cell have <dx>,<dy>
   and <dz> set to zero. If you want to define correlation vectors crossing
   the unit cell boundaries set <dx>,<dy> and <dy> accordingly.

   As a side effect of the UNIDIRECTIONAL correlations, you must make
   sure that vectors that start on different sites are in separate targets,
   even though they might be symmetrically related. (To be fixed).
3  show
!p show

   This command lists all current settings for the MMC simulation part
   of DISCUS on the screen.
2  molecularize
!p molecularize "conn" [, start:<from>] [, finish:<to>]
!p                     [, conn:<list>] [, central:<list>]
!p                     [, exclude:<list>]
!p                     [, moletype:<type>] [, biso:<value>]
!p                     [, corrlin:<value>] [, corrquad:<value>]
!p molecularize "range" [, start:<from>] [, finish:<to>]
!p                     [, moletype:<type>] [, biso:<value>]
!p                     [, corrlin:<value>] [, corrquad:<value>]
!p molecularize "conn", <central> [, <exclude> ...]
!p molecularize "range", <from>, <to>, <molecule_type> , <molecule_Biso>

   This command allows to group a set of atoms into a molecule.

!b molecularize conn
   'molecularize conn' and its optional parameters will place atoms 
   and their connectivities into a molecule. At least one suitable 
   connectivity must have been created within the ==> 'conn' menu.

!b molecularize "range"
   'molecularize range" and its optional parameters will place the 
   consecutive range of atoms from start to finish into a molecule. 
   DISCUS will not check how close these atoms are.

!b optional parameters

!b start:<from>
   start:all
   Defines the first atom number <from> to be at the center of a
   molecule or sets that "all" atoms are checked. Defaults to "all"

!b finish:<to>
   finish:all
   Defines the last atom number <to> to be at the center of a
   molecule. If <to> is set to "last", the search runs to the last
   atom in the crystal, i.e. up to n[1]. If <to> is set to "all", 
   all atoms from 1 to n[1] are examined. Defaults to "last"

!b conn:<list>
   Defines which of the connectivities of the current central 
   atom are used to build the molecule. 
   The list can take the forms: 
      "-1" to include all connectivities
      a single numerical value such as 1
      a list of comma separated numerical values enclosed in [...]
   Defaults to "-1", which includes all connectivities.

!b central:<list>
   Defines which central atom types are used.
   The list can take the forms: 
      "-1" or "all" to include all atom types
      a single numerical value such as 1 or 4
      a list of comma separated numerical values and/or
        atom type names enclosed in [...]
   Defaults to "-1", which includes all atom types.

!b moletype:<value>
   Defines the molecule type that will be used for the new molecules.
   Please make sure that this will be a unique number

!b biso:<value>
   Defines a molecular isotropic displacement parameter, used 
   in the Fourier and powder menues

!b corrlin:<value>
   Defines a correlation term that is used to make PDF maxima at
   short distances narrower than those at larger distance.
   corrlin defines a relationship proportional to 1/r.

!b corrquad:<value>
   Defines a correlation term that is used to make PDF maxima at
   short distances narrower than those at larger distance.
   corrquad defines a relationship proportional to 1/r^2.

!b older versions, discouraged

   The third version requires that for atom <central> and all other
   atoms in the molecule a suitable connectivity list has been prepared,
   at the connectivity menu, see ==> 'conn' for further details. 
   You can list  one or more excluded atoms. They and the connectivity 
   behind these atoms are excluded from the molecule. This in turn 
   allows you to group a sub section of a full molecule.
   Internally this algorithm is used within the symmetry menu to
   rotate a partial molecule.

   The last version places the consecutive range of atoms into 
   a molecule of type <molecule_type>. 
   DISCUS will not check how close these atoms are.
2  output
!p output

   Switches to the output level of discus. All Fourier output is written 
   at this level. Several graphic formats are available.

   Further help topics are:

3  commands

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Returns to the main discus level
!p form    ! Defines the output format to be used
!p help    ! Gives help for the output level (see main help)
!p input   ! Reads an old data file
!p outfile ! Sets name of output file
!p range   ! Limit the range of a 3DPDF, most useful in combination with
!p         ! format "xplor", and "vesta"
!p reset   ! Reset and clear all definitions
!p run     ! Starts writing of output
!p show    ! Shows the current settings
!p thre    ! Sets the thresholds used for bitmap output
!p valu    ! Sets the value that is written to file
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
3  format
!p form {"gnu" | "pgm" | "ppm" | 
!p       "powder" [,{"dst"|"tth"|"stl"|"q"} [,<min>,<max>,<step>] ] 
!p       "pdf" [,"r" [,<min>,<max>,<step>] ] 
!p     | "post" | "shel" | "stan" | "hklf4" | "list5" | "nexus" |
!p       "vtk" | "mrc" | "vesta" | "xplor" 
!p     | "hdf5" [,"maxval:"{"auto"|"data"|<value>"]" }

   Defines the output format that will be used. 
   Valid parameters are:

!p "gnu" 
   Sets the type of the output file to gnuplot. The intensities are
   written in blocks of intensities along the abscissa, with an empty
   line separating each block. Each line of each block contains:
   index along abscissa, index along ordinate, intensity, third index.

!p "hdf5" [,maxval:"auto"]
!p "hdf5" [,maxval:"data"]
!p "hdf5" [,maxval:<value>]
   Sets the output to HDF5 file format. This applies to single
   crystal data only, not to powder diffraction pattern.

   The file format is compatible to the Yell program by Arkadiy 
   Simonov. 
   See the manual for details on the file format.

   By default the data are scaled by a multiplier 1.0 to give the 
   maximum value in the output file as in the data. The same is 
   achieved by maxval:"data". 
   Alternatively a scale factor can be applied such that the maximum
   value in the output file is equal to <value>.

!p "list5"
   Sets the output type to a SHELXL list 5. Each line of the output
   contains " h k l F F phase" in the format (3I4, 2F10.2,F2.2).
   The hkl are converted by an "int" command to integers. The
   user has to make sure that the increments used in the Fourier 
   resulted in integer spacing. 
   Independent of the output value set by the 'value' command, DISCUS
   always writes the amplitude and the phase angle in degrees.
   DISCUS calculates the value of F(000) and scales the data such 
   that F(000) is less than 10**8 to fit into the format. 

!p "mrc"
   Set the output file format to the MRC file format. Applies to 
   2D and 3D data only. Images can be visualized for example with 
   Chimera.

!p "nexus"
   Sets the output to NeXuS file format.

!p "pgm"
   Sets the type of the output to portable gray map. A bitmap of the
   intensity is written in portable gray map style. All values below the
   minimum threshold are set to this value, all values above the maximum
   threshold are set to this maximum value.

!p "ppm"
   Sets the type of the output to portable any-map. A bitmap of the
   intensity is written in portable any-map style. The color scheme
   is read from file "color.map". All values below the
   minimum threshold are set to this value, all values above the maximum
   threshold are set to this maximum value.

!p "powder" [,{"dst"|"tth"|"stl"|"q"} [,<min>,<max>,<step>] ] 
   Sets the output format to powder. You must have calculated a 
   powder diffraction pattern using the ==> 'powder' menu of DISCUS.
   DISCUS writes a two column output, with the intensity
   in the second column. The value in the first column is set by the
   optional second parameter and may be:
   "dst" : dstar = 1./d(hkl) = 2* sin(theta)/lambda
   "tth" : 2-Theta
   "stl" : sin(theta)/lambda
   "q"   : Q = 2*pi* dstar = 4*pi*sin(theta)/lambda

   For the two types of axes in the ==> 'powder' menu, "Q" and "TTH",
   you need to remember to specify limits for the axis. If you
   intend to write the output in the other format, the default is
   to convert these limits to the intended output axis. 

   If the values [,<min>,<max>,<step>] are specified, they will 
   overwrite the limits set in the powder menu. This especially
   helpful if you want to calculate on a Q-axis but write a file
   on a 2Theta axis or vice versa. Likewise you might want to 
   limit the powder output compared to the calculation or write 
   the output with a different step size.

   If DISCUS is operated within the DISCUS_SUITE, a file name 
   that starts with "kuplot" is copied directly into the KUPLOT
   data array, and NOT written to disk.
!p "pdf" [,"r" [,<min>,<max>,<step>] ]
   Sets the output format to a Pair distribution function PDF.
   
   If the values [,<min>,<max>,<step>] are specified, they will
   define the PDF range to be written. 

!p "post"
   Sets the type of the output to color postscript. A bitmap of the
   intensity is written in color postscript. The color scheme is read
   from file "color.map". All values below the minimum threshold
   are set to this value, all values above the maximum threshold are
   set to this maximum value.

!p "shel"
!p "hklf4"
   Both commands sets the output format to SHELX type hklf4 data. The 
   data are written in format (3I4,2F8.2). 
   The hkl are converted by an "int" command to integers. The
   user has to make sure that the increments used in the Fourier 
   resulted in integer spacing. Use the ==> 'value' "intensity" or 
   "amplitude" for the output.  DISCUS calculates the value of I(000) or
   F(000) respectively and scales the data such that I(000) is less than
   10**6 to fit into the format. The sigma is just the square root of the
   final intensity after scaling.

!p "stan" 
   Sets the output to standard file format, which is used by KUPLOT. 
   The output file contains two initial lines and then a block for each 
   data line separated by an empty line. The first line contains the 
   number of data points along the abscissa and the ordinate, the 
   second line the minimum and maximum value of the indices in reciprocal
   space along the abscissa and ordinate respectively.
!p "vesta"
!p [, {"patt:none" | "patt:unit" | "patt:full" ]
!p [, {"sel:all" | "sel:none" | "sel:name" | "sel:[name1,name2 {, ...}]"]
!p [, {"des:all" | "des:none" | "des:name" | "des:[name1,name2 {, ...}]"]

   Writes an ASCII formatted 3D-map of the intensity or 3DPDF in the
   GSAS grd file format. This map can be viewed with VESTA.

   Optionally a 3D-PDF map can be overlayed by a sketch of the Patterson
   structure, which is calculated from the average structure. 
   Choices are a "full" Patterson overlay throughout the entire 3D-PDF,
   or a restriction to a single "unit" cell in the range [-0.5, 0.5].

   The "sel", "des" options allow to select or deselect atom types 
   from which the Patterson overlay is constructed. "VOID" atoms are
   deselected by default. As a Patterson overlay will easily become 
   very crowded a restriction to few atom types might help for clarity.
   For an X-ray 3D-PDF for example you might consider to deselect Hydrogen. 

   Default values are:
   "patt:none"; "sel:all"; "des:none"
!p "xplor"
   Writes an ASCII formatted 3D-map of the intensity or 3DPDF in the
   X-plor file format. This map can be viewed with several crystallographic
   viewers, for example VESTA. 
!p "vtk"
   Sets the output to vtk.
3  input
!p input

   Reads an old data file
3  outfile
!p outfile <filename>

   Sets the name of the output file, to which the intensities are written.

   Within the DISCUS_SUITE the output files can be written directly into 
   KUPLOT. Simply start the file name with the fixed string 'kuplot'.
   The data set number in kuplot will be incremented automatically.
3  range
!p range "full"
!p range "center:["<cx>,<cy>,<cz> "]", "pixel:["<px>,<py>,<pz>"]"
!p range "center:middle",              "pixel:["<px>,<py>,<pz>"]"
!p range "quad:lll"

   This command allows you to limit the output of 3D pixel maps. 

   With "full" as first and single parameter, the full map is written.

   With "center:..." the central position is defined, which can be either
   the "middle" of the complete calculated volume or a suser defined
   triplet of pixel values.

   With "pixel:.." you set the width of the map to be written. 
   Specify as "pixel:[51, 31, 61]" with the numbers replaced by 
   values of your choice.

   With "quad:..." as single parameter, you choose a quadrant. 
   The three letters must be any combination of "r" and "l" for
   "right" and "left" quadrant along each axis.  
   
3  reset
!p reset

   Reset all output definitions back to the default values at 
   system start. 
3  run
!p run

   Starts writing the output file. Without this command the output file
   is not written!
3  show
!p show

   Shows the current settings
3  threshold
!p thresh { "high"|"low"|"sigma"|"zmin"|"zmax"} <value>

   This command sets the threshold that is used when writing BITMAP output.
   All values less than the minimum threshold are set to zero,
   all values higher than the maximum threshold are set to the
   maximum threshold. The values in between are linearly scaled from zero
   to 255.

   Depending on the first parameter, the second parameter is interpreted in
   five different ways:

!p "high"  : Sets maximum threshold for BITMAP in percent of the maximum 
!p           diffuse intensity.
!p "low"   : Sets minimum threshold for BITMAP in percent of the maximum 
!p           diffuse intensity.
!p "sigma" : Sets threshold for BITMAP to average diffuse intensity
!p           +- <value> times standard deviation of diffuse intensity.
!p "zmax"  : Sets maximum threshold for BITMAP
!p "zmin"  : Sets minimum threshold for BITMAP
3  value
!p valu {  "int"  |  "amp"  |  "pha" [,"random"]  |  "real"  |  "imag" }
!p
!p valu { "S(Q)"  | "F(Q)" | "I(Q)"}
!p
!p valu { "f2aver"  | "faver2" }
!p
!p valu { "pdf" }
!p
!p valu { "3DPDF" } {, "dsmax:"<value> | "qmax:"<value> 
!p                     "hklmax:["<h>,<k>,<l>"]"

   Sets what value is written to the output file. The keyword given in
   < > corresponds to the value of the average structure factor <F> whereas
   the plain word stands for the resulting value of the Fourier transform
   which can be F or F-<F> depending on the selected mode. The command
   'value int' will save the resulting intensity whereas 'value <int>' will
   give the intensity of the average structure. The allowed values are
   summed up in the following list:

!p "int" :   intensity I(hkl)
!p "amp" :   modulus of structure factor |F(hkl)|
!p "pha" :   phase angle in degrees
!p           If the optional second parameter is given as "random",
!p           the phases for integer HKL are written as calculated.
!p           All other phases are assigned a random number between
!p           -180 and +180 degrees.
!p "real":   real part of structure factor
!p "imag":   imaginary part of structure factor
!p "pdf"     Powder PDF 
!p "3DPDF"   3DPDF == generalized Patterson function
!p           Exactly one optional parameter can be specified that
!p           sets a limit in reciprocal space. All intensities further
!p           outside are multiplied with zero. 
!p           "dsmax"   : value is in 2*sin(Theta)/lambda
!p           "qmax"    : value is in 2PI*2*sin(Theta)/lambda
!p           "hklmax"  : value is length of reciprocal vector
!p           WARNING, as the intensity is multiplied with zero, 
!p              all further output is truncated as well!
!p              To avoid, write 3D-PDF output last.
!p           Defaults to no limit to be applied.
!p "S(Q)":   Normalized total scattering function
!p "F(Q)":   Reduced normalized total scattering function Q[S(Q)-1]
!p "I(Q)":   Intensity divided by the number of atoms.
!p "f2aver": Squared atomic form factors , averaged over all atoms
!p "faver2": Average atomic form factor squared aver average
   The last five values are available for powder output only and require
   a Q axis. 

   The file name is not adapted automatically!
2  patterson
!p patterson

   Branches to the Patterson  transform level of DISCUS
   The Patterson transform is calculated from two input files.
   The two files must contain the intensity, real or imaginary part,
   or amplitude in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       
!p amplitude       
!p real            imaginary

   The user must specify the Fourier plane that had been calculated
   and the real space plane to be calculated.

   Further help topics are:

3  commands
   Valid commands at this level are:

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p abs     ! Defines the coordinate of the abscissa
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates Fourier level
!p file    ! Defines the input file name(s)
!p form    ! Defines the input file format
!p help    ! Help to Fourier commands (see main help)
!p layer   ! Defines the layer in reciprocal space to be calculated
!p ll      ! Defines the lower left corner in reciprocal space
!p lr      ! Defines the lower right corner in reciprocal space
!p na      ! Defines the number of points along the abscissa
!p no      ! Defines the number of points along the ordinate
!p ord     ! Defines the coordinate of the ordinate
!p reset   ! Reset all Fourier definitions
!p rhoabs  ! Defines the coordinate of the real space abscissa
!p rholayer! Defines the layer in real space to be calculated
!p rholl   ! Defines the lower left corner in real space
!p rholr   ! Defines the lower right corner in real space
!p rhona   ! Defines the number of points along the real space abscissa
!p rhono   ! Defines the number of points along the real space ordinate
!p rhoord  ! Defines the coordinate of the real space ordinate
!p rhoul   ! Defines the upper left corner in real space
!p run     ! Starts the calculation
!p scale   ! Defines an overall scale factor
!p set     ! Sets various parameters
!p show    ! Shows the current settings for the inverse Fourier transform
!p stat    ! Shows statistics on the normalized structure factor
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p type    ! Defines the file type (intensity, amplitude ...)
!p ul      ! Defines the upper left corner in reciprocal space
!p wilson  ! Calculates Wilson statistics
!p wait    ! Waits for user input (see main help)
3  abs
!p abs <switch>

   Defines which the component of the vector parallel to the abscissa
   is written to the output file.
3  file
!p file {"a"|"b"},<filename>

   Defines the filenames needed for the patterson.

   The Patterson transform is calculated from one or two input files.
   The two files must contain the intensity, real or imaginary part,
   or amplitude in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       
!p amplitude       
!p real            imaginary

   If the input format is 'shelxl' then one input file is sufficient.
   DISCUS assumes the input file to be a SHEXL List type 5 containing
   <h> <k> l> <Fobs> <Fcalc> <phase angle in degree>
   The file is read as free format.
3  format
!p form {"gnu" | "stan" | "shelxl" | "hklf4" }

   Defines the input format that will be used. 
   Valid parameters are:

!p "gnu" 
   Sets the type of the output file to gnuplot. The intensities are
   written in blocks of intensities along the abscissa, with an empty
   line separating each block. Each line of each block contains:
   index along abscissa, index along ordinate, intensity, third index.

!p "stan" 
   Sets the output to standard file format, which is used by KUPL. 
   The output file contains two initial lines and then a block for each 
   data line separated by an empty line. The first line contains the 
   number of data points along the abscissa and the ordinate, the 
   second line the minimum and maximum value of the indices in reciprocal
   space along the abscissa and ordinate respectively.

!p "shelxl" [, {"fobs" | "fcalc"}]
   Sets the input file format to SHELXL. DISCUS assumes the input file
   to be a SHLEXL List type 5 containing:

!p   <h> <k> l> <Fobs> <Fcalc> <phase angle in degree>

   The file is read as free format. All reflections are expanded by the
   appropriate symmetry operations, including proper phase transformation.

   If the optional parameter is "fobs", the observed structure factor is
   used for the calculation, if the parameter is "fcalc", the calculated
   structure factor is used.

!p "hklf4" [,"all"]
   Sets the input file format to the SHELX HKLF4 format. 
   Without the optional parameter, DISCUS assumes the input file to be
   a SHLEXL HKLF4 file AFTER merging symmetrically equivalent reflections
   containing:

!p   <h> <k> l> <Intensity> <sigma>

   The file is read as free format. All reflections are expanded by the
   appropriate symmetry operations, including proper phase transformation.

   If the optional parameter "all" is given, DISCUS will not expand
   the reflections by the reciprocal space symmetry operations. This is
   useful, if you have a data set that represents all of reciprocal 
   space and has not been merged to the asymmetric unit in reciprocal space.

   If you use this option, DISCUS automatically assumes that a
   PATTERSON will be calculated.
3  layer
!p layer <e11,e12,e13, e21,e22,e23, e31,e32,e33, inc1,inc2>

   Sets the lower left, lower right and upper left corner of the
   Fourier plane to be calculated and sets the number of data
   points along the horizontal and the vertical
3  ll
!p ll <e11> , <e12> , <e13>

   Sets the lower left corner of the Fourier plane to be calculated.
3  lr
!p lr <e21> , <e22> , <e23>

   Sets the lower right corner of the Fourier plane to be calculated.
3  na
!p na <inc1>

   Sets the number of data points that will be calculated along the
   abscissa.
3  no
!p no <inc2>

   Sets the number of data points that will be calculated along the
   ordinate.
3  ord
!p ord <switch>

   Defines which the component of the vector parallel to the ordinate
   is written to the output file.
3  rhoabs
!p rhoabs <switch>

   Defines which the component of the vector parallel to the 
   real space abscissa is written to the output file.
3  rholayer
!p rholayer <e11,e12,e13, e21,e22,e23, e31,e32,e33, inc1,inc2>

   Sets the lower left, lower right and upper left corner of the
   real space plane to be calculated and sets the number of data
   points along the horizontal and the vertical
3  rholl
!p rholl <e11> , <e12> , <e13>

   Sets the lower left corner of the real space plane to be calculated.
3  rholr
!p rholr <e21> , <e22> , <e23>

   Sets the lower right corner of the real space plane to be calculated.
3  rhona
!p rhona <inc1>

   Sets the number of data points that will be calculated along the
   real space abscissa.
3  rhono
!p rhono <inc2>

   Sets the number of data points that will be calculated along the
   real space ordinate.
3  rhoord
!p rhoord <switch>

   Defines which the component of the vector parallel to the
   real space ordinate is written to the output file.
3  rhoul
!p rhoul <e31> , <e32> , <e33>

   Sets the upper left corner of the real space plane to be calculated.
3  reset
!p reset

   Reset all Fourier definitions back to the default values at 
   system start. 
3  run
!p run

   Starts the Patterson calculation.
3  scale
!p scale <scale-factor>

   Defines an overall scale factor. Together with the automatic scaling
   by 1/vol(unit cell), this scale factor serves to put the electron
   density on an absolute scale of electrons per cubic Angstrom. The
   scale factor should effectively multiply the observed F(000) such that
   it is equal to F(000) calculated for one unit cell of the average
   structure.
   
   Every time you enter "patterson" the scale factor is calculated to be
   number of atoms in crystal / number of atoms in one unit cell. If you
   use experimental data, you MUST specify the scale factor every time you 
   enter the "patterson" sub menu.
3  set
!p set "accu",{"init"|"add"}
!p set "excl",{"none"|<value>}
!p set "mode",{"normal"|"sharp"|"super"}
!p set "origin",{"normal"|"subtract"}
!p set "rsym",{appl"|"igno"}

   Set defines various parameters.

4  accu
!p "accu",{"init"|"add"}

   Sets the mode for the accumulation of Patterson transforms.

!p "init"  
   The electron density array is initialized, i.e. set to zero.

!p "add"   
   The next Patterson transform is added to the previous value.  This way 
   several Patterson transforms will contribute to a single layer in direct 
   space, which is necessary to create a Patterson section rather than a 
   projection onto the layer. See the manual for further details.

   If you use DISCUS to calculate the input data for the Patterson,
   you MUST separate the loop that calculates the Fourier from the loop
   that calculates the Patterson!!! Both parts of the program use
   the same variable to store the results and by mixing the loops, the
   result will be unpredictable nonsense !

4  excl
!p set "excl",{"none"|<value>}

   Signals whether certain data points should be ignored.

!p "none"
   All data points are treated as normal data points, regardless of their
   value.
   This is the default at program start.

!p <value>
   Data points that are equal to <value> are excluded from the Patterson
   transform. You can use this option to mask out regions of the input
   data by setting their values to <value>.
   In the companion program KUPLOT, data points of value equal to -9999. are
   treated as excluded regions.

4  mode
!p set "mode",{"normal"|"sharp"|"super"}

   Determines the calculation mode of the Patterson function. 
   This mode may be a:
   "normal" Patterson using |F|*|F|
   "sharp"  Patterson using |F|*|E|
   "super"-sharpened Patterson using |E|*|E|

   Currently the mode can only be used in combination with SHELX HKLF4 files.

4  origin
!p set "origin",{"normal"|"subtract"}

   Determines whether the origin peak should be subtracted from the 
   Patterson function. Since this depends on the data to be on an absolute
   scale, a Wilson plot is calculated and DISCUS puts the data on an 
   approximately absolute scale.

   Currently the origin peak can only be subtracted in combination 
   with SHELX HKLF4 files.

4  rsym
!p set "rsym",{"appl"|"igno"}

   Determines whether the space group symmetry is applied to all reflections.
   If the second parameter is "appl", all symmetry elements are applied to
   all reflections and the phases are transformed accordingly. This allows
   you to read a set of unique reflections and calculate the Patterson.
3  show
!p show

   Shows the current settings for the Fourier transform file
3  type
!p type {"a"|"b"},
!p      {"intensity"|"amplitude"|"real"|"imaginary"|"phase"|"fobs"|"fcalc"}

   Defines the content of file "a" or "b".

   The Patterson transform is calculated from one or two input files.
   The two files must contain the intensity, real or imaginary part,
   or amplitude in one of the following combinations:

!p file a          file b
!p -------------------------
!p intensity       
!p amplitude       
!p real            imaginary

   If the input format is "shelxl", DISCUS reads just one file. You can
   calculate the inverse Fourier from Fobs or Fcalc data by choosing the
   appropriate file type from one of the following choices:

!p file a          file b
!p -------------------------
!p amplitude
!p fobs
!p fcalc

3  stat
!p stat {"screen" | <outputfile> }

   This command calculates the normalized structure factor, and displays
   relevant statistical values like <|E**2 - 1|> for all reflections and
   several sections in reciprocal space.

   It requires the input file to be a SHELX HKLF4 file.
   The results are written to screen only or optionally into the 
   output files:
   <outputfile>.ehkl   Normalized structure factors for all input reflections
   <outputfile>.statistics  Statistical values for the E
   <outputfile>.short       Short summary of statistical values
   <outputfile>.histogram   Number of E versus |E| for plotting 

   The input file must have been defined by ==> "file a,<infile>",
   For the statistics to be correct, the correct unit cell must have been
   defined. 
3  ul
!p ul <e31> , <e32> , <e33>

   Sets the upper left corner of the Fourier plane to be calculated.
3  wilson
!p wilson
   This command reads a HKLF4 file and calculates Wilson statistics from
   a plot of ln(average(formfactor**2)/average(intensity)) versus 
   sin(theta)/lambda.
   The scale factors: Fcalc = k   *Fobs
                      Icalc = k**2*Fobs
   and an overall B, respectively U are calculated and displayed.
   A histogram of the logarithms versus sin(Theta)/lambda is written
   to file <file>.wilson, where <file> is the base of the HKLF4 filename.

   The input file must have been defined by ==> "file a,<infile>",
   The correct radiation and wavelength must have been defined 
   within the ==> 'fourier' menu, and the structure must contain
   elements. For the Wilson statistics to be correct, the relative
   amount of atoms should be equal to or at least close to the 
   composition of the actual substance to which the data set belongs.
2  pdf
!p pdf

   This command switches to the PDF mode of DISCUS. PDF stands
   for Pair-Distribution-Function. The function actually used in
   DISCUS is the so-called reduced radial distribution function
   G(r) which is defined as 

!p   G(r) = 4 pi r ( rho(r) - rho(0) )

   The value of "rho(r)" is the probability density of finding an
   atom at the distance "r" from a given atom. Besides calculating
   G(r) from a given structure, the structure can be modified to
   match a observed G(r) via the RMC method. Note, that this sub level
   uses many RMC commands and will overwrite possible settings made
   in the RMC segment. All commands are listed in the help entry
   'commands'. Only commands unique to this level are described
   below.

3  commands
   Valid commands at this sub level are :

!p @       ! Executes a macro (see main help)
!p =       ! Algebra (see main help)
!P calc    ! Calculates PDF for current structure
!p data    ! Reads observed PDF for RMC refinement
!p dese    ! Deselects used atom types (see RMC level)
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echos a string, just for interactive check
!p eval    ! Evaluates an expression (see main help)
!p exit    ! Terminates the PDF sub level
!p help    ! Gives on-line help for 'pdf' (see main help)
!p i/jdese ! Deselect atoms (i/j) for PDF calculation
!p i/jsele ! Select atoms (i/j) for PDF calculation
!p mdes    ! Deselects molecules (see RMC level)
!p msel    ! Selects molecules for refinement (see RMC level)
!p reset   ! Reset PDF module
!p run     ! Start PDF refinement (see RMC level)
!p save    ! Saves structure or PDF to given file
!p sele    ! Selects used atom types (see RMC level)
!p set     ! Sets most PDF parameters
!p show    ! Show current PDF settings
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
3  calc
!p calc

   This command will calculate the PDF of the current structure.
   Note that the result is NOT automatically saved. This must be
   done using the command 'save' (-> save).
3  data
!p data <file>

   This command will read an observed PDF from the file <file>. 
   The file needs to be ASCII format with the following information
   on each line: r G dr w(G). Here 'r' is the distance and G the
   observed value of the reduced radial distribution function G(r).
   The value 'dr' is ignored and the last value gives the weight
   w(G) of G(r) to be used in the refinement (e.g. 1/(error of G)).
   NOTE: The data file must be in constant r steps and the first
   points MUST be equal to r=stepsize.
3  i/jdese
!p idese { "all" | <name> | <number> }, [ ... ]
!p jdese { "all" | <name> | <number> }, [ ... ]

   This command deselects atom types given either by <name> or <number>
   for the PDF calculation. The two commands allow one to deselect
   atom types for each atom in a pair 'ij' contributing to the PDF
   calculation.
3  i/jsele
!p isele { "all" | <name> | <number> }, [ ... ]
!p jsele { "all" | <name> | <number> }, [ ... ]

   This command selects atom types given either by <name> or <number>
   for the PDF calculation. All other atoms are ignored. This allows
   the calculation of differential or partial PDFs. The two commands
   allow one to select atom types for each atom in a pair 'ij'
   contributing to the PDF calculation.
3  rese
!p rese

   This command resets most PDF module settings.
3  run
!p run

   This command starts the RMC refinement to match the calculated
   PDF with the observed one. 
3  save
!p save {"pdf" | "stru" | "mark"}, <file>

   This command allows to save either the current PDF ("pdf") or
   the current structure ("stru") to the file named <file>. The
   parameter "mark" saves the distances of all pairs in <file> 
   for plotting markers below a PDF. Markers can only be saved
   if the Gaussian mode is disabled.

   If DISCUS is operated within the DISCUS_SUITE, a file name 
   that starts with "kuplot" is copied directly into the KUPLOT
   data array, and NOT written to disk.
3  set
!p set "subcommand"

   This command allows to set most of the PDF parameters.  Some of
   the commands are explained in the RMC section (-> rmc). The following
   "subcommands" are valid:

4  commands
   Valid subcommands are:

!p "bound"    : toggles the use of periodic boundaries
!p "cycl"     : sets number of cycles to be calculated (see RMC level)
!p "delta"    : sets quadratic correlation factor (Gaussian mode only)
!p "corrquad" : sets quadratic correlation factor (Gaussian mode only)
!p "density"  : sets rho0 value manually
!p "diameter" : sets particle diameter for finite objects
!p "disp"     : sets output interval (see RMC level)
!p "finite"   : sets the correction type for 4Pi Rho for finite objects
!p "frange"   : sets the range in r used for the refinement
!p "gamma"    : sets linear correlation factor (Gaussian mode only)
!p "corrquad" : sets linear correlation factor (Gaussian mode only)
!p "mdis"     : sets minimal allowed distances between atoms (see RMC level)
!p "mode"     : sets RMC mode (relaxation/switch atoms) (see RMC level)
!p "move"     : sets sigma for generated RMC shifts (see RMC level)
!p "partial"  : sets partial weights for PDF (use with MIXSCAT program)
!p "poly"     : sets the background polynomial for finite objects
!p "qalp"     : sets resolution broadening (Gaussian mode only)
!p "qbroad"   : sets resolution broadening (Gaussian mode only)
!p "qmax"     : sets maximal Q value used for termination correction
!p "qsig"     : sets SIGMA Q for resolution correction
!p "qdamp"    : sets SIGMA Q for resolution correction
!p "rad"      : sets radiation used to calculate PDF
!p "range"    : sets r range for PDF calculation 
!p "refine"   : sets which parameters are fined in an RMC cycle
!p "rdensity" : sets rho0 correction factor manually (see "density")
!p "scal"     : sets scale factor and refinement flag (see RMC level)
!p "shape"    : sets particle shape parameter for finite objects
!p "sigm"     : sets SIGMA for CHI2 calculation (see RMC level)
!p "srat"     : sets sharpening of low r peaks (Gaussian mode only)
!p "therm"    : toggles the convolution with thermal Gaussian
!p "weight"   : sets weight correction factor for finite objects
4  bound
!p set "bound","periodic" [,{"2D" | "3D"}]
!p set "bound","crystal" [,{"quick" | "exact"}]

   This command allows the user to select whether periodic boundaries
   should be applied or not. In case of "periodic", periodic boundaries
   will be applied and the optional third parameter will determine
   whether periodic boundaries are applied in all directions ("3D")
   or only in those direction of the crystal that extends over more 
   than a single unit cell ("2D"). The default is "3D". Note that in
   case of periodic boundaries, the calculation mode is always unit
   cell requiring the proper order of atoms in memory (i.e. no purge).
   If periodic boundary conditions are used, finite spherical objects
   can still be simulated by the use of ==> "set finite,sphere,<diameter>.

   The parameter "crystal" disables periodic boundaries. In this case
   the last optional parameters selects the calculation mode. The 
   parameter "quick" will result in only neighboring unit cells being
   included again relying on the correct order of atoms in memory. The
   value "exact" will include all atoms making the calculation much
   slower, but it will work independent of the atom order, e.g. after
   a 'purge' command or with an arbitrary structure not generated by
   DISCUS. If periodic boundary conditions are not used, the background 
   line -4 pi rho r should be corrected by parameters defined by
   ==> "set finite".
4  corrlinear
!p set "corrlinear",<g>

   If the Gaussian convolution mode (-> set therm) is used, the PDF
   peak width will be modified by the term - g/r. This linear
   dynamic correlation factor <g> is specified with this command. A
   value of 0.0 will turn off this correction.

   Identical to "gamma"
4  corrquadratic
!p set "corrquadratic",<d>

   If the Gaussian convolution mode (-> set therm) is used, the PDF
   peak width will be modified by the term - d/r**2. The quadratic
   dynamic correlation factor <d> is specified with this command. A
   value of 0.0 will turn off this correction.

   Identical to "delta"
4  delta
!p set "delta",<d>

   If the Gaussian convolution mode (-> set therm) is used, the PDF
   peak width will be modified by the term - d/r**2. The quadratic
   dynamic correlation factor <d> is specified with this command. A
   value of 0.0 will turn off this correction.

   Identical to "corrquadratic"
4  density
!p set "density", [<rho0> | "auto"]
!p set "rdensity", [<rho0> | "auto"]

   This commands allows to specify a user defined number density
   <rho0>, e.g. in cases where no unit cell is defined. To use the
   number density determined by the unit cell volume, simply use
   the parameter "auto" (default). The command "rdensity" works in the 
   same way, except <rho0> is treated as a factor for the calculated
   rho0 value.
4  diameter
!p set "diameter",<diameter>

   This commands allows to specify a user defined particle 
   diameter that is used in combination with the finite size
   treatment ==>"set finite,tanh"
4  finite
!p set "finite", {"periodic"| "poly",<diameter> | "sphere",<diameter> | "tanh"}

   This commands defines how to deal with finite particles.
   Since their PDF does not contain distances beyond the diameter,
   the background line -4Pi Rho0 r must be corrected.

   "periodic"
   The program is instructed not to apply a correction. The crystal
   is periodic. Also, use ==> "set bound,periodic".

   "poly",<diameter>
   A polynomial function of order N is used to correct the -4Pi Rho0 r
   line. See ==> "set poly" for the corresponding parameters.
   The -4Pi Rho0 r line is set to zero for distances longer than the 
   diameter.

   "sphere",<diameter>

   The effect of this setting depends on the periodic boundary flag.
   If periodic boundaries are chosen, the 'periodic' g(r) is
   multiplied by the shape function of a sphere of diameter <diameter>.
   f = 1 - 3/2 r/diameter + 1/2 (r/diameter)**3
   For r > diameter g(r) is set to zero.

   If periodic boundaries are disabled, only the -4Pi Rho0 r line 
   is multiplied by the shape function of a sphere of diameter <diameter>.
   f = 1 - 3/2 r/diameter + 1/2 (r/diameter)**3
   For r > diameter the background line is set to zero.

   "tanh"
   A tanh function is used to correct the -4Pi Rho0 r line. 
   See ==> "set diameter" and "set shape" for the corresponding 
   parameters.


   The only settings that may be used if the boundaries are set to
   periodic, are "periodic" and "sphere".
4  frange
!p set "frange",<rmin>,<rmax>

   This command sets the range in "r" that will be used for the
   refinement. The range of the PDF that will be saved using the 
   command 'save' is also determined by these settings.
4  gamma
!p set "gamma",<g>

   If the Gaussian convolution mode (-> set therm) is used, the PDF
   peak width will be modified by the term - g/r. This linear
   dynamic correlation factor <g> is specified with this command. A
   value of 0.0 will turn off this correction.

   Identical to "corrlinear"
4  partial
!p set "partial","internal"
!p set "partial",<a1>,<a2>,<w>

   This command allows one to specify the weight <w> for each partial
   from atoms <a1> and <a2>. This can be used in conjunction with the
   program MIXSCAT to calculate the correctly weighted differential 
   PDFs from a model. If the second parameter is "internal", the weights
   are calculated from the scattering lengths of the elements (default).
4  poly
!p set "poly",<p1> [,<p2>...]

   This command allows to set the parameters of a polynomial
   function that is used in combination with the finite size
   treatment ==>"set finite,poly".  The background line
   -4 pi rho r is modified by subtracting this polynomial:
   -4 pi rho r - p1*r**1 - p2*r**2 - p3*r**3 - p4*r**4 - p5*r**5
   The order of the polynomial is defined by the number of parameters
   given, which can be at most equal to five.

   Notice that the polynomial starts with the linear term and does
   not contain a term p0*r**0 !
4  qalp
!p set "qalpha",<alpha>

   PDF peaks are broadened at large values of r due to the instrument
   resolution of the measurement. This command sets the parameter
   <alp> controlling the broadening which has the functional form
   <alp>**2 * r**2.
   Identical to "qbroad"
4  qbroad
!p set "qbroad",<qbroad>

   PDF peaks are broadened at large values of r due to the instrument
   resolution of the measurement. This command sets the parameter
   <qbroad> controlling the broadening which has the functional form
   <qbroad>**2 * r**2.
   Identical to "qalpha"
4  qmax
!p set "qmax",<qmax>

   Since we can only measure the scattering up to a maximum value
   in Q, the resulting PDF will show termination ripples. In order to
   account for these, termination ripples can be calculated for the
   computed PDF. In order to do this the actual maximum Q value 
   <qmax> in A**-1 must be entered. If the value is zero NO termination
   correction will be applied.
4  qdamp
!p set "qdamp",<qdamp>

   This allows to enter a value <qdamp> for the correction of the
   limited resolution of the experiment. This results in a dampening
   of the G(r) function with increasing values of r. Again if the
   entered value is zero, no correction will be applied.
   Identical to "qsigma"
4  qsigma
!p set "qsigma",<qsig>

   This allows to enter a value <qsig> for the correction of the
   limited resolution of the experiment. This results in a dampening
   of the G(r) function with increasing values of r. Again if the
   entered value is zero, no correction will be applied.
   Identical to "qdamp"
4  rad
!p set "rad","neutron"
!p set "rad","xray" [,<qx>]
!p set "rad","electron" [,<qx>]

   This command selects the radiation used to calculate the PDF.
   The weighting factor for each atom pair is B(i)*B(j)/<B**2>.
   In case of neutrons ("neutron"), the values B(i) are simply
   the scattering length of the individual elements. For Xrays
   ("xray"), or electrons ("electron") the situation is more 
   complicated since the scattering
   power varies as a function of Q. As an approximation the 
   scattering power at a give Q value <qx> in A**-1 is used. The
   value <qx> can be taken as zero (default) in which case the
   number of electrons determines the weight. One other common
   way is to use the Q of the first peak in the diffraction pattern.
4  range
!p set "range",<rmax>,<dr>

   This command allows to set the maximum r and the step width used
   to calculate the PDF. Note that if observed data are used, these
   values are set to the corresponding values of the actual data file.
   All values are entered in units of A.
4  shape
!p set "shape",<shape>

   This commands allows to specify a user defined particle 
   shape parameter that is used in combination with the finite size
   treatment ==>"set finite,tanh"
4  srat
!p set "srat",<rat>,<rcut>

   This command allows the user to sharpen PDF peaks below a value
   of r=<rcut> by a factor of <srat> (usually < 1.0). Note that this
   will effect only calculations using the Gaussian mode (-> set therm).
4  therm
!p set "therm", {"off" | "gauss"}

   This command allows the user to select between two calculation
   modes. If the parameter "gauss" is given, the contribution of each
   atom pair to the PDF is convoluted with a Gaussian. The width of
   this Gaussian is given by the individual thermal parameters B. 
   If "off" is used, the contribution is a single "delta" type function.
4  weight
!p set weight,<weight>

   Allows you to correct the weight factor used to multiply g(r) 
   before adding it to -4pi rho0 r. For infinite objects this should
   be left at the default value of one. For finite objects or in case
   of uncertainties in the chemical composition it may differ.
3  show
!p show [{"all" | "pdf" | "mode" | "atom"}]

   This command shows the various settings. If the command is entered
   without further parameters, the PDF settings are shown similar
   to the situation when the parameter is "pdf". The parameter 
   "mode" results in the output of the current RMC mode. Note that
   some settings are listed that are not used by the PDF RMC refinement.
   The parameter "atom" corresponds to the listing of parameters like
   selected atoms, sizes of moves and minimal allowed distances between
   atom types. Finally the parameter "all" will cause all settings
   to be printed on the screen.
2  perioditize
!p perioditize

   Switches to the periodititzer menu. The task in this menu attempts
   to rearrange a structure to be periodic and to be in the standard
   DISCUS sequence. Additional "VOIDs" might be introduced to fill 
   the empty sites in a unit cell

   Further help topics are:
3  rese
!p rese

   Reset the menu to start-up conditions.
3  run
!p run

   Start the task at hand.
3  set
!p set

   Guide the perioditizer by setting:
   The expected number of unit cells
   The expected number of atoms per unit cell
   The expected positions within the unit cell
4  ncell
!p ncell {"auto" | <nx>, <ny>, nz>}

   Set the number of unit cells, either explicitely with <nx>, <ny>, nz>
   or to be determined automatically with "auto"
4  natoms {"auto" | <natom>}

   Set the number of atoms per unit cells, either explicitely with <natoms>
   or to be determined automatically with "auto"
4  site
!p site atoms:[<names>], pos:[<x>,<y>,<z>] 
!p      {, number:<value>}
!p      {, number:"next"}

   Set which atoms are allowed at a site with coordinates pos.
   Both parameters are required.
   atoms:[<names>]    Requires a comma delimited list of atom names or
                      atom type numbers
   pos:[<x>,<y>,<z>]  Requires a comma delimited position within the 
                      unit cell.

   number:<value>     Apply the settings to this site number
   number:next        Apply the settings to the next free site
4  wyck
!p wyck atoms:[<names>], pos:[<x>,<y>,<z>]

   Set which atoms are allowed at a Wyckoff site with coordinates pos.
   Both parameters are required.
   atoms:[<names>]    Requires a comma delimited list of atom names or
                      atom type numbers
   pos:[<x>,<y>,<z>]  Requires a comma delimited position within the 
                      unit cell.

   All symmetrically equivalent sites are generated for 
   the current space group!
3  show
!p show

   Show the current settings.
2  plot
!p plot

   Switches to the structure plotting sub menu. The structure can be 
   written in a format suitable for plotting by several structure plotting
   programs such as KUPL, GNUPLOT, DIAMOND; ATOMS.

   In particular a simplified CIF file can be written, which can be 
   displayed by many different programs..

   Further help topics are:

3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p absc    ! Defines the abscissa of the plot
!p asym    ! Lists the content of the asymmetric unit
!p back    ! Selects the plot background for JMOL
!p bond    ! Selects the bond plotting style
!p chem    ! Lists all type of atoms present in the crystal
!p col     ! Defines the sequence in which the xy and z coordinates are written.
!p continue! Continue a stopped macro (see main help level)
!p des     ! Deselects atoms 
!p echo    ! Echos a string, just for interactive check (see main help)
!p exit    ! Terminates the plot sub level, returns to the main DISCUS level.
!p ext     ! Sets the extend of crystal space to be plotted
!p help    ! Gives on-line help for 'plot' (see main help)
!p hkl     ! Sets reciprocal space direction normal to plot slice
!p line    ! Draw a line into a "Jmol" plot
!p ordi    ! Defines the ordinate of the plot
!p outfile ! Name of output file to which the structure is written
!p poly    ! Selects the polyhedron plotting style 
!p prog    ! Selects the plotting program
!p prop    ! Selects the atom properties, which will be checked
!p reset   ! Reset and clear all definitions
!p run     ! Starts writing of the structure
!p sel     ! Selects which atoms are to be included in the plot
!p set     ! Sets type, color and size of atom in plot file
!p show    ! Shows settings for the plotting parameters
!p thick   ! Sets the half thickness of the plot slice
!p uvw     ! Sets direct space direction normal to plot slice
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p type    ! Sets type of output - crystal or unit cell projection
!p wait    ! Waits for user input (see main help)
!p vec     ! Sets a point inside plot slice
3  absc
!p abscissa <x>,<y>,<z>

   Defines the abscissa of the plot.
   Instead of using the atom coordinates with respect to the crystallographic
   axes, the atoms are transformed into the system based on the abscissa,
   the ==> 'ordinate' and the normal to the plot slice ==> 'uvw', 'hkl'.
   Use these commands to plot the projection onto any plain other than the
   xy-, xz- or yz-plane.
3  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  back
!p back <r>, <g>, <b>

   Sets the background color for a JMOL plot.
   Valid RGB values are in the range [0:255]
3  bonds
!p bonds { "all" | <name> | <number> } ,{ "all" | <name> | <number> },
!p       <rmin>, <rmax>, <diameter>, { <gray> | <r>,<g>,<b>}

   Defines which bonds the plotting program JMOL / XBS will draw. This 
   command does not affect the other plotting programs.
   Choose the pairs of atoms to be connected by bonds. Bonds that
   fall into the interval <rmin> to <rmax> are plotted. The thickness
   of the bond is set to <diameter>. You can specify the bond color
   as either a gray value in the range [0 - 1] or an RGB triplet.
3  chem
!p chem

   Shows the type of all atoms present in the crystal. For each
   different atom present, its identifying number, its name and its
   temperature coefficient are listed. The list contains all the atoms
   in the asymmetric unit plus any atoms added to the structure. If
   atoms are removed from the structure, the program does not check
   whether there are any atoms of this type left. If a particular type
   of atom is completely removed from the structure, it will remain in
   the list of different atoms, and will be displayed by 'chem'.
3  col
!p col { "xyz" | "yzx" | "zxy" | "zyx" | "yxz" | "xzy" }

   Defines the sequence in which the xy and z coordinates of the atoms
   are written.
   If the 'prog' "gnuplot" is used, this will allow the user to view the
   structure from different directions.
   For "kupl" this will give projections of the structure along the last
   direction.

   If you plot the projection along a vector selected by ==> 'uvw', 'hkl'
   the interpretation of the coordinate triplets takes a different 
   meaning:
     x represents the coordinate along the ==> abscissa
     y represents the coordinate along the ==> ordinate
     z represents the coordinate along the ==> 'uvw' direction
   The coordinates are, in this case, written as:
         1.coordinate   2.coordinate   3.coordinate
   xyz   abscissa       ordinate       uvw     
   zxy   uvw            abscissa       ordinate
   yzx   ordinate       uvw            abscissa
   yxz   ordinate       abscissa       uvw     
   xzy   abscissa       uvw            ordinate
   zyx   uvw            ordinate       abscissa

   For "xyz" the plot will show the projection along uvw onto the plane
   of the abscissa and ordinate.
   For "zxy" the plot will show the projection along the ordinate onto
   the plane of the uvw-direction and the abscissa. etc.

   Since the thickness of the slice will often be limited by the 
   ==>'thick' command, the sequence 'xyz' would be the most useful one.

3  des
!p dese { "all" | <name> | <number> } [ , <name> | <number> } ... ]

   Deselects the atoms.

!p "all"     All atoms are deselected, no atom will be plotted.
!p <name>    Only the atom specified by <name> is deselected.
!p <number>  Only the atom specified by the scattering type <number> is
!p           deselected.

   More than one atom can be deselected by the command.
3  ext
!p ext { "all" | "x",<xmin>,<xmax> | "y",<ymin>,<ymax> | "z",<zmin>,<zmax> }

   Sets the extend of crystal space to be plotted.

!p "all"   The whole crystal is written to the plot file.
!p "x"     The extend along the x direction is limited to (including)
!p         <xmin> and <xmax>.
!p "y"     The extend along the y direction is limited to (including)
!p         <ymin> and <ymax>.
!p "z"     The extend along the z direction is limited to (including)
!p         <zmin> and <zmax>.

   If any of the parameters "x","y","z" is used, the extend along the 
   other directions is not changed, even if previously set with the "all"
   command.
3  hkl
!p hkl <h>,<k>,<l>

   Sets the reciprocal space direction normal to the plot slice. The
   corresponding direct space direction ==> 'uvw' is calculated 
   automatically.
   If <hkl> is set to "000", all atoms are plotted, otherwise all
   atoms are written to the output file, if they are within a slice
   normal to the <hkl> (and <uvw>) direction. The thickness of the plot
   slice is defined by the ==> 'thick' command, while the ==> 'vec' command
   defines a point that represents the center of the slice.
   Further restrictions on the atoms to be included can be applied by
   the ==> 'sel' and the ==> 'exte' commands.
3  mdes
!p mdes { "all" | <number> } [ , <number> ...]

   This command deselects all or individual molecule types used for
   the plotting output.
3  mole
!p mole { "all" | "origin" }
  
   This command allows the user to specify whether all ("all") atoms
   of a molecule should be used in the plot or only the origin 
   ("origin") of the molecule should be used.
3  msel
!p msel { "all" | <number> } [ , <number> ...]

   This command allows to select the molecule types to be used for
   the plotting output. By using 'msel' the atom selection becomes
   invalid. The parameter "all" will select ALL molecule types.
   Alternatively individual molecule types can be selected using the
   corresponding <number>. In order to use atoms again, use the 'sele'
   command.
3  line
!p line number:{<value>}, start:[<u>,<v>,<w>], end:[<u>,<v>,<w>]
!p line number:{"next" }, start:[atom,<index>], end:[atom,<index>]

   This command will draw a line into a "JMOL" plot. Since several
   lines can be drawn, you can refer to a fixed line number <value>
   especially if you want to modify an existing line. Usually the
   easiest will be to specify "number:next" to draw another line.

   The line start and end point are at 0,0,0 by default. If the 
   optional start / end parameters are given, the line will use these
   points <u>,<v>,<w>, or the coordinates of the atoms specified by
   its index.
3  ordi
!p ordinate <x>,<y>,<z>

   Defines the ordinate of the plot.
   Instead of using the atom coordinates with respect to the crystallographic
   axes, the atoms are transformed into the system based on the ==> 'abscissa',
   'ordinate' and the normal to the plot slice ==> 'uvw', 'hkl'.
   Use these commands to plot the projection onto any plain other than the
   xy-, xz- or yz-plane.
3  outfile
!p outfile <filename>

   Sets the name of the output file to which the structure is written.
3  poly
!p poly "off"
!p poly <center>, <neighbor> 
!p      [, "nmin:"<nmin>], [, "nmax:"<nmax>]
!p      [, "dmin:"<dmin>], [, "dmax:"<dmax>]
!p      [, "face:"<style>], [, "hue:"<style>], [, "color:"<color>]

  Sets the definitions for plotting polyhedra in an interactive plot.
  Currently only an interactive plot with JMOL is supported.
  The command ==> 'run plot:inter' gives the details how to start an
  interactive plot session.

!p "off"      Turn off any polyhedra.
!p <center>   Specifies the central atom type(s). 
!p <neighbor> Specifies the neighboring atom type(s). 
!p          A single central / neighbor atom type may be specified
!p          as its atom name, for example Si.
!p          To specify several choices as central atom type, place 
!p          the list in single quotation marks: 'Si, Al'

   The optional parameters are:

!p "nmin:"  Minimum number of neighboring atoms for the polyhedron
            Defaults to zero or value of "nmax:" if "nmax:" is present
!p "nmax:"  Maximum number of neighboring atoms for the polyhedron
            Polyhedra will be plotted if the central atom has a 
            number of neighbors in the range nmin to nmax.
            Defaults to "nmax:0"
            If neither is specified, JMOL uses the bonds from the 
            'bond' command or the range from "dmin:" to "dmax:".
!p "dmin:"  Minimum distance of neighboring atoms
            Defaults to "dmin:0.0"
!p "dmax:"  Maximum distance of neighboring atoms
            Defaults to "dmax:0.0"
            If "dmin", "dmax:" are given, they effectively 
            override the connectivity specified by a 'bond' command. 
!p "face:"  {"flat" | "collapsed"} 
!p          Plot the polyhedra with flat or collapsed faces.
!p "hue:"   {"solid" | "trans"} 
!p          Plot the polyhedra with solid or transparent faces.
!p "col:"   {"auto" | <color_name>}
!p          Plot the polyhedra with the color of the central 
!p          atom =="auto" or a user defined JMOL color.
3  prog
!p prog { "gnuplot" | "kuplot" | "atoms" | 
!p        "xbs" | "frames" [,"append" | "init"] |
!p        "diamond" | "jmol" | "drawxtl" |
!p        "cif" }

   Selects the plotting program for which the output is to be formatted.

!p "gnuplot"  The xyz coordinates of all selected atoms are written in the
!p            sequence defined by the ==> 'col' command. 
!p "kuplot"   The xyz coordinates of all selected atoms are written in the
!p            sequence defined by the ==> 'col' command. A projection of the
!p            structure along the third direction of the 'col' parameter is
!p            plotted. The file contains the type, color and size code set
!p            with the ==> 'set' command. Use 'load cr,<file>' to read the
!p            file with KUPLOT.
!p "atoms"    The coordinates are written in a format that can be imported
!p            in ATOMS using the 'import - free format' option. In order
!p            to trick ATOMS into displaying the complete crystal, a 
!p            new unit cell with the size of the crystal is used and the
!p            space group is set to P1.
!p "xbs"      The coordinates are written in the input format for XBS.
!p            All atoms are automatically transformed into Cartesian
!p            space. Cartesian b axis is parallel to the crystal b axis,
!p            the Cartesian c axis is parallel to the crystal c* axis,
!p            and the Cartesian a axis is normal to b and c*, right-handed.
!p            The atom color are set with ==> 'set', the bonds that 
!p            will be plotted are set with ==> 'bonds'.
!p            The scale is set automatically, the initial viewing
!p            direction is along the ==> 'uvw' or 'hkl', the 
!p            initial abscissa is along ==> 'abs'. The abscissa you 
!p            specify is projected into the plane normal to the 'uvw'
!p            direction. You do not have to worry about the angle,
!p            as long as it is not equal to zero degrees.
!p "frames"   A movie file in the format of XBS is written to the
!p            output file.
!p            Remember to change the output file name to consist of an 
!p            identical base as had been used for the main XBS output.
!p            If the optional second parameter is "init", the frame file
!p            is initialized.
!p            If the second parameter is "append", or if no
!p            second parameter is given, the current atom positions
!p            are added to the existing file. If the file does not 
!p            exist, it is created. 
!p "diamond"  The coordinates are written as the DIAMOND XYZ file type.
!p            space. Cartesian b axis is parallel to the crystal b axis,
!p            the Cartesian c axis is parallel to the crystal c* axis,
!p            and the Cartesian a axis is normal to b and c*, right-handed.
!p            All atoms are automatically transformed into Cartesian
!p            space. Import the file into DIAMOND by opening the file
!p            under the 'file' menu. Use file type 'XYZ'. Display all 
!p            atoms using the "Add all Atoms" switch in the "Structure"
!p            menu.
!p            Caution, if only a partial crystal is written, the number
!p            of atoms is currently wrong. Use a "cif" format instead.
!p "jmol"     The coordinates are written as the JMOL XYZ file type.
!p            space. Cartesian b axis is parallel to the crystal b axis,
!p            the Cartesian c axis is parallel to the crystal c* axis,
!p            and the Cartesian a axis is normal to b and c*, right-handed.
!p            All atoms are automatically transformed into Cartesian
!p            space. Import the file into JMOL by opening the file
!p            under the 'file' menu. Use file type 'XYZ'. Display all 
!p            atoms using the "Add all Atoms" switch in the "Structure"
!p            menu.
!p            Caution, if only a partial crystal is written, the number
!p            of atoms is currently wrong. Use a "cif" format instead.
!p "drawxtl"  The atoms are written in a format to be read by DRAWXTL.
!p "cif"      This creates a CIF file from the selected atoms. All
!p            coordinates are converted to a single unit cell.
!p
!p            Use this output format for Atoms, Diamond, or JMOL as well.
3  prop
!p prop {"ignore"|"present"|"absent"} , <property> [, <property> ...]

   Defines which properties an atom must have to be included in the plot.

   "ignore"
   The properties listed will be ignored. An atom will be included in
   the plot regardless, whether it has the properties or not, 
   "present"
   An atom must have the properties listed, to be included in the plot
   "absent"
   An atom is not allowed to have the properties listed.

   The properties can be one of:
   "all"
   Apply the rule to all properties.
   "normal"
   The rules apply if an atom is a normal atom (not a void)
   "molecule"
   The rules apply if an atom is part of a molecule
   "domain"
   The rules apply if an atom is part of a domain
   "outside"
   The rules apply if an atom is outside of the crystal. This status
   is set if the atom has been cut off by a ==> 'boundary' command.
   "external"
   The rules apply if an atom is close to an external surface, either
   on the inside or on the outside. 
   The flag is set by the ==> 'boundary' command. Individual distances
   to the boundary can be set within the ==> 'surface' menu through
   the ==> 'surface/fuzzy' command.
   "internal"
   The rules apply if an atom is close to an internal surface, either
   within the host or within the guest structure. 
   The flag is set by placing a guest structure into the crystal through
   the ==> 'domain' menu. Individual distances
   to the boundary can be set within the ==> 'domain' menu through
   the ==> 'domain/fuzzy' command.
3  reset
!p reset

   Reset all plot definitions back to the default values at 
   system start. 
3  run
!p run  ["plot:inter"] [, "geom:"[<px>,<py>]]
        [, "kill:"["yes"|"no"]] [,"keep:"["yes"|"no"]]

   Starts writing of the structure. If no output file name has been provided
   or no atoms been selected, an error message is given.

   If the plot progamm was selected as "jmol", you can start an 
   interactive plot session with the optional parameter "plot:inter".
   It may take a while for JMOL to open, you might want to add a 
   ==> 'wait return' command after the 'run' command.

   The default jmol window size is 500 by 500 pixels. You can change this
   via the optional "geom" parameter.

   If previous instances of "JMOL" are to be terminated prior to the
   new plat provide the optional parameter "kill:yes".
   On a Linux type operating system processes "jmol" are killed, 
   on Windows processes "java" will be killed. Be careful if other
   java programs are active! The intention is to kill only processes
   started by DISCUS.

   At program end, DISCUS will kill all Jmol windows that were opened
   by this DISCUS. If you need to preserve these, use the optional
   "keep:yes" parameter.
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Defines which atoms are included in the output. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   The selection made stay valid until explicitly deselected!
3  set
!p set { <name> | <number> }, <type>,<col>,<size>
!p set { <name> | <number> }, <type>,<r>,<g>,<b>,<size>

   This command allows to set the marker type <type>, its color <col>
   and size <size> for the given atom or molecule. In case of atoms, 
   the input can be given by its name <name> or scattering type number 
   <number>. For molecules only <number> as the molecule type is a valid 
   input. The resulting file will contains the coordinates of the atom 
   and type, color and size in a row. This file can be read by KUPLOT 
   using the command

!p    load cr,<file>

   The possible values for <type> are:

!p   0 : no marker       5 : filled square    10 : line (/)
!p   1 : dot             6 : empty triangle   11 : line (\)
!p   2 : empty circle    7 : cross (x)        12 : line (-)
!p   3 : filled circle   8 : cross (+)        13 : vertical line
!p   4 : empty square    9 : line (|)              from y-axis

   The possible values for the colors <col> are:

   The allowed color values <icol> are:

!p   1 : red       5 : yellow        9 : dark blue      13 : cyan
!p   2 : green     6 : black        10 : dark magenta   14 : dark cyan
!p   3 : blue      7 : dark red     11 : dark yellow    15 : white (!)
!p   4 : magenta   8 : dark green   12 : gray

   The size of the markers <size> is given relative to the marker
   size set in the plot program KUPLOT, i.e. a value of 1.0 will 
   result in the full marker size whereas 0.5 will reduce the size
   by 50%. 

   If you are using 'gnuplot' as program type (-> 'prog') the settings
   will be ignored.

   If you are using the XBS program, the color can be represented 
   as an RGB triplet. If you give one value only, it is interpreted
   as gray shade in the range [0-1].
3  show
!p show

   Shows the settings for the plotting parameters.
3  thick
!p thic <value>

   Sets the half thickness of the plot slice in Angstrom.
   All atoms are written to the output file, if they are within a slice
   of thickness 2*<value> that contains the direct space point defined
   by ==> 'vec' and is normal to the direction defined by ==> 'hkl' or 'uvw'.
   Further restrictions on the atoms to be included can be applied by
   the ==> 'sel' and the ==> 'exte' commands.
3  title
!p title <title>

   A string is read, which is used as title for the current frame of an
   XBS ==> 'prog frame' frame series.
3  uvw
!p uvw <u>,<v>,<w>

   Sets the direct space direction normal to the plot slice. The 
   corresponding reciprocal space direction <hkl> is calculated 
   automatically.
   If <hkl> is set to "000", all atoms are plotted, otherwise all
   atoms are written to the output file, if they are within a slice
   normal to the <uvw> (and <hkl) direction. The thickness of the plot
   slice is defined by the ==> 'thick' command, while the ==> 'vec' command
   defines a point that represents the center of the slice.
   Further restrictions on the atoms to be included can be applied by
   the ==> 'sel' and the ==> 'exte' commands.
3  type
!p typ { "crystal" | "projection" }

   This command switches between to plot modes. The type "crystal" will
   write the atom coordinates of the selected (-> 'sele') atoms on a 
   file. The type "projection" will remove the translation and all atoms
   will be projected in a single unit cell. The second type can be read
   with KUPLOT using 'load cr,<file>' or 'load de,<file>,<dx>,<dy>'.
   See the KUPLOT online help for more details on the different file
   formats.
3  vector
!p vec <v1>,<v1>,<v3>

   Sets the vector that represents the center of the plot slice.
   All atoms are written to the output file, if they are within a slice
   that is normal to the <hkl> (and <uvw>) direction and contains the 
   direct space vector <v1 ,v2, v3>. The thickness of the plot
   slice is defined by the ==> 'thick' command, while the ==> 'vec' command
   defines a point that represents the center of the slice.
   Further restrictions on the atoms to be included can be applied by
   the ==> 'sel' and the ==> 'exte' commands.
2  powder

   Switches to the powder diffraction sub level of DISCUS. 

   Two modes are used, the Debye scattering equation algorithm and a 
   complete integration of reciprocal space.

   The Debye mode is best suited for nanoparticles, as size effects
   are automatically taken into account. It becomes quite slow for 
   large crystals.

   The complete integration is best suited for large crystals, especially
   if large sections of reciprocal space are free from diffuse scattering.

3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p asym    ! Lists the content of the asymmetric unit
!p chem    ! Lists all type of atoms present in the crystal
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echos a string, just for interactive check (see main help)
!p exit    ! Terminates the plot sub level, returns to the main DISCUS level.
!p help    ! Gives on-line help for 'plot' (see main help)
!p electron! Switches to electron calculation
!p neut    ! Switches to neutron calculation
!p reset   ! Reset and clear all definitions
!p run     ! Starts writing of the structure
!p set     ! Sets Theta limits, grid in reciprocal space, ...
!p show    ! Shows settings for the plotting parameters
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
!p xray    ! Switches to electron calculation

3  electron
!p electron

   Switches to electron calculation
3  neut
!p neut

   Switches to neutron diffraction.
3  reset
!p reset

   Reset all powder definitions back to the default values at 
   system start. 
3  run
!p run
!p run          ["mode:{"single"|"multiple"}]
!p              ["current:"<number>, "fraction:"<weight_fraction>]

   Starts the calculation of the powder diffraction pattern.

   The optional arguments define the mode for multiple phases 
   versus a single phase calculation. Default behavior is that 
   of a single phase calculation.

   The powder pattern of multiple phases are scaled to correspond to
   the weight fractions of all phases that you define. 
   Currently it is the users responsibility to make sure all the
   <weight_fractions> add up to 1.0
3  show
!p show
!p show "scat", {<name> | <number> } [, {<name> | <number> }...]

   Shows the current settings relevant to the calculation of a
   powder pattern.

   The second form shows the scattering curve of the selected atom types,
   which may be given as the scattering number of as the element name.

   The values for the scattering curve are stored into the res[] 
   variable in the order:
   a1, a2, a3, a4,  b1, b2, b3, b4, c
3  set

   Sets various parameters for powder diffraction. 

4  axis
!p set axis,{"q"|"tth"}

   Defines the units of the x-axis you intend to use. 
   "q"    The units are in q=2PI h = 2pi dstar = 2pi 2 sin(theta)/lambda
   "tth"  The units are in 2Theta

   The internal calculations will use the corresponding limits and 
   increments.  Thus you need to match:
   <qmin>,   <qmax>,   <deltaq>  to a "q" axis
   <tthmin>, <tthmax>, <delatth> to a "tth" axis. 
4  back
!p set back, <p0> [, <p1> [,...]]

   Set parameters for a background polynomial.
4  bragg
!p set bragg, {"incl"|"excl"}

   This command applies to the full integration mode only. It 
   allows you to include (=default) the intensities of the Bragg
   reflections or to exclude these.
   Actually rarely used these days...
4  calc
!p set calc,{"compl"|"debye"}

   Defines the calculation mode. By selecting "compl" DISCUS will
   calculate the Fourier transform on a complete reciprocal lattice
   defined by ==> 'dh', 'dk', 'dl'. Alternatively, the switch "debye"
   will tell DISCUS to calculate the powder pattern by using the 
   Debye formula. For details see the user manual.
4  corrlin
!p set corrlin, <value>

   Active for PDF calculations only. 
   The parameter corrlin allows to sharpen the width of interatomic
   distances at short values with an 1/r dependence.
   sigma^2(thermal) - <value>/r
4  corrquad
!p set corrquad, <value>

   Active for PDF calculations only. 
   The parameter corrquad allows to sharpen the width of interatomic
   distances at short values with an 1/r^2 dependence.
   sigma^2(thermal) - <value>/r^2
4  delta
!p set delta,<res>

   This command allows to specify the instrument resolution <res>. The
   calculated powder pattern is convoluted with a Gaussian of the width
   of <res>. If <res> is set to zero, no convolution is carried out.

   See ==>'set profile' for a convolution by full profile function.
4  disp
!p set disp,[<switch>]

   Switches anomalous dispersion on /off. If <switch> is "anom" anomalous
   dispersion will be calculated, if the switch is omitted, no anomalous 
   dispersion is calculated.
4  dtth
!p set dtth,<value>

   The powder pattern is printed at 2-Theta steps of <value>. All reciprocal
   points are binned to a grid along 2-Theta with intervals of <value>
4  dq
!p set dq,<value>

   The powder pattern is printed at q steps of <value>. All reciprocal
   points are binned to a grid along q with intervals of <value>
4  dh
!p set dh,<value>

   The calculation is carried out in reciprocal space intervals of
   <value> long the h00 direction.
4  dk
!p set dk,<value>

   The calculation is carried out in reciprocal space intervals of
   <value> long the 0k0 direction.
4  dl
!p set dl,<value>

   The calculation is carried out in reciprocal space intervals of
   <value> long the 00l direction.
4  energy
!p energy <value>

   Defines the energy of the radiation. 
   For X-rays and electrons the value is to be given in units of keV,
   for neutrons in units of meV.
4  four
!p set four,{"four"|"stack"}

   Sets the switch for the Fourier calculation mode. 
   For all normal crystals this should be set to "four".
   If you created a crystal using the ==>'stack" menu, you can speed up
   The Fourier calculation by setting the switch to "stack". See the
   stacking fault information regarding the details of this Fourier mode.
4  ka21
!p ka21 <ratio>

   Sets the ratio of the intensities Kalpha2/Kalpha1, which is
   set by default to 0.500.
   This has an effect only if the corresponding wave length is
   defined with names like "CU12", "MO12", i.e. with the last 
   two characters equal to "12".
4  lpcor
!p set lpcor, "none"
!p set lpcor, "bragg" [,<theta_mono>]
!p set lpcor, "neutron"
!p set lpcor, "synchrotron" ,<polarisation_fraction> [,<theta_mono>]

   This command defines how the powder menu of DISCUS calculates the 
   Lorentz-Polarisation correction.

   "none"
   No correction is calculated

   "bragg" [,<theta_mono>]
   Bragg-Brentano powder diffraction geometry is set. Optionally you can
   specify the monochromator angle <theta_mono>.

   "neutron"
   A neutron powder diffractometer in Debye-Scherrer geometry is used.

   "synchrotron" ,<polarisation_fraction> [,<theta_mono>]
   A Debye-Scherrer geometry at a synchrotron source is defined.
   The polarisation fraction is required. 
   Optionally you can specify the monochromator angle.
4  period
!p set period, "off"
!p set period, <diameter>

   To calculate th PDF of an extended highly disorderd structure requires to
   calculate a powder pattern either via complete integration with a very 
   fine grid or from a finite object that is very large. 
   A good compromise is to calculate the PDF for a moderately sized spherical
   object via the Debye-Scattering-Equation. Discus will devide the resulting
   PDF by the shape function of a sphere with diameter <diameter>.
4  preferred
!p set preferred, "off"
!p set preferred, {"rietveld"|"march"}
!p set preferred, {"g1"|"damping"}, <damping>
!p set preferred, {"g2"|"portion"}, <portion>
!p set preferred, {"hkl"}, <h>,<k>,<l>

   This command enables to calculate preferred orientation effects.
   Currently they can only be used if the full integration of reciprocal
   space is used, see ==> 'set calc'

   "rietveld"
   Preferred orientation effects are calculated according to the equation:
   P(h) = portion + (1-portion)*exp(damping*alpha**2)

   "march"
   Preferred orientation effects are calculated according to the 
   modified March equation:
   P(h) = portion + (1-portion)*((damping*cos(alpha))**2+sin**2(alpha)/damping)**(3/2)

   "portion" or "g1"
   is the fraction of the powder that is not affected by preferred
             orientation

   "damping" or "g2"
   is a factor that determines how close a section of reciprocal
             space has to be oriented to the preferred axis.

   "hkl"
   Defines the preferred orientation axis in reciprocal space


   alpha**2  is the square of the acute angle between the vector h and the
             preferred orientation axis hkl. alpha is measured in degrees
4  profile
!p set profile,{"off" | "gauss" | "pseudo"}
!p set profile,"eta",<eta>
!p set profile,"uvw",<u>,<v>,<w>
!p set profile,"asym",<a1>,<b1>,<a2>,<b2>
!p set profile,"asym_l",<a1_l>,<b1_l>,<a2_l>,<b2_l>
!p set profile,"asym_q",<a1_q>,<b1_q>,<a2_q>,<b2_q>
!p set profile,"width",<width>

   Defines the instrumental profile function. 

   The powder pattern is convoluted by this profile function.

   "off"
   No convolution by an instrumental profile function is performed. 
   A side effect, the parameter of ==> 'set delta' is set to zero.

   "gauss"
   A simple Gaussian function is used as profile function with 
   sigma as set by the ==> 'set delta' command. 

   "pseudo"
   A Pseudo-Voigt function defined as eta*Lorentzian + (1-eta)*Gaussian
   is used.

   "eta"
   Defines the mixing parameter ETA for the Pseudo-Voigt function

   "uvw"
   Defines the FWHM for the Pseudo-Voigt function. The FWHM is 
   calculated as FWHM = sqrt( u*tan(2theta)**2 + v*tan(2theta) + w)

   "asym"
   The Asymmetry or the Pseudo-Voigt function is calculated according 
   to the definition as in Fullprof.

   "asym_l"
   Linear TTH/Q dependent varition of the asymmetry parameters

   "asym_q"
   Square TTH/Q dependent varition of the asymmetry parameters

   "width"
   Defines the width in multiples of the FWHM, over which the profile
   function is applied. The <width> defaults to 20*FWHM. This is a 
   reasonable compromise between cut of errors at the tail of a peak 
   and computational time.
4  refine
!p set refine, scale
!p set refine, density
!p set refine, lattice [, "a"|"b"|"c"|"alpha"|"beta"|"gamma"|

   Defines which parameters are refined during a RMC cycle.
   With the "set move" command at the RMC menu, atom positions may be
   moved. This command allowes to additionally refine:
   "scale"    The scale parameter from "set weight"
   "density"  the number density
   "lattice"  The lattice parameters, while maintaining restrictions
              imposed by the point group symmetry, or with the 
              optional parameters explicitely for a given parameter  
4  scale
!p set scale,<value>

   Sets a scale factor. The calculated powder pattern will be 
   multiplied by this scale factor. Most useful in combination
   with the background mode ==>'set back'
4  sh
!p set sh,<shift_h>

   This command applies to the full integration mode only. 
   It sets a shift of the grid on which intensities are calculated by 
   <shift_h>.
   This will allow a substantial gain in computational speed for 
   situations in which only a part of reciprocal space has to 
   be integrated. If, for example, rods of diffuse intensity have to 
   be calculated that have a finite width in reciprocal space in the 
   HK0 plane, then repeated calculations of the powder pattern with
   shift_h = plus/minus small values can be used to cover this finite
   width, while dh can be set to 1.0
4  sk
!p set sk,<shift_k>

   This command applies to the full integration mode only. 
   It sets a shift of the grid on which intensities are calculated by 
   <shift_k>.

   See ==> 'set sh' for further info.
4  sl
!p set sl,<shift_l>

   This command applies to the full integration mode only. 
   It sets a shift of the grid on which intensities are calculated by 
   <shift_l>.

   See ==> 'set sh' for further info.
4  stepr
!p set stepr,<value>

   This command applies to the Debye mode only. 
   The interatomic distances are binned to a histogram with step width
   <value>. This defaults to 0.01 Angstrom at program start.
   As the histogram array is of fixed size, this limits the maximum
   distance that debye can handle. See ==> 'show config' at the main
   DISCUS level for the Debye histogram size. The maximum interatomic
   distance is then 
   Histogram size * stepr 
4  qmin
!p set qmin,<value>

   Sets the lower limit for q.
   This must be set, if you intend to use the "Q" axis. 
   You also need to set a 2Theta-range if you want to write the output
   on a 2Theta scale.
4  qmax
!p set qmax,<value>

   Sets the upper limit for q. The powder pattern is calculated
   up to this q value.
   This must be set, if you intend to use the "Q" axis. 
   You also need to set a 2Theta-range if you want to write the output
   on a 2Theta scale.
4  qzero
!p set qzero, <value>

   Sets the zero point offset of experimental data compared to the 
   true Q scale. The value will be subtracted from the calculated Q
   values.
   If the zero point of the experimental data is at say +0.1 A^-1 
   on the absolute, true Q scale, we need to subtract this shift of
   +0.1 A^-1 from the calculated data in order to match the 
   experimental Q scale. All peaks in the output will be at a Q value
   of 0.1 A^-1 less than the true value.
4  tthmin
!p set tthmin,<value>

   Sets the lower limit for 2-Theta.
   This must be set, if you intend to use the "2Theta" axis. 
   You also need to set a Q-range if you want to write the output
   on a 2Theta scale.
4  tthmax
!p set tthmax,<value>

   Sets the upper limit for 2-Theta. The powder pattern is calculated
   up to this 2-Theta value.
   This must be set, if you intend to use the "2Theta" axis. 
   You also need to set a Q-range if you want to write the output
   on a 2Theta scale.
4  tthzero
!p set tthzero, <value>

   Sets the zero point offset of experimental data compared to the 
   true 2THETA scale. The value will be subtracted from the calculated 
   2Theta values.
   If the zero point of the experimental data is at say +0.1R°
   on the absolute, true 2THETA scale, we need to subtract this shift of
   +0.1° from the calculated data in order to match the 
   experimental 2THETA scale. All peaks in the output will be at a 2Theta 
   value of 0.1° less than the true value.
4  temp
!p set temp,<switch>

   Sets whether temperature coefficients are to be used or not.
   Valid values for <switch> are "use" and "ignore". The first
   two letters of the switch are sufficient.
4  wvle
!p set wvle,{ <name> | <value> }

   Defines the wave length to be used. Anomalous dispersion will only
   be calculated if the wave length is given as symbol.
3  xray
!p xray  [table:{"waass" | "inter"}

   Switches to X-ray calculation

   The parameterized values according to Waasmaier & Kirfel,
   ACA (1995) A51, 416-431 were added and are used as default values.
   Optional parameters table:waas or table:inter allow to 
   choose the Waasmaier or the International Tables Volume C.
2  private
!p private List_of_parameters

   In the source code you will find a template for a "private" subroutine.
   Feel free to modify this to perform your tasks at hand. 

   Keep in mind that an update will overwrite any local private.f90.
2  project
!p project <u1>,<v1>,<w1>,<u2>,<v2>,<w2> [ ,<flag> ]

   This command calculates the projection of vector <uvw 1> onto the second
   vector <uvw 2> and the projection of the first vector onto the plane normal
   to the second vector.
   The <flag> is a string of four characters that indicates whether the input
   vectors or the output vectors are given in direct or reciprocal space 
   coordinates. 

!p The four characters correspond to:

!p     first input vector,
!p     second input vector,
!p     projection of vector 1 onto vector 2,
!p     projection of vector 1 onto the plane normal to vector 2.

!p "drdd" means: vector one is given in direct space coordinates, vector 2
!p               is in reciprocal space coordinates (hkl) and the two 
!p               projections are to be given in direct space coordinates.

!p Any combination of "d" and "r" is allowed.

!p The two output vectors are stored in the result variable:

!p "res[1]","res[2]","res[3]" projection of vector 1 onto vector 2
!p "res[4]","res[5]","res[6]" projection of vector 1 onto plane normal to
!p                            vector 2
!p "res[7]"                   angle between vector 1 and vector 2
2  property
!p property

   Switches to the property menu of DISCUS.
   Here you can perform operations related to the properties of
   atoms. Such properties can be:
   N = normal,   the atom is a normal atom (instead of a void)
   M = molecule, the atom is part of a molecule
   D = domain,   the atom is part of a domain
   O = outside,  the atom is outside of the crystal
   E = external, the atom is close to an external surface
   I = internal, the atom is close to an internal surface
   L = ligand,   the atom is in a ligand molecule place by deco

   The atom properties are set at:
   reading a unit cell or structure file
   inserting a domain into a crystal
   creating an external surface 

   The atom properties are used when atoms are selected.
   The global property selection rules apply to commands:
       'replace', 'mmc', 'find env'
       The respective operations for these commands are carried out only
       if the selected atom fulfills the property selection criteria.

   Local property selection rules are used in the menus:
       'plot', 
       To apply these, use the local 'property' command within the menu.
       The local property selection criteria are valid within the menu
       only.

   Further help topics are:
3  commands
!p property  ! Define how command like replace, remove use the property
!p set/clear ! Set or clear flag for atoms
!p show      ! Show current property related settings
3  prop
!p prop {"ignore"|"present"|"absent"} , <property> [, <property> ...]
!p prop {"ignore"|"present"|"absent"} , atom:<type>, 
!p      conn:{<number>|<name>}, nmin:<number>, nmax:<number>,
!p      emin:<number>, emax:<number>, no:<entry>

   Defines which properties an atom must have to be included in 
   commands ==> 'remove' ; 'replace'

   "ignore"
            The properties listed will be ignored. An atom will be included in
            the plot regardless, whether it has the properties or not, 
   "present"
            An atom must have the properties listed, to be included in the plot
   "absent"
            An atom is not allowed to have the properties listed.

   The properties can be one of:
   "all"
            Apply the rule to all properties.
   "normal"
            The rules apply if an atom is a normal atom (not a void)
   "molecule"
            The rules apply if an atom is part of a molecule
   "domain"
            The rules apply if an atom is part of a domain
   "outside"
            The rules apply if an atom is outside of the crystal. This status
            is set if the atom has been cut off by a ==> 'boundary' command.
   "external"
            The rules apply if an atom is close to an external surface, either
            on the inside or on the outside. 
            The flag is set by the ==> 'boundary' command. Individual
            distances to the boundary can be set within the ==> 'surface' menu
            through the ==> 'surface/fuzzy' command.
   "internal"
            The rules apply if an atom is close to an internal surface, either
            within the host or within the guest structure. 
            The flag is set by placing a guest structure into the crystal
            through the ==> 'domain' menu. Individual distances to the
            boundary can be set within the ==> 'domain' menu through
            the ==> 'domain/fuzzy' command.
   "ligand"
            The rules apply if an atom is inside a ligand molecule that was 
            placed onto the surface within the ==> 'deco' menu. 

   The second form with the optional arguments allows to define 
   property like behavior based on the connectivities that must 
   have been defined for the atom(s) of type <type>.
   nmin and nmax are minimum and maximum coordination numbers that the
        atom must have for the property to be true.
   emin and emax define an interval of excluded coordination numbers.

   If you specify several properties of the second kind, the following
   rules apply:
   Any property applies only to atom types specified by "atom:"
   If an atom is not of any of the kinds specified by the "atom:"
   parameters the atom is never selected.
   If several properties are specified for a given atom type, they
   work with a logical AND. All conditions must be met for an atom
   to be selected.
   Keep in mind that the parameter "atom:O" will apply to all
   Oxygen atom types.

   Example:
   prop present, atom:si,conn:1, nmin:0, nmax:3 
   This is true only if the selected atom is of type silicon with
   zero to 3 neighbors in its current connectivity number 1. 

   Keep in mind that you may have to update the connectivity
   list for this atom type / these atom types.

   If you specify the atom by its name, the property will 
   apply to all atom types with this atom name. Alternatively
   specify the atom type number instead of the atom name as in: 
   prop present, atom:7,conn:1, nmin:0, nmax:3 !Apply to atom type 7
3  set/clear
!p set   <flag>, "types",  {"all" | <iscat> [, <iscat...]}
!p set   <flag>, "atoms",  {"all" | <start>,<end>}
!p clear <flag>, "types",  {"all" | <iscat> [, <iscat...]}
!p clear <flag>, "atoms",  {"all" | <start>,<end>}

   Set or clear the property bit for atoms of selected type or 
   for a range of atom numbers.

   The flag can be any of "domain", "outside", "external", "internal"
2  purge
!p purge ["type:"{"no"|"yes"}]

   Deletes all vacancies in the structure array, thus speeds up Fourier
   calculation.
   Due to internal calls, the result variables are changed!

   If the 'purge' command does actually remove atoms or molecules 
   from the structure array, the crystal will usually no longer be
   periodic or sorted in a fashion of contiguous unit cells that all
   have the same amount of atoms. DISCUS therefore needs to turn off
   the periodic boundary conditions and the "chem" mode "quick". 
   These can be turned back on with an explicit 
   ==> 'set crystal' command in the ==> 'chemistry' menu.

   The optional parameter allows control over the handling of atom types.
   If "type:yes" is used the list of atom type will be purged as well. 
   Any atom type for which no atom is present in the crystal will be 
   deleted. Atom type numbers for the actual atoms will change! 
   The affects all atoms whose type number is larger than 
   the deleted atom type!
2  r2d
!p r2d <h>,<k>,<l>

   This command transforms reciprocal space vector <hkl> into its corresponding
   coordinates in direct space. See "r2d" for the reverse transformation.

   The resulting vector is stored in "res[1]", "res[2]", "res[3]".

   The parallel, equivalent vector, normalized to 1/(length of [h,k,l]) 
   is stored in "res[4]", "res[5]", "res[6]"
2  read
!p read

   Branches to reading level of DISCUS. At this level a new unit cell
   or structure may be read. The old structure is lost ! If necessary
   save it with the --> 'save' command.

   The 'read' menu is an old one. After a 'cell', 'stru', 'free' 
   command DISCUS will leave the menu even without an 'exit'. 
   As of version 5.17.1 comments no longer cause an 'exit'.

   Further help topics are:

3  commands
   Valid commands at this level:

!p @       ! Execute a macro file (see main help)
!p cell    ! Reads a unit cell from file
!p lcell   ! Reads a unit cell from file (large cells)
!p echo    ! Echo a string (see main help)
!p exit    ! Exits read sub level
!p free    ! Allow free modification of a structure.
!p help    ! Help to read (see main help)
!p stru    ! Reads a file containing a whole crystal
!p wait    ! Waits for user input (see main help)
3  cell
!p cell <name> [,<nx> [,<ny> [,<nz>]]]
!p       [,"identical:"{"tolerate"|"none"}]
!p       [,"radius:"<value>]
!p       [,"occupancy:"{"clear"|"apply"|"ignore"}]

   Reads the contents of a single asymmetric unit from file <name> and
   then generates the unit cell.
   Optionally the number of unit cells along x,y,z can be given to
   generated the whole crystal. The number of unit cells default to 1.
   The unit cells are arranged symmetrically around the origin, .i.e.
   from -nx/2 to +nx/2 etc.
   After the unit cell has been read the program returns to the main
   DISCUS level.

   If the file ends in 'cell', 'stru', 'CELL', 'STRU' the standard
   DISCUS file format is assumed.
   If the file ends in 'cif', 'CIF', a CIF-file format is assumed.
   If the file ends in 'txt', 'TXT', a CMAKER-file format is assumed.

   The optional parameters define how discus will handle atoms that
   are on identical positions. This might arise for example if you
   try to describe a split position with the partially occupied
   positions close to each other. 
   If the optional parameter "identical" is set to "tolerate"
   atoms will be tolerated that are no closer than the radius 
   specified by the optional radius parameter. To tolerate
   atoms on identical positions you must set the radius to zero.
   Defaults are "none" which means DISCUS tolerates atoms 
   that are at least 1.0*10^-5Angstrom apart. 

   As of version 5.18.0 occupancies were introduced to DISCUS.
   The optional parameter "occupancy" tells DISCUS how to 
   interpret the values found in the input file. The default is
   "clear" All occupancies are reset to 1.0 and DISCUS behaves
           as prior to 5.16.0
   "apply" During the expansion of the asymmetric unit to the 
           full crystal the actual atoms are in part replaced
           by "voids" to achieve (at least approximately) the
           occupancy
   "keep"  The occupancies are kept at the values specified
           in the input file. The actual atom list will be that
           of a fully occupied crystal.
3  lcell
!p lcell <name> [,<nx> [,<ny> [,<nz>]]]

   This command is similar to -> cell, however in contrast to 'cell'
   only those atoms are treated as new atom type that have a different
   name or B value. This allows one to read large asymmetric units
   (e.g. from a protein) without creating that many different atom types.
3  free
!p free [<a>,<b>,<c>,<alpha>,<beta>,<gamma> [,<name> | <number> [, "2"]]
!p      [, setting:abc]

   No structure is read. The space group is set to "P1". The lattice
   constants are set to the optional values on the command line. 
   Default values are 1,1,1 Angstrom and  90,90,90 degrees.
   The structure does not contain any atoms.

   The optional 7th parameter allows you to set a space group for this
   empty structure. The parameter may either be the space group name or
   the space group number. This has no effect on the current structure 
   or on atoms you may insert later. It does allow you to save this
   structure and then to read it as a unit cell file. It will then be
   expanded to a full unit cell content according to the space group
   For those space groups where a second origin choice is allowed, 
   the optional eighth parameter may be set to "2" to indicate the 
   alternative origin choice.
   The last optional parameter "setting:" allows to use a non-standard
   setting within the orthorhombic space groups. 
   specify the desired setting as either of:
   abc,   bca,   cab,   acb,   cba,   bac
3  stru
!p stru <name> [, site:{"differ"|"equal"}]

   Reads a whole structure from file <name>.
   The space group information is ignored, nor is a check for consistency
   of space group and lattice constants performed.

   If the file ends in 'cell', 'stru', 'CELL', 'STRU' the standard
   DISCUS file format is assumed.
   If the file ends in 'cif', 'CIF', a CIF-file format is assumed.
   If the file ends in 'txt', 'TXT', a CMAKER-file format is assumed.
   If the file ends in 'cssr', 'CSSR', a RMCprofile-file format is assumed.

   The optional parameter "site:" determines how atoms are treated that are
   on different sites in the unit cell, but are otherwise identical. The
   default "site:equal" is to treat these as the same atom type. With the 
   option "site:differ"  these atoms are treated as separate different 
   atom types. The option is only applied, if the crystal consists of a
   total number of atoms that is an integer multiple of the number of
   atoms per unit cell.
3  exit
!p exit

   Exits the read menu, in case no 'cell', 'free', or 'stru' command 
   is used.
2  remove
!p remove <start> [, <end> ]
!p remove <start> [, <end> ] , "mole" [ ,"type", <t_start> [, <t_end>]]

   The parameters <start> and <t_start> can take one of the following values:
        { <start> | "all" | "last" }

   Removes atom(s) number <start> to <end> from the structure.

   If you use the keyword "all", all atoms are removed.
   If you use the keyword "last", only the last atom is removed.

   Internally, this command only sets the scattering type of these atom(s)
   to zero. Otherwise the atom(s) is treated as if present. Specifically,
   in the array containing the structure the sequence of atoms is not
   changed.
   For this command variation, the atoms are removed, no
   matter what their individual properties are and whether they fulfill
   the global property selection rules ==> 'property'. 
   For all atoms that are removed, the property NORMAL is turned off.

   The second form of the command removes atoms that are part of the 
   molecule(s) <start> through <end>.
   Optionally you can specify which molecule type will be removed. Only
   those molecules of a type in the range <t_start> through <t_end> will 
   be removed. The default for this option is all type of molecules.

   If you use the keyword "all", all molecule types are removed.
   If you use the keyword "last", only the last molecule type is removed.

   For all atoms that are removed, the property NORMAL is turned off.
2  replace
!p replace <index>,<at> [,<dbw>]
!p replace <at1>,<at2>,{ "all" | <site> },<prob>
!p replace <mo1>,<mo2>,"mol"
!p replace <mtyp>,<mol>,"mol",<prob>

   This command allows to replace atoms and molecules. The first two 
   variations operate on atoms. The first variation replaces the 
   atom at index <index> with atom name (or number) <at>. It the atom
   type does not already exist in the crystal, the temperature factor
   <dbw> has to be given as additional parameter. 
   For this command variation, the atom no. <index> is replaced, no
   matter what its individual properties are and whether it fulfills
   the global property selection rules ==> 'property'

   Alternatively the
   atom type <at1> can be replaced by <at2> within the complete crystal
   with a probability of <prob>. This works much (!!) faster than 
   replacing using DISCUS loops. The third parameter specifies if 
   all "all" occurring atoms of type <at1> might be replaced or just 
   those on the given site <site>.
   For this replacement by probabilities, only those atoms are included
   that fulfill the global property selection rules ==> 'property'.

   For both variations, if the atom is replaced by a void, the
   property NORMAL is turned off, if a void is replaced by another
   atom type the property NORMAL is turned on.

   The last two variations of the 'replace' command operate on 
   molecules. The third variant replaces molecule <mo1> by <mo2>. The
   positions are exchanged relative to the origin of the molecule
   (atom 1) and both molecules MUST have the same length. The last
   variation works the same way, just all molecules of type <mtyp>
   will be replaced with molecule <mol> with the given probability 
   of <prob>.
2  rmc
!p rmc

   Enter "Reverse Monte Carlo" section of discus. This part of the 
   program allows to "fit" a model atom configuration to measured
   diffuse scattering data. The difference between calculated scattering
   and observed scattering is minimized. Moves minimizing this difference
   are always accepted, other moved only with a probability of exp (-diff**2).
   
   (Nield et al., Acta Cryst A51 (1995), 763-771 for more information)
 
3  commands
   Valid commands at this sub level are:

!p @       ! Executes a macro (see main help)
!p =       ! Algebra (see main help)
!p data    ! Read experimental data for RMC fit
!p dese    ! Deselects the atom types allowed for RMC moves/switches (-> sele)
!p continue! Continue a stopped macro (see main help level)
!p echo    ! Echos a string, just for interactive check
!p eval    ! Evaluates an expression (see main help)
!p exit    ! Terminates the rmc sub level, returns to the main DISCUS level.
!p help    ! Gives on-line help for 'rmc' (see main help)
!p mdes    ! Deselects molecules
!p msel    ! Selects molecules for RMC refinement
!p rese    ! Reset RMC settings (i.e. reset plane counter)
!p run     ! Start RMC fit
!p save    ! Saves structure or intensity to given file
!p sele    ! Selects the atom types allowed for RMC moves/switches (-> dese)
!p set     ! Sets most RMC parameters
!p show    ! Show current RMC settings
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
3  data
!p data {"x-ray"|"neutron"},{<name>|<value>},<file>,<wic>,
!p      <e11>,<e12>,<e13>,<e21>,<e22>,<e23>,<e31>,<e32>,<e33>

   This command reads the experimental data stored in <file>. The parameter
   "x-ray" / "neutron" selects what kind of scattering data are stored
   in the file. The second parameter is the wavelength which can be given
   as <name> (like cua1 ..) or as value (like 1.23). After the file name
   <file> the weighting scheme to be used can be specified. The parameter
   <wic> can take the following values:

!p   "one"  : w(Int) = 1.0                "squa" : w(Int) = Int**2
!p   "sqrt" : w(Int) = SQRT(Int)          "inv"  : w(Int) = 1/Int
!p   "log"  : w(Int) = LOG(Int)           "isq"  : w(Int) = 1/SQRT(Int)
!p   "lin"  : w(Int) = Int

   All other values for <wic> are taken as the name of a file containing
   the weights. This file and the data file have to be the same type !
   Finally the three corners of the input data plane are given in the
   following order:

!p   <e11>,<e12>,<e13> : hkl's of the lower left corner
!p   <e21>,<e22>,<e23> : hkl's of the lower right corner
!p   <e31>,<e32>,<e33> : hkl's of the upper left corner

   The format of the input file is set by the 'set data' command. For more
   information about the supported data file formats see help for the
   'set data' command.

   By repeating the data command you can read several planes with 
   experimental data for the RMC fit. To start again use 
   the 'rese' command.
3  dese
!p dese { "all" | <name> | <number> }, [ ... ]

   This command deselects atom-types given either by <name> or <number> 
   for the RMC moves, i.e. 'dese' those atom-types which should not be
   moved or switched.
3  msel
!p msel { "all" | <number> } [ , <number> ...]

   This command allows to select the molecule types to be used for
   the RMC refinement. By using 'msel' the atom selection becomes
   invalid. The parameter "all" will select ALL molecule types. 
   Alternatively individual molecule types can be selected using the
   corresponding <number>. In order to use atoms again, use the 'sele'
   command.
3  mdes
!p mdes { "all" | <number> } [ , <number> ...]

   This command deselects all or individual molecule types used in
   the RMC refinement.
3  rese
!p rese { "all" }

   This command resets the RMC parameters. In this version only the
   'plane counter' is reset and the 'data' command will start reading
   plane 1 again.
3  run
!p run

   Start the RMC fit. After the run is finished, the following values
   are stored in the res[i] variables:

!p res[1] : last value of CHI2
!p res[2] : number of tried moves
!p res[3] : number of accepted 'good' moves
!p res[4] : number of accepted 'bad' moves
!p res[5] : DELTA CHI2 average during the last run
!p res[6] : DELTA CHI2 standard deviation during the last run
!p res[7] : DELTA CHI2 maximum value during the last run
!p res[8] : elapsed time / cycle in seconds
3  save
!p save <subcommand>

   This command is for saving the calculated intensities or the 
   resulting structure. Valid subcommands are:

4  lots
!p save "lots",<name>

   This command saves the current set of lot origins to the file
   named <name>. These lot origins can be used as default in subsequent
   refinement rather than creating a new set of random lots
   (-> 'set lots,..').
4  stru
!p save "stru",<name>

   This command saves the current structure to the file named <name>.
   The format is identical to the unit cell or structure file. Each
   atom is written in format A4,3(2X,F11.6),5X,F6.4. The file name
   can be created by an format string and one or more numbers -> filenames.
4  scat
!p save "scat",<plane>,<name>

   Save "scat" saves the current computed intensities of plane <plane> in
   the following format: h,k,l,skal*(a**2+b**2)+back (= intensity).
4  sym
!p save "sym",<plane>,<sym>,<name>

   Does the same as 'save scat,..', but the user can save also the resulting
   intensities of symmetric equivalent planes  by giving the number of the
   sym.-transformation (1=data corresponding to input data).
3  sele
!p sele { "all" | <name> | <number> }, [ ... ]

   This command selects atom-types given either by <name> or <number> 
   for the RMC moves, i.e. 'sele' those atom-types which should be
   moved or switched during the RMC cycles.
3  set
!p set "subcommand"

   This command allows to set most of the RMC parameters. The following
   "subcommands" are valid:

4  commands
   Valid subcommands are:

!p "aver"     ! Sets the portion of the crystal to be used for <F> calc.
!p "back"     ! Controls if background is calculated during RMC cycles
!p "const"    ! Sets possible constrains for scaling factor/background
!p "cycl"     ! Sets number of RMC cycles to be calculated
!p "data"     ! Sets data type of input/output diffuse scattering files
!p "dbw"      ! Ignore/use temperature factor
!p "disp"     ! Sets output interval
!p "log"      ! Controls if "rmc.log" will be created during calculation
!p "mdis"     ! Sets minimal allowed distances between atoms
!p "mode"     ! Sets RMC mode (relaxation/switch atoms)
!p "move"     ! Sets sigma for generated RMC shifts
!p "range"    ! Sets Q-range of data used for RMC refinement
!p "scal"     ! Controls if scaling factor is calculated during RMC cycles
!p "sigm"     ! Sets SIGMA for CHI2 calculation
!p "sym"      ! Controls if symmetric equivalent planes of input data should
!p              be used for RMC calculations.
4  aver
!p set "aver",<per>

   This command sets the portion of the crystal, that should be used to
   calculate <F>. The variable <per> is given in %. The average structure
   factor <F> is calculated and subtracted from the overall structure
   factor calculated at the beginning of the RMC refinement. Starting
   from these values the contributions of the changes atoms during the
   RMC cycles are calculated and the structure factor adjusted. There
   is no check weather <F> changes significantly during the refinement.

   To switch the use of <F> off, just set the value of <per> to zero.
   After setting the value of <per> the structure factor will be recalculated.
   This can also be used to recalculate the Fourier transform and
   the average from time to time during the RMC refinement if the
   average structure is changing.
4  back
!p set "back",{"on"|"off"},[<value>], [<plane>]

   This command controls if a background parameter should be calculated and
   used for the RMC fits. If the calculation of the background parameter
   is switched off its value can be set to <value> otherwise the default
   is 0. The second optional parameter allows to specify the plane the
   current value of <value> is set for. If the parameter <plane> is omitted,
   the value of <value> is set for ALL experimental data planes.
4  const
!p set "const",<p1>,<p2>

   This command allows to constrain the scaling factor and background
   parameter of the two input data planes number <p1> and <p2>. If 
   <p1> and <p2> are equal, no constrain is set, and the planes have
   their individual scaling factor/background. If two planes should have
   the same values for scaling factor/background, the constrain is set
   by <p1> not equal <p2>. The value of <p1> is the plane which should
   take the values for scaling factor/background of plane <p2>. Not,
   that the value of <p1> has to be smaller than <p2>. 

   If for example scaling factor/background for plane 2 should be the 
   same as for plane 1, use the command 'set const,2,1'. If there are
   more than two planes to constrain use the command several times.
   Plane 1 to 3 can be constrained by 'set const,2,1' and 'set const,3,2'.
   To unconstrain the planes again type 'set const 1,1', 'set const,2,2'
   and 'set const,3,3'.
4  cycl
!p set "cycl",<icyc>

   This command sets the number of RMC moves to be done after the 
   'run' command. Note that the number given is the actual number of
   RMC moves to be tried and *NOT* the number of RMC cycles, which
   is normally defined as the number of moves necessary to visit
   every crystal site once on average.
4  data
!p set "data",{ "nipl" | "pgm" }

   This commands sets the data type of the experimental data files used
   as input for RMC and the corresponding output files. There are currently
   two file formats supported:

!p "nipl" : An ASCII file containing the Z-values in the following format: 
!p
!p          nx ny                  ! # pixels in x- and y direction
!p          xmin xmax ymin ymax    ! Dimensions in x- and y-direction (ignored)
!p          data                   ! ny rows of nx intensity values

!p "pgm"  : PGM file (pbmplus package). In the current version, only
!p          ASCII PGM files are supported. To convert the binary files
!p          into the ASCII PGM version, use the 'pnmnoraw' program,
!p          which is part of the 'pbmplus' package.
4  disp
!p set "disp",<id>

   This command sets the update interval of the output. 
4  dbw
!p set "dbw",{"on"|"off"} [,<plane>,...]

   This command controls whether the Debye-Waller factor is ignored or
   used when the scattering amplitude is calculated. If no parameter
   <plane> is given, the setting affects ALL read data planes.
4  log
!p set "log",{"on"|"off"}

   This command controls if in the RMC main loop the screen output should
   also be logged to the file "rmc.log". This file contains only the last
   output and should give the possibility to watch the programs progress
   because cached output redirection might not update often enough.
4  lots
!p lots "off"
!p lots {"box" | "ellipsoid"},<lx>,<ly>,<lz>,<n>,{"yes" | "no"},[<fname>]

   This command allows to use the 'lot' option during the RMC refinement.
   For details about the command and its parameters see the help file
   entry for 'four lots'. 

   The optional last parameter is a file name for a file containing a
   predefined set of lot origins. This file can be created using
   'save lots,..' after a RMC refinement was carried out. If no
   file name <fname> is given, DISCUS creates a new random set of
   lots for the RMC fit.

   The advantage of using lots is the combination of a smooth calculated
   diffraction pattern as average of the Fourier transform of small 
   crystal volumes (lots). This forces RMC on a 'local' scale in real
   space without the problem of large errors and noisy patterns as for
   small crystal sizes.

   It is important to subtract the average structure factor (-> set aver)
   when using this mode even if "periodic boundary conditions" are
   fulfilled, because the Fourier transform of the lots shape needs to
   be subtracted as well as <F>. This can be done using the command
   'set aver ..'.
4  mdis
!p set "mdis",{ "all" | <name> | <number> },
!p            { "all" | <name> | <number> },<dist>

   This command sets the minimal allowed distance between two atom types
   to the value of <dist> A. A generated move will only be accepted
   if the moved atom is not closer than <dist> to the others. The 
   atom-types to be selected can be specified by either name or number or
   all atom-types can be selected by typing "all".
4  mode
!p set "mode",<prob>,
!p            { "shi[ft]" | "swc[hem]" | "swd[isp]" | "ext[ernal]" },
!p           [{ "a[ll]"   | "l[ocal]"  | "sl[ocal]" | "si[te]"     }]

   This command allows to select one of the three RMC operation modes.

   The first parameter specifies the probability for the current mode. 
   The probabilities do not have to add up to one, they will be scaled
   at run time.
   The possible modes are:

!p "shift"    : The selected atoms are displaced by a random move. The
!p              maximum size of a move can be specified via "set move .."
!p              command.
!p "swchem"   : Here two atoms are selected at random and their chemistry
!p              is switched (if the atoms are selected via "sel" command).
!p              If your structure consists of only ONE atom type this mode
!p              will just waste computer time :-)
!p "swdisp"   : Here the displacement from the average structure of two
!p              selected atoms of the SAME type are switched. The mode
!p              can only properly work, if there are initial displacements
!p              generated e.g. by the "therm" command.
!p "external" : The modification of the structure for each RMC move is done
!p              using an user supplied external subroutine. Check the
!p              source file 'extrmc.f' for details how to supply such a
!p              subroutine.

   The third optional parameter specifies if the pair of the atoms to
   be selected for the SWCHEM and SWDISP mode should be restricted in
   any way. The following settings are valid, the setting "all" is the
   default, which will be taken if no second parameter is entered.

!p "all"      : Any atom within the crystal can be chosen as second atom.
!p "local"    : Only atoms within +-1 unit cell from the first selected
!p              atom will be chosen.
!p "slocal"   : Same as "local" only the second atom must be on the same
!p              site within the unit cell as the first one.
!p "site"     : Atom on the same site in any unit cell are allowed as
!p              second atom.
!p
4  move
!p set "move",{ "all" | <name> | <number> },<sx>,<sy>,<sz>

   Sets an user defined sigma for the generates moves. The created shifts
   are Gaussian distributed. The default is a sigma of 0.2 unit cell. Note
   that the values of <sx>, <sy> and <sz> are given in unit cell units to
   speed up the RMC runs. In case molecules are selected <number> specifies
   the molecule type, otherwise atoms are addressed by their <number> or
   <name>.
4  range
!p set "range","all"
!p set "range",<qmin>,<qmax>
!p set "range",<hmin>,<kmin>,<lmin>,<hmax>,<kmax>,<lmax>

   This command allows to set a range in Q which will be used for the
   RMC refinements. This can be useful if e.g. occupational disorder
   should only be refined based on the low Q part of the input data
   whereas the displacements should be refined using the complete
   diffuse scattering data set. 

   There are 3 ways to specify the Q range: "all" will use the complete
   input data set for the fit. The Q-range can be given as <qmin>, <qmax>
   ( in reciprocal A) or as hkl's (<hmin>,...,<lmax>).
4  scal
!p set "scal",{"on"|"off"},[<value>], [<plane>]

   This command controls if a scaling factor should be calculated and
   used for the RMC fits. If the calculation of the scaling factor is
   switched off it can be set to the value given by <value>. If no value
   is given, the default is 1. The second optional parameter allows to
   specify the plane the current value of <value> is set for. If the
   parameter <plane> is omitted, the value of <value> is set for ALL
   experimental data planes.
4  sigm
!p set "sigm",<sigma>

   This command sets the value for SIGMA. CHI2 is calculated by

!p    CHI2 = SUM (Fobs-Fcalc)**2/SIGMA**2

   The value of SIGMA is important for the calculation. A too large
   value will allow nearly every move and a too small value will 
   drive the fit in the nearest local minimum. The default value is 0.01
   If the value of SIGMA is set to zero, only moved improving the fit
   will be accepted.

   For test and debug runs a setting of SIGMA to -9999. will result
   in the acceptance of ALL moves.
4  sym
!p set "sym",{"on"|"off"}

   This commands controls the use of symmetric equivalent planes to the
   read data-planes for the RMC calculations. If this flag is set to "off",
   only the experimental data are used for CHI2 calculation, if the flag
   is "on" the symmetry of the measured data is taken into account.
3  show
!p show [<subcommand>]

   Shows the current parameter settings of the RMC subsection. The following
   subcommands allow to select certain parameters of interest. The allowed
   subcommands are:

!p "all"  : show all settings (same as calling 'show' without parameter)
!p "atom" : show selected atoms, minimal distances, ...
!p "data" : show information about experimental data
!p "mode" : show general RMC calculation settings
!p "rval" : show R-values for current refinement
!p "sym"  : show information about using symmetry information of read planes
2  reset
!p reset

   Places DISCUS into the state at program start. 

   Version info:v.5.24.0 
        resets: crystal, connectivity, plot and internal storage 
2  save
!p save
!p save <name>

   Saves the current structure to file <name>

   The format is identical to the unit cell or structure file. Each
   atom is written in format A4,3(2X,F11.6),5X,F6.4

   If the 'save' command is used with one parameter, the
   parameter is interpreted as output file name. See the entry
   ==> 'filenames' under the command language entry in the main help
   section on information about valid file names and file name substitution.
   The save menu is executed using the current default values and the
   standard DISCUS prompt returns.

   If the 'save' command is used without parameter, the save menu is
   called. At this menu you can define the output format of the structure
   file, its name, which information and which atoms to include.

3  commands
   Valid commands at this level are

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p asym    ! Shows asymmetric unit
!p chem    ! Shows the atoms present in the crystal
!p continue! Continue a stopped macro (see main help level)
!p des     ! Deselects atoms
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates 'save'
!p file    ! Defines the file name to which the structure is written
!p format  ! Defines the format of the structure file
!p help    ! Gives on line help for saving the structure (see main help)
!p omit    ! Defines which information to omit from the file
!p outf    ! Defines the name of the output file
!p prop    ! Selects the atom properties, which will be checked
!p reset   ! Reset and clear all definitions
!p run     ! Starts the saving of the structure
!p sel     ! Selects atoms to be included in the structure file
!p show    ! Shows the current parameters
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
!p write   ! Defines which information to write to the file

3  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  chem
!p chem

   Displays the type of atoms present in the crystal. For each type of
   atom, its scattering curve number, its name and its temperature
   factor are listed.
   Warning, even, if all atoms of a particular type have been deleted, its 
   scattering type will remain in the list. This list could therefore 
   include more types of atoms than are actually present in the crystal.
3  des
!p des { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'sel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all atoms of the crystal are deselected.
!p <name>    all the atoms called <name> of the crystal are deselected.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are deselected.

   More than one atom may be deselected at once.
3  outfile
!p outfile <filename>

   Sets the name of the output file to which the structure is written.
3  prop
!p prop {"ignore"|"present"|"absent"} , <property> [, <property> ...]

   Defines which properties an atom must have to be included in the plot.

   "ignore"
   The properties listed will be ignored. An atom will be included in
   the saved file regardless, whether it has the properties or not, 
   "present"
   An atom must have the properties listed, to be included in the file
   "absent"
   An atom is not allowed to have the properties listed.

   The properties can be one of:
   "all"
   Apply the rule to all properties.
   "normal"
   The rules apply if an atom is a normal atom (not a void)
   "molecule"
   The rules apply if an atom is part of a molecule
   "domain"
   The rules apply if an atom is part of a domain
   "outside"
   The rules apply if an atom is outside of the crystal. This status
   is set if the atom has been cut off by a ==> 'boundary' command.
   "external"
   The rules apply if an atom is close to an external surface, either
   on the inside or on the outside. 
   The flag is set by the ==> 'boundary' command. Individual distances
   to the boundary can be set within the ==> 'surface' menu through
   the ==> 'surface/fuzzy' command.
   "internal"
   The rules apply if an atom is close to an internal surface, either
   within the host or within the guest structure. 
   The flag is set by placing a guest structure into the crystal through
   the ==> 'domain' menu. Individual distances
   to the boundary can be set within the ==> 'domain' menu through
   the ==> 'domain/fuzzy' command.
3  format
!p format {"keyword" | "nokeyword" }

   The keyword controlled format uses keywords analogous to the commands 
   of DISCUS to describe the information in the structure file. See the
   help on "data" at the main help level for a complete listing of all
   keywords. A flexible number of keywords can be included at the header
   of the structure file ==> 'write' and 'omit'.

   The non-keyword controlled format writes a simplified file that contains
   only the following information:

!p Line 1:   Title up to 80 characters
!p line 2:   Space group symbol [,origin choice number]
!p line 3:   Lattice constants a,b,c,alpha,beta,gamma

   and for each atom a line with:

!p           Name(4 characters) x  y  z  isotropic B


3  incl
!p incl { <start>,<end> | "all" }

   The unit cell transformation includes all atoms numbered <start> to <end>
   inclusively. All other atoms are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   save process will include all atoms of the crystal. This holds
   even, if at a later time you include further atoms in the crystal.
   Thus, you can define a setup for the save process early in a
   lengthy macro, then modify the crystal and just run the 
   save process later on.
   In addition you can define the atoms that are affected by the 
   save process with the ==>'sele' and 'dese' commands.
3  omit
!p omit { "all" | "generator" | "ncell" | "symmetry" | "molecule" |
!p         "object" | "scat" | "adp" | "occ" }

   The keyword controlled format includes the mandatory lines :
   title
   spcgrp
   cell
   atoms

   All other keywords are optional.

   "all"        All optional keywords are omitted from the structure
                file.

   "scat"       The list of all atom names is omitted from the structure
                file, while the status of the other keyword is not changed.

   "adp"        The list of all Atomic displacement parameters is omitted
                from the structure file, while the status of the other
                keyword is not changed.

   "occ"        The list of all occupancy parameters is omitted
                from the structure file, while the status of the other
                keyword is not changed.

   "generator"  The additional generators are omitted from the structure
                file, while the status of the other keyword is not changed.

   "ncell"      The number of unit cells and the number of atoms in each
                unit cell are omitted from the structure file, while the
                status of the other keyword is not changed.

   "symmetry"   The additional symmetry operators are omitted from the 
                structure file, while the status of the other keyword is
                not changed.

   "molecule"   Although the crystal contains molecules their type and 
                content is not written to the end of the structure file.
                WARNING: All information about molecules is lost!

   "object"     Although the crystal contains objects their type and 
                content is not written to the end of the structure file.
                WARNING: All information about objects is lost!
3  outf
!p outf <filename>

   Defines the output file name.
   If the filename starts with the string 'internal', the file is not
   written to disk but stored internally.
3  reset

   Resets the save menu to program start conditions.
3  run
!p run

   Starts the writing to the output file.
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   This command serves to select those atoms that will be included
   in the saving to the output file.

   Possible values for the first mandatory parameter are mutually
   exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection made stay valid until explicitly deselected!
3  show
!p show

   Shows the current parameters of the save menu.
3  write
!p write { "all" | "generator" | "ncell" | "symmetry" | "molecule" |
!p         "object" | "domain" | "scat" | "adp" | "occ" }

   The keyword controlled format includes the mandatory  and 
   automatically included lines :
   title
   spcgrp
   cell
   atoms

   All other keywords are optional.

   "all"        All optional keywords are written to the structure
                file.

   "scat"       The list of all atom names is written to the structure
                file.

   "adp"        The list of all atomic displacement parameters is written
                to the structure file.

   "occ"        The list of all occupancy parameters is written
                to the structure file.

   "generator"  If additional generators were read from the input file
                they will be written to the structure file as well.

   "ncell"      The number of unit cells and the number of atoms in each
                unit cell are written to the structure file. The number
                of unit cells corresponds to the parameter used for the 
                'read/cell' command. These numbers are needed for a fast
                association between atom number and its unit cell inside
                a large crystal.
                Warning!!!! If you purged "voids" from the crystal, the
                number of atoms per unit cell is no longer constant 
                throughout the crystal and no fixed association exists
                between atom number and the corresponding unit cell. 
                Use of the purge command is discouraged !!!!!!

   "symmetry"   If additional symmetry operators were read from the input file
                they will be written to the structure file as well.

   "molecule"   If the crystal contains molecules their type and content
                is written to the end of the structure file.

   "object"     If the crystal contains objects their type, content,
                and density is written to the end of the structure file.

   "domain"     If the crystal contains domains their type, character,
                and content is written to the end of the structure file.
2  seed
!p seed [ <value> ]

   Reinitializes the pseudo random generator. The seed passed to the 
   random generator is -abs(nint(value)). If the <value> is omitted,
   the random generator will be passed the number of hundredth of 
   seconds passed since midnight, essentially initializing the sequence
   at a unknown fairly random point.
2  shear
!p shear

   This command enters the deformation menu. The commands in this
   subsection allow you to apply a deformation tensor to an object 
   or to a molecule. 

   You can define the deformation tensor by providing:
   - the matrix
   - a deformation plane and the deformation vector parallel to this plane.
   - the eigenvectors and eigenvalues of the deformation tensor

   Further help is available on:
3  commands
!p calc    ! Calculate the deformation for a single vector
!p des     ! Deselect the atom types
!p eigen   ! Define the deformation through it's eigenvectors
!p hkl     ! Define the deformation plane 
!p incl    ! Include a range of atoms
!p matrix  ! Define the deformation tensor directly
!p mincl   ! Include a range of molecules
!p mdes    ! Deselect the molecule types
!p msel    ! Select molecule types
!p mode    ! Set the input mode (matrix, plane, eigenvectors)
!p oincl   ! Include a range of objects
!p origin  ! Define the origin for the deformation 
!p osel    ! Select the object types
!p odes    ! Deselect the object types
!p reset   ! Reset and clear all definitions
!p run     ! Perform the actual deformation
!p sel     ! Select the atom types
!p show    ! Show the current settings
!p uvw     ! Define the deformation plane
!p vector  ! Define the deformation vector
3  calc
!p calc <x>,<y>,<z> {,<flag>}

   Calculates the effect of the current shear on vector <x>,<y>,<z>.
   The flag is allowed to be either "d" or "r", specifying a direct
   or reciprocal vector.
   The result is displayed on screen and stored in the result
   variable "res[]". 3 values are stored, <x'>,<y'>,and <z'>. 
3  des
!p des { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'sel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all atoms of the crystal are deselected.
!p <name>    all the atoms called <name> of the crystal are deselected.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are deselected.

   More than one atom may be deselected at once.
3  eigen
!p eigen <nr>, <x>,<y>,<z> {,<value>}

   Define the direction of the eigenvector number <nr>. <x>,<y>,<z> are
   the coordinates of the eigenvector in direct space. 

   If you give the last parameter, this is interpreted as the
   corresponding eigenvalue.
   If the last parameter is omitted, DISCUS will calculated the 
   length of the eigenvector and take this as the eigenvalue.

   In both cases, the eigenvector is normalized to unit length.

   The ==> 'show' command displays the eigenvectors, the determinant
   of the eigenvector matrix, and the angles between the 
   three eigenvectors. This allows you to verify that all three 
   vectors are normal to each other.
3  hkl
!p hkl <h>,<k>,<l> [,<length>]

   Defines the deformation by providing a plane ==> 'hkl', 'uvw' and
   a deformation vector ==> 'vector'.

   'hkl' is the normal to the plane in reciprocal space coordinates.

   The object experiences a shear parallel to the plane. The 
   magnitude of the shift is defined by the deformation vector, 
   that shifts the point at the end of 'uvw' from the ==> 'origin'
   by its value =='vector'. 
   If the optional last parameter is given, the length of the normal
   ==> 'uvw' to the plane is normalized to this length, otherwise the 
   normal is taken as is. This parameter helps you e.q. in a monoclinic
   space, to apply a shift parallel to the (001) plane by specifying
   the ==> 'hkl' 0,0,1 and then giving a distance from this plane at
   which the shear vector ==> 'vector' is to act, e.g. the d-spacing 
   of the (001) planes.
   All points are shifted by an amount parallel to the deformation vector
   that is proportional to their distance from the plane. Points at 
   a distance equal to the length of 'uvw' are shifted by the vector,
   those twice as far away are shifted twice as much. Points on 
   opposite sides of the plane are shifted in opposite directions.
3  incl
!p incl {<start>,<end> | "all" | "envi" }

   The shear operation includes all atoms numbered <start> to <end>
   inclusively. All other atoms are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   shear operation will include all atoms of the crystal. This holds
   even, if at a later time you include further atoms in the crystal.
   Thus, you can define a setup for the shear operations early in a
   lengthy macro, then modify the crystal and just run the shear 
   operation later on.
   If the parameter "envi" is specified, the shear operation will 
   include all atoms in the current environment that was located by the 
   last ==> 'find env' command.
   In addition you can define the atoms that are affected by the 
   shear operation with the ==>'sele' and 'dese' commands.
3  matrix
!p matrix <11>,<12>,<13>,<21>,<22>,<23>,<31>,<32>,<33>

   This command defines explicitly the deformation tensor. All
   nine elements must be given.
3  mincl
!p mincl {<start>,<end> | "all" }

   The shear operation includes all molecules numbered <start> to <end>
   inclusively. All other molecules are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   shear operation will include all molecules of the crystal. This holds
   even, if at a later time you include further molecules in the crystal.
   Thus, you can define a setup for the shear operations early in a
   lengthy macro, then modify the crystal and just run the shear 
   operation later on.
   In addition you can define the molecules that are affected by the 
   shear operation with the ==>'msele' and 'mdese' commands.
3  mdes
!p mdes { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'msel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all molecules of the crystal are deselected.
!p <number>  all molecules of the crystal that are of type <number>
!p           are deselected.

   More than one molecule type may be deselected at once.
3  msel
!p msel { "all" | <number> } [ , <number> ...]

   This command serves to select
   those molecules that will be modified by the symmetry operation.

   Defines which molecules are included in symmetry operation. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all molecules of the crystal are included.
!p           This includes the empty molecules in the structure, which are
!p           stored as scattering curve number zero.
!p <number>  all molecules of the crystal that are of type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection of molecules by 'msel', objects by 'osel', and atoms 
   by 'sel' are mutually
   exclusive. The symmetry operation uses either atoms,objects  or molecules.
3  mode
!p mode {"eigen"|"matrix"|"plane"|"rmatrix"}

   You can tell DISCUS which input you intend to use for the 
   definition of the deformation tensor. The commands ==> 'uvw', 'hkl'
   'vector', 'matrix', rmatrix', and 'eigen' will automatically set 
   this flag as well. The last of these commands type before the final
   ==> 'run' determines the actual input mode that is assumed.
3  odes
!p odes { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'osel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all objects of the crystal are deselected.
!p <number>  all objects of the crystal that are of type <number>
!p           are deselected.

   More than one objects type may be deselected at once.
3  oincl
!p oincl {<start>,<end> | "all" }

   The shear operation includes all objects numbered <start> to <end>
   inclusively. All other objects are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   shear operation will include all objects of the crystal. This holds
   even, if at a later time you include further objects in the crystal.
   Thus, you can define a setup for the shear operations early in a
   lengthy macro, then modify the crystal and just run the shear 
   operation later on.
   In addition you can define the objects that are affected by the 
   shear operation with the ==>'osele' and 'odese' commands.
3  origin
!p origin <x>,<y>,<z> [,{"crystal"|"molecule"]

   This commands sets the origin to which the shear operation refers to.

   If you selected atoms by ==> 'sel', the last optional parameter will
   always default to an origin with respect to the crystal base system.
   The specified origin is subtracted from each atom position prior to the
   shear operation.

   If you selected molecules ==> 'msel' or objects ==> 'osel', the last
   optional parameter will be interpreted. 
   If it is set to "molecule", the origin is considered to be at vector
   <x>,<y>,<z> relative to the origin of each individual molecule or
   object. All distances within the molecule or object are sheared 
   accordingly.
   If it is set to "crystal", the origin is considered to be at vector
   <x>,<y>,<z> relative to the crystal origin. The shear operation is
   applied to the origin of each molecule or object. The molecules or
   objects are now considered to be rigid units. Thus the shear operation
   will shift all atoms or objects with the shear that is applied at their
   respective origin but will not apply a shear to the internal distances.
3  osel
!p osel { "all" | <number> } [ , <number> ...]

   This command serves to select
   those objects that will be modified by the symmetry operation.

   Defines which objects are included in symmetry operation. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all objects of the crystal are included.
!p           This includes the empty objects in the structure, which are
!p           stored as scattering curve number zero.
!p <number>  all objects of the crystal that are of type <number>
!p           are included.

   More than one object may be selected at once.

   The selection of objects by 'osel','msel' and atoms by 'sel' are mutually
   exclusive. The symmetry operation uses either atoms or molecules,
   or objects.
3  reset
!p reset

   Reset all shear definitions back to the default values at 
   system start. 
3  run
!p run

   Performs the actual deformation operation on the selected
   atom, molecule or object types.
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   This command executes serves to select
   those atoms that will be modified by the symmetry operation.

   Defines which atoms are included in symmetry operation. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection made stay valid until explicitly deselected!
3  show
!p show

   Shows the current settings.
3  uvw
!p uvw <u>,<v>,<w> [,<length>]

   Defines the deformation by providing a plane ==> 'hkl', 'uvw' and
   a deformation vector ==> 'vector'.

   'uvw' is the normal to the plane in direct space coordinates.

   The object experiences a shear parallel to the plane. The 
   magnitude of the shift is defined by the deformation vector, 
   that shifts the point at the end of 'uvw' from the ==> 'origin'
   by its value =='vector'. 
   If the optional last parameter is given, the length of the normal
   ==> 'uvw' to the plane is normalized to this length, otherwise the 
   normal is taken as is. This parameter helps you e.q. in a monoclinic
   space, to apply a shift parallel to the (001) plane by specifying
   the ==> 'hkl' 0,0,1 and then giving a distance from this plane at
   which the shear vector ==> 'vector' is to act, e.g. the d-spacing 
   of the (001) planes.
   All points are shifted by an amount parallel to the deformation vector
   that is proportional to their distance from the plane. Points at 
   a distance equal to the length of 'uvw' are shifted by the vector, #
   those twice as far away are shifted twice as much. Points on 
   opposite sides of the plane are shifted in opposite directions.
3  vector
!p vector <x>,<y>,<z>

   Defines the deformation by providing a plane ==> 'hkl', 'uvw' and
   a deformation vector ==> 'vector'.

   The object experiences a shear parallel to the plane. The 
   magnitude of the shift is defined by the deformation vector, 
   that shifts the point at the end of 'uvw' from the ==> 'origin'
   by its value =='vector'. 
   All points are shifted by an amount parallel to the deformation vector
   that is proportional to their distance from the plane. Points at 
   a distance equal to the length of 'uvw' are shifted by the vector, #
   those twice as far away are shifted twice as much. Points on 
   opposite sides of the plane are shifted in opposite directions.
2  show
!p show <subcommand>,..

   This command allows to obtain various information about the 
   model crystal, DISCUS settings etc.

   Valid subcommands are :

3  asym
!p show "asym"

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  atom
!p show "atom",<number> [,<end>]
!p show "atom","all"
!p show "atom","last"

   The type, position and isotropic B of atom number <number> are shown.
   If the optional second parameter <end> is given, all atoms in the
   range <number> to <end> are shown.
   If the second parameter is "all", all atoms in the crystal are shown.
   WARNING, this could last a while :-)
   If the second parameter is "last", only the last atom of the crystal
   is shown. This is identical to setting the second parameter to "n[1]",
   which contains the number of atoms in the crystal.

   If <number> is higher than the number of atoms in the crystal, nothing 
   is shown and no error message is displayed.
   If <end> is higher than the number of atoms in the crystal, <end> is 
   reset to the last atom in the crystal.
3  bval
!p show "bval",<a1>,<a2>

   This command shows the bond valence parameters r0 and b for the 
   specified atom pair <a1> and <a2>. The parameters are taken from
   a table prepared by I.D. Brown, McMaster University, ON, Canada.
3  chem
!p show "chem"

   Displays the type of atoms present in the crystal. For each type of
   atom, its scattering curve number, its name and its temperature
   factor are listed.
   Warning, even, if all atoms of a particular type have been deleted, its
   scattering type will remain in the list. This list could therefore
   include more types of atoms than are actually present in the crystal.
   A short information about the content of the asymmetric unit is printed.
3  cdim
!p show "cdim"

   Prints the current crystal dimensions. The smallest and largest
   coordinates of any atom along x,y and z are printed.
3  config
!p show "config"

   This command lists the current configuration of DISCUS such as the
   maximum number of atoms.
3  connectivity
!p show "connectivity", <atom_no.>, <def.no.>

   Show the list of neighbors around atom no. <atom_no.>, which have
   been found using definition number <def.no.> for the scattering
   type of atom no. <atom_no.>
   The list of atom numbers is copied into the result variable "res".
3  envi
!p show "environment"

   All atoms in the current environment ==> 'find env' are listed. 
3  error
!p show "error"

   The error status of DISCUS is displayed. 
3  menv
!p show "menvironment" [,"full"]

   All molecules in the current environment ==> 'find env' are listed. 
   If the optional "full" parameter is given, all atoms within each
   molecule are printed.
3  mass
!p show mass

   Calculates and displays the current crystal mass in multiples of 
   atomic units u. 

   The results are stored into the result variable as:
   res[0] = 3
   res[1] = mass
   res[2] = mass / number_of_atoms
   res[3] = number_of_atoms
3  metric
!p show metric

   Displays the current unit cell dimensions, the unit cell volume, the
   metric tensor and the corresponding reciprocal space values. 
   This command is for display only. You may change the direct space 
   unit cell dimensions with the assignment lat[<i>]=<value>. 
   <i>=1 through 3 are a,b,c and <i>=4 through 6 are alpha, beta, gamma.
3  molecule
!p show "molecule",{"all" | "last"}
!p show "molecule",<number> [,<end>]

   For each molecule in the range <number> to <end> the type, number of the
   atom in the crystal, position and isotropic B of all atoms in the molecule
   are shown.
   
   If the second parameter is "all", all molecules in the crystal are shown.
   WARNING, this could last a while :-)
   If the second parameter is "last", only the last molecules of the crystal
   is shown.

   If <number> is higher than the number of molecules in the crystal, nothing 
   is shown and no error message is displayed.
   If <end> is higher than the number of molecules in the crystal, <end> is 
   reset to the last atom in the crystal.
3  object
!p show "object",{"all" | "last"}
!p show "object",<number> [,<end>]

   For each object in the range <number> to <end> the type, number of the
   atom in the crystal, position and isotropic B of all atoms in the object
   are shown.
   
   If the second parameter is "all", all objects in the crystal are shown.
   WARNING, this could last a while :-)
   If the second parameter is "last", only the last objects of the crystal
   is shown.

   If <number> is higher than the number of objects in the crystal, nothing 
   is shown and no error message is displayed.
   If <end> is higher than the number of objects in the crystal, <end> is 
   reset to the last atom in the crystal.
3  result
!p show "result"

   The result array is shown on screen. The number of values shown
   depends on the last calculation performed.

   Further information about the crystal, its composition etc can be obtained
   by evaluating the corresponding ==> variable.
3  scat
!p show "scat", {<name> | <number> } [, {<name> | <number> }...]

   Shows the scattering curve of the selected atom types, which may be
   given as the scattering number of as the element name.

   The values for the scattering curve are stored into the res[] 
   variable in the order:
   a1, a2, a3, a4,  b1, b2, b3, b4, c
3  symmetry
!p show "symmetry" [,{"full" | "symbol" | "xzy" | "matrix" }

   Shows all symmetry operations for the current space group.

!p "full"

   The default setting, produces a full listing. This includes:
       the symmetry matrix as (3x4) matrix
       the symbol as printed in the International Tables
       the resulting atom positions xyz, as printed in the International Tables

   For each symmetry operation DISCUS lists the number in square brackets,
   and for centered space groups the number within each block that corresponds
   to one centering vector in round brackets. With the setting 
   ==> set generator,symmetry the sequence corresponds to that listed
   in the Tables.

!p "symbol"

   This produces a short list that consists of the symbol as used in the
   International Tables.

!p "xyz"

   This produces a short list that consists of the symbolic atom positions
   xyz, as used in the International Tables.

!p "matrix"

   This produces a list that consists of the (3x4) symmetry matrices.
2  spacegroup
!p spacegroup {<spacegroup_name>|<spacegroup_nummer>} [, <origin_choice>}

   Sets the space group for the current structure.
   Be careful with this command, as DISCUS will blindly set the space group!
   DISCUS does not check if the symmetry does match! 
   A consistency check with the lattice parameter is the only check that
   is performed. 
   The command is mostly useful when you want to lower the symmetry to 
   a subgroup.
2  stack
!p stack

   Switches to the stacking fault sub menu of DISCUS. 
   At this sub menu you create a crystal containing stacking faults.
   Several types of layers can be stacked on top of each other. At present
   these layers are read from file. In future releases you will be able to
   call a macro that creates the layer. A layer could be a 2-dimensional
   layer of atoms or unit cells of any thickness or a 1-dimensional row
   of atoms or unit cells.
   The translation vectors from one layer type to the next can be defined
   and need not be exact values but can be Gaussian distributed. 
   A correlation matrix defines the probabilities of layer sequences.
   These probabilities only include first neighbor interactions.

   Alternatively to the stacking faults ruled by the correlations, you
   can include random stacking faults. These stacking faults choose at 
   random the next layer type and the translation vector.

   You can create the crystal following two alternate choices: 

   1) The origin of the current layer is the sum of the previous origin
      and the translation vector

   2) The above origin is taken modulo the modulus vectors.

   By using the first option, the crystal continuously grows in one 
   direction as given by the translation vector(s). By using the second
   option the origins are restricted to a finite range around the 
   average translation vector, which results in a zig-zag shaped crystal.

   The menu includes a new approach to calculate the Fourier transform that
   saves considerable computational time. 

   If stack successfully placed atoms into the crystal with the 
   'run' command, the crystal is no longer periodic. Thus periodic
   boundary conditions and the "chem" quick mode are off. They can
   be turned back on after explicit 'set crystal' command in the
   chemistry menu.

   Further help topics are

3  commands
   Valid commands at this level are

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p aver    ! Sets the intended average translation
!p ccol    ! Reads a single column of the correlation matrix
!p cele    ! Reads a single element of the correlation matrix
!p continue! Continue a stopped macro (see main help level)
!p create  ! Creates the list of layer origins
!p crow    ! Reads a single row of the correlation matrix
!p dist    ! Defines the distribution of layer types
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates 'stack' (see main help)
!first     ! Deter mines the first layer type
!p four    ! Calculates the Fourier transform in quick mode
!p help    ! Gives on line help for symmetry operations (see main help)
!p layer   ! Reads the name of a file that contains a layer
!p modulus ! Reads the modulus vector of the translation
!p number  ! Reads the number of layers to be created
!p random  ! Sets values for random stacking faults
!p rese    ! Resets the number of layers to zero
!p rotate  ! Set values for rotational disorder of the layers
!p reset   ! Reset and clear all definitions
!p run     ! Decorates the list of origins with atoms to create the crystal
!p set     ! Sets parameters
!p show    ! Shows the current settings
!p sigma   ! Reads the sigmas for the translation vectors
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p trans   ! Reads the translation vectors
!p wait    ! Waits for user input (see main help)
3  aver
!p aver <u>,<v>,<w>

   Sets the intended average translation.
   If the modulus is switched on ==> 'set modulus', and the mode of the
   translation ==> 'set trans' is set to "fixed", this vector is used.
3  ccol
!p ccol <nr>,<c1nr>,<c2nr>,...,<cmdtypenr>

   Read a single column <nr> of the correlation matrix. Following the
   index <nr>, as many parameters as there are layer types must follow.
   The sum of any column need not be equal to one.
3  cele
!p cele <i>,<j>,<value>

   Reads the value <value> that is stored in element <i>,<j> of the
   correlation matrix.
3  create
!p create

   Creates the list of layer origins. No changes are done to the 
   actual structure, this is performed by the command ==> 'run'.

   The command copies the list of layer origins into an internal
   file with fixed name "internal.stacklist.stru". The layer types
   are saved as atoms with names "L001", "L002" etc. The coordinates
   correspond to the layer positions.

   A simplified list of origin types called
   "internal.stacksimple.list" 
   contains the atom types "L001", etc at reduced origins
   starting at 0,0,0 and incrementing with [0,0,1]. This 
   list facilitates correlation analysis.
3  crow
!p crow <nr>,<cnr>1,<cnr>2,...,<cnrmdtype>

   Read a single row <nr> of the correlation matrix. Following the
   index <nr>, as many parameters as there are layer types must follow.
   The sum of any row need not be equal to one, as long as the sum of all
   rows is identical.
3  dist
!p dist { "matrix" | "file", <inputfile> | "list", <inputfile> }

   This commands allows you to define how the sequence of layer types
   is determined.
   The parameter "matrix" forces DISCUS to determine the type of each
   layer from the correlation matrix ==> 'crow', 'ccol'. Only 
   nearest neighbor correlations are realized.

   The parameter "file" forces DISCUS to read a standard structure 
   file from <inputfile>. The atom types found in this file are 
   interpreted as to correspond to the respective layer type. 
   Make sure this is a one-dimensional structure and that you have 
   written this file using the ==> 'save' options to write the
   explicit list of scattering types and atomic displacement parameters.
   You can use the MonteCarlo section of DISCUS ==> 'mmc' to create
   the list of layer types, which allows you to include nearest as well
   as next nearest etc neighbor correlations.
   Presently 'stack' ignores the atom positions found in the input file.
   The layer origins are calculated using the translations ==> 'tran'.

   The parameter "list" acts very similarly to "file". The only difference
   is that the atom positions are interpreted as layer positions as well.

   DISCUS does not check whether the atoms in <inputfile> form a 
   1-dimensional list of atoms, or whether this 1-dimensional line
   is not parallel to the layers! 
   This can actually be used to distribute equally sized and oriented
   domains throughout the crystal. In combination with the stacking fault
   fourier option, very fast Fourier transformations of molecular
   crystals can be calculated.
3  first
!p first {"random" | <type_number>}

   Determines the type of the first layer type. 
   with the parameter "random", the first layer type is determined by
   a weighted random choice calculated from the correlation matrix.
   This is the default behavior.
   Alternatively a <type number> fixes the first layer type to this 
   particular type.
3  four
!p four

   A crystal with stacking faults can be created in the following step wise
   manner:

!p   1. Create the distribution of layer origins. 
!p   2. Convolute each origin with the corresponding layer.

   At this point, the convolution theorem saves a lot of computation time
   since the Fourier transform of a convolution is equal to the product
   of the individual Fourier transforms. The Fourier transform approach
   realized in the stacking fault menu operates by the following steps:

!p   0. The current parameters of the ==> 'fourier' menu are used.
!p   1. For each layer type calculate the Fourier transform of the 
!p      list of origins. 
!p      Calculate the Fourier transform of the actual atoms in the layer.
!p      Multiply the resulting complex amplitudes and store the results
!p      in temporary files.
!p   2. Add the complex amplitudes from all layer types and store the
!p      result in internal memory.

   The user can then write any desired output value using the ==>'output'
   sub menu.

!p Note:
   In order to calculate the Fourier transform of each layer type the atoms
   in the corresponding file are read into the internal structure array.
   A previous structure is lost! If necessary save this structure to file
   by the ==> 'save' command.

!p Note:
   DISCUS does not compare the space group or lattice constants in the 
   different layer files. You must make sure that these are identical.
3  layer
!p layer <filename>

   Defines a new layer type.
   The file <filename> must be a standard DISCUS input file that contains
   a list of atoms. No restrictions apply to the position and types of 
   atoms in the layer. You have to create the layer beforehand using the
   tools of DISCUS.
3  modulus
!p modulus <x1>,<y1>,<z1>, <x2>,<y2>,<z2>

   Sets the two modulo vectors that are used to restrict the origins to
   a finite volume around the average translation vector. The plane
   defined by these two vectors need not to be normal to the average
   translation.

!p ==> 'set mod'
!p ==> 'set tran'
!p ==> 'aver'

   You can create the crystal following two alternate choices: 

!p   1) The origin of the current layer is the sum of the previous origin
!p      and the translation vector
!p   2) The above origin is taken modulo the modulus vector.

   By using the first option, the crystal continuously grows in one 
   direction as given by the translation vector(s). By using the second
   option one or two coordinates can be constrained to a finite range, which
   results in a zig-zag shaped crystal. If any of the parameters is not
   equal to zero, the corresponding coordinate of the origin is taken modulo
   this parameter. 

   DISCUS does NOT check whether the modulo vectors are translation vectors
   of the current space group!
3  number
!p number <n>

   Reads the number of layers to be created.
3  random
!p random prob,<value>
!p random offset,< u>,< v>,< w>
!p random sigma ,<su>,<sv>,<sw>
 
   This command sets values for the random stacking faults. The program
   selects the next layer type by weighted random choice. The weights
   are chosen according to the overall probabilities for each layer type.
   The next layer is then shifted by the corresponding translation vector
   between the resulting neighbors. In addition a random fraction of the 
   two modulo vectors is added, which results in a random distribution
   of the next layer origin.

!p random prob,<value>
   Sets the probability for random stacking faults. <value> must be between
   zero and one. Set the probability to zero to exclude random stacking
   faults.
   
!p random offset,< u>,< v>,< w>
   If specified this vector is added to the translation vector. You can
   use this offset to force an increased layer separation for random
   faults compared to regular stacking faults.

!p random sigma ,<su>,<sv>,<sw>
   Specifies the sigma's for a Gaussian distribution applied to the 
   components of the offset.
3  rese
!p rese

   Sets the number of layers and layer types back to zero.
3  rotate
!p rotate axis,  "normal",<u>,<v>,<w> [ "d" | "r" ]
!p rotate axis,  "mod1",  <u>,<v>,<w> [ "d" | "r" ]
!p rotate axis,  "mod2",  <u>,<v>,<w> [ "d" | "r" ]
!p rotate mode, [ "all" | "fault" ]
!p rotate sigma, "normal",<snormal> 
!p rotate sigma, "mod1",  <smod1>
!p rotate sigma, "mod2",  <smod2>
!p rotate status,  [ "on" | "off" ]

   This command sets values for rotational disorder of the stacking faults.
   The layers are rotated around three axes, which are defined by the 
   'axis' command. The angle of rotation is Gaussian distributed with mean
   value zero and sigma defined by the 'sigma' command.

!p rotate axis,  "normal",<u>,<v>,<w> [ "d" | "r" ]
!p rotate axis,  "mod1",  <u>,<v>,<w> [ "d" | "r" ]
!p rotate axis,  "mod2",  <u>,<v>,<w> [ "d" | "r" ]

   The parameter "axis" defines the three axes around which you can rotate
   the layers. The axis can be given in real space coordinates "d" or
   reciprocal space coordinates "r". Default is real space.
   DISCUS does not make any assumptions about the three axes. The layer
   is rotated first around the "normal" axis, then around "mod1" and finally
   around "mod2". It is suggested to define "normal" as the axis perpendicular
   to the layers and "mod1" and "mod2" within the plane of the layers.

   Attention!!
   If you tilt the layer around "mod1" or "mod2" the outer sections of the
   layer might overlap with the previous layer!

!p rotate mode, [ "all" | "fault" ]

   The rotational disorder can affect all layers individually, regardless
   whether the previous layer was of the same type as the current layer or
   not.
   Alternatively, a new rotation angle is computed only at a stacking fault,
   i.e. if the current layer type is different than the previous layer type.
   All following layers of identical type up to the next stacking fault are
   rotated by the same angle.

!p rotate sigma, "normal",<snormal> 
!p rotate sigma, "mod1",  <smod1>
!p rotate sigma, "mod2",  <smod2>

   The rotation is Gaussian distributed with individual sigma for each axis.
   The mean value of the distribution is zero. Each new angle is calculated
   individually from a Gaussian distribution irrespective of the previous
   value. This forces the average layer orientations to remain constant
   throughout the crystal.
   A sigma of zero fixes the rotations around the respective axis to zero.

!p rotate status,  [ "on" | "off" ]

   The rotational disorder is only effective if its status is switched "on".
3  reset
!p reset

   Reset all stack definitions back to the default values at 
   system start. 
3  run
!p run

   Decorates the origins with the corresponding atom distribution. Any
   previously existing structure is lost.
3  set
!p set "aver",<value>
!p set "modulus" , { "off" | "on" }
!p set "trans" , { "calculate" | "fixed" }

!p set "aver",<value>
   If the value of <value> is not equal to zero, the average <F> is
   subtracted from the actual structure factor F. 
   Otherwise the average <F> is calculated using the whole crystal
   and subtracted from the actual F.

!p ==> "four"
!p ==> "discus four set aver"

!p set "modulus" , { "off" | "on" }
   If the modulus is set "off", each origin is calculated by adding
   the corresponding translation vector to the previous origin. This
   way the crystal grows along the average translation vector. The 
   resulting average translation vector is the sum of all translation
   vectors weighted by the corresponding probability as stored in
   the correlation matrix.
   If the modulus is set "on", each origin is calculated as above. The
   origin is then expressed as multiples of the two modulo vectors and
   the average translation. If any of the two multipliers corresponding
   to the two modulo vectors is larger than |1|, the modulo vector is
   subtracted from the origin. This has the effect that all origins are
   no further than the modulo vectors from the average translation.
   Even though all translation vectors might point in one direction,
   you can restrict the crystal to any arbitrary direction by defining
   the average vector ==> 'set trans', ==> 'aver'.

!p set "trans" , { "calculate" | "fixed" }
   You have two choices to restrict the crystal growth once the 
   modulus is set on.
   The average translation can be fixed to the value given by
   ==> 'aver' by setting the parameter of the 'set trans' command to
   "fixed". Alternatively the average translation is computed using
   the array of the translation vectors and the correlation matrix.
3  show
!p show

   Shows the current settings.
3  sigma
!p sigma <i>,<j>,<sx>,<sy>,<sz>

   Read the sigmas of the translation vector between layer type <i> and <j>.
   The current origin of any layer is calculated by adding the translation
   vector ==> 'trans' between layer types <i> and <j> to the previous origin.
   If any sigma is non-zero, a Gaussian distributed value with mean value of
   zero is added to the corresponding vector component.
3  trans
!p trans <i>,<j>,<tx>,<ty>,<tz>

   Reads the components of the translation vector between layers <i> and <j>.
   The current origin of any layer is calculated by adding the translation
   vector between layer types <i> and <j> to the previous origin.
2  storage

   Menu to display and manage internally stored crystal structures

   Further help is available on:
3  commands
!p show       ! Show list of stored structures
!p reset      ! Clear list of stored structures
!p remove     ! Clear list of stored structures
!p exit       ! Leaves the storage menu
3  show
!p show
!p show "all"
!p show <name>
!p    display:{"short" | "crystal" | "connect" | "full"}

   Displays the complete list (no parameters or "all")
   or an individual structure.

   The optional parameter "display:" determines the amount of
   information that is displayed:
   "short" (default)  Show the file names only
   "crystal"          Additionally show number of atoms, 
                      atom types and molecule info
                      This is stored into the result variable 
                      at entries 1 to 4.
   "connect"          Additionally show the internal connection
                      in the binary storage tree. This is really
                      just for debug purposes
   "full"             Combines "crystal" and "connect"
3  reset
!p reset {<name>}

   Clears the complete internal list or the single structure
   named <name>
   Commands 'reset' and 'remove' are synonymous
3  remove
!p remove {<name>}

   Clears the complete internal list or the single structure
   named <name>
   Commands 'reset' and 'remove' are synonymous
2  surface

   Menu to define crystal surfaces and related settings
   Further help is available on:
3  commands
!p boundary   ! Cut atoms that are outside a boundary
!p set        ! Make settings related to surfaces
!p show       ! Show the current surface related settings
3  boundary
!p boundary "hkl",h,k,l [,<distance>] [,{"inside"}|{"outside"}]
!p boundary "form",h,k,l [,<distance>] [,{"inside"}|{"outside"}]
!p boundary "form","cubeoct",<distance> [,{"inside"}|{"outside"}]
!p boundary "sphere",<radius> [,{"inside"}|{"outside"}]
!p boundary "ellipsoid",<diam_a>, <diam_b>, <diam_c> [,{"inside"}|{"outside"}]
!p boundary "cylinder",<radius>,<half-height> [,{"inside"}|{"outside"}]
!p boundary "local"

            Optional parameters for all forms are:
            "centx:"<center_x>   The central location for the 
            "centy:"<center_y>   boundary is at this point
            "centz:"<center_z>   Defaults to (0, 0, 0)
            "center:"<value>     Identical centers for x, y, z.
                                 The units are fractional coordinates
                                 The value to all four parameter may be
                                 specified as "com", the center of mass.
                                 This is the average postion of all atoms.
            "thick:"<thickness>  Defaults to value set by 
                                 set distance, external for atom type 1
                                 Atoms within a distance of <thickness>
                                 to the surface are flagged as surface
                                 atoms. Units are Angstrom

            "keep:"{"inside"}|{"outside"}  Keep atoms on the inside or
                                           outside of boundary
                                           Defaults to "inside"

            Optional parameters for the "hkl" and "form" style are:
            "accum:"{"init"|"add"}  Initialize the accumulation of
                                    surfaces or add another surface
                                    Defaults to "init"
                                    See description below
            "exec:"{"run"|"hold"}   Execute the actual cut == "run"
                                    or hold the cut for another 
                                    surface
                                    Defaults to "run"
                                    See description below

            Optional parameters for the "cylinder" and "ellipsoid" style
            are:
            "long:[",<u>,<v>,<w>,{"d"|"r"} "]"
                                    Defines the direction of the cylinder axis,
                                    or the third principal "ellipsoid" axis.
                                    <u>,<v>,<w> are fractional components of
                                    the direction vector.
                                    The fourth parameter is optional and
                                    defaults to "d". It specifies if the
                                    components of the vector are in direct
                                    or reciprocal space.
            "short:[",<u>,<v>,<w>,{"d"|"r"} "]"
                                    Same for the first principal axis of the
                                    "ellipsoid". For the "cylinder" its 
                                    meaningless, as it results in a rotation 
                                    around the cylinder axis.

   This commands removes all atoms that are outside a boundary surrounding
   the crystal. The distance of the surface from the point 0,0,0 is measured
   in Angstrom.
   "hkl"  The surface is defined as a plane through the Miller indices 
          <h>,<k>,<l>. The optional <distance> determines the distance 
          between 0,0,0 and the boundary surface. Without this parameter,
          the distance is automatically calculated from the user supplied
          <h>,<k>,<l> as 1./dstar(h,k,l).
          The optional last parameter determines which atoms remain.
          If the parameter is "inside" or omitted, all atoms remain that
          are on the same side of the plane as is the origin. 
          If the parameter is "outside", those atoms remain that are on 
          the other side of the plane as the origin.
   "form" Same as "hkl", except that DISCUS will create all symmetrically
          equivalent forms of h,k,l and apply them to shape the crystal

          With the word "cubeoct" as second parameter, a combination of 
          {100} and {111} faces is created that will build a cubeoctahedron 
          in a cubic system. The <distance> is the distance of the {100} 
          faces from the origin. 
          If the crystal system is not cubic, an error message is 
          displayed and the boundary is not applied.
   "sphere" The boundary is defined as a sphere at the origin of direct
          space. The size of the sphere is defined by its radius in Angstrom.
          The optional last parameter determines which atoms remain.
          If the parameter is "inside" or omitted, all atoms remain that
          are inside the sphere.
          If the parameter is "outside", those atoms remain that are on 
          the outside of the sphere.
   "ellipsoid" The boundary is defined as a triaxial ellipsoid with user
          defined diameters along the three orthogonal main axes. 
          The ellipsoid is in fixed orientation with respect to the lattice.
          Generally the axes are parallel to the base vectors except for the
          non-orthogonal crystal systems. The axis are:
          cubic           a       b      c
          tetragonal      a       b      c
          orthorhombic    a       b      c
          hexagonal       a*      b      c
          trigonal        a*      b      c
          rhombohedral   (bxc*)   b      c*
          monoclinic     (bxc*)   b      c*
          triclinic      (bxc*)   b      c*
          If a differently oriented shape is required, you must use the 
          ==> 'symmetry' menu to rotate the crystal as a whole prior to
          the removal of atoms outside the boundary.
   "cylinder"  The boundary is defined as a cylinder of radius <radius>
          and half-height <height>, both measures are in Angstrom. The 
          cylinder axis is always along the c-axis. The top and bottom
          planes are parallel to the (001) plane. If the a- and b-axes are
          not at 90 degrees to the c-axis, the top will be tilted 
          accordingly. If necessary, transform into an orthogonal cell
          prior to the application of the boundary command.
          The optional last parameter determines which atoms remain.
          If the parameter is "inside" or omitted, all atoms remain that
          are inside the sphere.
          If the parameter is "outside", those atoms remain that are on 
          the outside of the sphere.
   "local"  With this command version, no atoms are removed. The structure
          is analyzed if any atom has a very one sided environment, 
          meaning that all neighboring atoms are displaced in the same 
          direction compared to the central atom. If this is the case the
          central atom is flagged as a surface atom.

   The optional parameters "accum" and "exec" apply to planar surfaces
   only. Their main purpose is to create interior closed surfaces
   in combination with the "keep:outside" parameter. 
   In low symmetry crystal systems, a closed hollow space has to be
   created by a combination of several symmetrically non-equivalent
   faces or forms. Use the combination:
   "accum:init, exec:hold" For the first face/form
   "accum:add, exec:hold"  For further faces and forms
   "accum:add, exec:run"   For the last face.
   As long as the "exec:hold" parameter is given, the faces are
   accumulated. With the "exec:run" the actual removal of atoms
   is started. 
   After a "exec:run" parameter, the list of faces is automatically
   reset.
   An accumulated set of planes will refer to a common origin, either
   the default 0,0,0 or the value set by "centx:", "centy:", "centz".
   Also the keep status is the same for all hkls in the accumulated set.
   Thus only the last occurrence of these optional parameters will 
   actually be effective. It is therefore best to use the optional 
   parameters for accumulated surfaces only once at the last hkl for 
   which the optional parameter "exec:run" is used. A warning message
   will be flagged otherwise.
3  character
!p char <atom_no> [,{"equal"}|{any}] [, "show"]

   Determines the surface character of atom number <atom_no>.
   The result can be:
   0: Ill defined surface character, atom is probably slightly below
          the surrounding atoms
   1: planar surface
   2: edge
   3: corner

   The optional "show" tells DISCUS to write the character and 
   the resulting normal to screen.

   The optional parameter {"equal"|"any"} tells DISCUS to look either
   for equal atom types only or to include all atom types surrounding
   the central atom. If the crystal structure consist of many different
   sites a more precise result will be obtained by restricting the 
   surface to atoms equal in type to the central atom. If, however, 
   there is a mixed occupancy on a given site in the unit cell, all
   atom types need to be included in order to find the local surface.

   Values are always saved into "res[]":
   Unknown: res[1] = 0
   Plane  : res[1] = 1, res[2:4]   Surface normal
   Edge   : res[1] = 2, res[2:4]   Edge vector,
                        res[5:7]   1st. Surface normal
                        res[8:10]  2nd. Surface normal
   Corner : res[1] = 3, res[2:4]   1st. Surface normal
                        res[8:...] 2nd. and further surface normals
3  set

   Make various setting related to surfaces

!p set distance, {"external" | "internal" | "all"} , <atom_list>, <distance>
!p set distance, {"external" | "internal" | "all"} , {"default" | "off"}

   Defines the distances between those atoms in <atom_list> and the
   specified surface. All atoms of the selected type that are closer
   than <distance> to the specified surface are marked as "close". The
   respective property can be used everywhere an atom type is selected.
   ==> 'property' menu and the 'sel' / 'des' commands in various menus.

   "external"
   The surface created by the ==> 'boundary' command, see the 
   ==> 'surface' menu and the main menu 'boundary' command.

   "internal"
   The surface is an internal surface between atoms that are inserted
   through a ==> 'domain' and the host structure.

   "all"
   The distances apply to both surface type

   <atom_list>
   List of atoms for which the <distance> is to apply. The list can be
   the "all" keyword or a list of atom names.

   <distance>
   Distance in Angstrom between an atom and the surface. If set to
   zero, the flag is not set.

   Instead of the atom list, the values can be set for all atoms to:

   "default"
   A default value of 2.55 Angstrom for all atoms.

   "off"
   A value of zero Angstrom. No surface property flag will be set.
3  show
!p show

   Show the current surface related settings.
2  switch
!p switch <atom1>,<atom2>
!p switch <mole1>,<mole2>,"mol"

   The atoms number <atom1> and <atom2> switch position. Internally, the
   chemistry of the two atoms is switched, while the positions remain
   as before.
   The corresponding properties are switched as well.

   If 'mol' is given as a third parameter, molecules <mole1> and <mole2>
   are interchanged. The origin of the two molecules (position of atom 1)
   are unchanged.
2  symmetry
!p symmetry

   Switches to the symmetry sub menu of DISCUS. You can define a general 
   symmetry operation in triclinic space such as a rotation around a 
   general axis by a general angle. DISCUS performs a symmetry operation 
   in general triclinic space according to the matrix notation:

!p r' = S*r + t

   Here, r is the original position, r' its image, S the symmetry matrix
   and t the translation vector.  There are no restrictions on the direction 
   of the symmetry axis, the rotation angle or the translational part.   
   You can use this feature to create a twinned crystal, to rotate a group 
   of atoms around a general axis etc.

   Further help topics are:

3  commands
   Valid commands at this level are

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p angle   ! Sets the angle of a rotation axis
!p asym    ! Shows asymmetric unit
!p calc    ! Calculates the symmetry transformation for a single point
!p chem    ! Shows the atoms present in the crystal
!p continue! Continue a stopped macro (see main help level)
!p des     ! Deselects atoms
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates 'symm'
!p help    ! Gives on line help for symmetry operations (see main help)
!p hkl     ! Sets the symmetry axis in reciprocal space coordinates
!p incl    ! Sets the range of atoms to be included in the symmetry operation
!p mdes    ! Deselects molecules
!p mincl   ! Sets the range of molecules to be included in the 
!p         ! Symmetry operation
!p mode    ! Allows choice of creating a copy or replacing the atom
!p msel    ! Selects molecules to be included in the symmetry operations
!p odes    ! Deselects objects
!p oincl   ! Sets the range of objects to be included in the symmetry operation
!p origin  ! Sets the origin for the symmetry operation
!p osel    ! Selects objects to be included in the symmetry operations
!p power   ! Sets the power of the symmetry operation
!p reset   ! Sets the status back to program start conditions
!p run     ! Starts the calculation of the symmetry operations
!p sel     ! Selects atoms to be included in the symmetry operations
!p show    ! Shows the current parameters
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p trans   ! Sets the translational part of the symmetry operation
!p type    ! Allows choice between proper and improper rotations
!p uvw     ! Sets the symmetry axis in direct space coordinates
!p use     ! Defines the space group symmetry matrix to be used
!p wait    ! Waits for user input (see main help)
3  angle
!p angle <value>

   Sets the angle of the symmetry operation. The angle must be given in
   degrees. No limit applies to the numerical value.
3  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  calc
!p calc x,y,z [,"d" | "r" ]

   Calculates the symmetry transformation for a single point <x,y,z>.
   The current settings for the symmetry operation are used to transform
   the vector <x,y,z>. The result is displayed and stored in the result
   array "res".
   By default, or if the optional fourth parameter is set to "d", DISCUS
   assumes that the vector is a real space vector.i
   If the optional fourth parameter is set to "r" the vector is interpreted
   as a reciprocal space vector and the corresponding symmetry matrix in
   reciprocal space is used.
3  chem
!p chem

   Displays the type of atoms present in the crystal. For each type of
   atom, its scattering curve number, its name and its temperature
   factor are listed.
   Warning, even, if all atoms of a particular type have been deleted, its 
   scattering type will remain in the list. This list could therefore 
   include more types of atoms than are actually present in the crystal.
3  des
!p des { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'sel' .
   Be sure to combine the 'des', 'sel' and 'incl' commands and
   make sure that no 'msel', mdes' or 'mincl' command follows
   prior to the 'run' command.

   Possible values for the first mandatory parameter are
   mutually exclusively:

!p "all"     all atoms of the crystal are deselected.
!p <name>    all the atoms called <name> of the crystal are deselected.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are deselected.

   More than one atom may be deselected at once.
3  hkl
!p hkl <h>,<k>,<l>

   Specifies the direction of the symmetry axis in reciprocal space
   coordinates. The corresponding direct space coordinates are calculated 
   by the program.
   Alternatively you may specify the direction in direct space by the
   ==> 'uvw" command.
3  incl
!p incl {<start>,<end> | "all" | "envi" }

   This command serves to choose wich actual atoms
   will be modified by the symmetry operation.

   Chose which atom types will be included with the 
   ==> 'incl' command.

   Be sure to combine the 'sel' 'des' and 'incl' commands and
   make sure that no 'msel', mdes' or 'mincl' command follows
   prior to the 'run' command.

   The symmetry operation includes all atoms numbered <start> to <end>
   inclusively. All other atoms are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   symmetry operation will include all atoms of the crystal. This holds
   even, if at a later time you include further atoms in the crystal.
   Thus, you can define a setup for the symmetry operations early in a
   lengthy macro, then modify the crystal and just run the symmetry 
   operation later on.
   If the parameter "envi" is specified, the symmetry operation will 
   include all atoms in the current environment that was located by the 
   last ==> 'find env' command.
   In addition you can define the atoms that are affected by the 
   symmetry operation with the ==>'sele' and 'dese' commands.
3  mdes
!p mdes { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'msel'.

   Be sure to combine the 'mdes', 'msel' and 'mincl' commands and
   make sure that no 'sel', des' or 'incl' command follows
   prior to the 'run' command.

   Possible values for the parameter are mutually exclusively:

!p "all"     all molecules of the crystal are deselected.
!p <number>  all molecules of the crystal that are of type <number>
!p           are deselected.

   More than one molecule type may be deselected at once.
3  mincl
!p mincl {<start>,<end> | "all" } [ , "group", <first> [, <excl1>...]]

   This command serves to select those actual molecule numbers 
   that will be modified by the symmetry operation.

   Chose wich molecule types will be included with the 
   ==> 'mincl' command.

   Be sure to combine the 'msel', 'mdes' and 'mincl' commands and
   make sure that no 'sel', des' or 'incl' command follows
   prior to the 'run' command.

   The symmetry operation includes all molecules numbered <start> to <end>
   inclusively. All other molecules are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   symmetry operation will include all molecules of the crystal. This holds
   even, if at a later time you include further molecules in the crystal.
   Thus, you can define a setup for the symmetry operations early in a
   lengthy macro, then modify the crystal and just run the symmetry 
   operation later on.
   In addition you can define the molecules that are affected by the 
   symmetry operation with the ==>'msele' and 'mdese' commands.

   The optional parameters specify that a partial molecule group 
   shall be rotated. The group starts at the atom number <first>
   within the current molecule. DISCUS uses the connectivity to
   build this group. Thus you must have specified a connectivity
   for all atoms within the molecule. Atoms <excl1> etc and their
   respective connectivity are excluded from the group. 
   This allows you to rotate part of a molecule with respect to 
   the rest of the molecule.
   Beware that you must have specified a proper connectivity list!
   This list must contain a connectivity definition for all atom 
   types within the molecule. If you read the structure with the 
   "cell" command, different atom types will exist even is the 
   name and the ADP of two atoms in the cell file were identical. 
   
3  mode
!p mode { "copy" | "repl" } [ , { "new" | "old" } ]
        [, "occupied:"{"any"|"empty"}]
        [, "radius:"<value>]

   The symmetry operation can have two different effects on the current
   atom. In the "copy" mode, the symmetry operation creates a copy of the
   current atom. In the "repl" mode, the symmetry operation moves the
   current atom from its old position to the new position.

   The optional second parameter has only an effect if molecules are
   used. It determines if the new molecule created by the symmetry
   operation has is of the same type as the original ("old") or is
   treated as a new molecule type ("new").

   The optional parameters "occupied" and "radius" are effective 
   only if atoms are selected. These parameters allow you to 
   choose if the position onto which the atom is copied or moved
   can be occupied by any other atom or must be empty within a
   radius of <value> Angstroms. If the power of the symmetry
   operation is greater than one and multiple copies are chosen, this
   option applies to each individual copy separately.

   Try to avoid this option with "empty", as the required inner 
   loop over all atoms in the crystal is bound to take some time. 

   Default values are "any" and a radius of 1.0*10^-8 Angstrom.
   With these defaults the new position may be occupied by 
   previous atoms. 
3  msel
!p msel { "all" | <number> } [ , <number> ...]

   This command serves to select those molecule types 
   that will be modified by the symmetry operation.
 
   Chose wich actual molecules will be included with the 
   ==> 'mincl' command.

   Be sure to combine the 'msel', 'mdes' and 'mincl' commands and
   make sure that no 'sel', des' or 'incl' command follows
   prior to the 'run' command.

   Possible values for the first mandatory parameter are mutually 
   exclusively:

!p "all"     all molecules of the crystal are included.
!p           This includes the empty molecules in the structure, which are
!p           stored as scattering curve number zero.
!p <number>  all molecules of the crystal that are of type <number>
!p           are included.

   More than one molecule type may be selected at once.

   The selection of molecules by 'msel' and atoms by 'sel' are mutually
   exclusive. The symmetry operation uses either atoms or molecules.
   Be careful with unintended side effects. Currently DISCUS uses the 
   same internal variable to store which atoms/molecules are selected.
   Be careful when switching between msel/sel mdes/des.
3  odes
!p odes { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'osel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all objects of the crystal are deselected.
!p <number>  all objects of the crystal that are of type <number>
!p           are deselected.

   More than one object type may be deselected at once.
3  oincl
!p oincl {<start>,<end> | "all" }

   The symmetry operation includes all objects numbered <start> to <end>
   inclusively. All other objects are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   symmetry operation will include all objects of the crystal. This holds
   even, if at a later time you include further objects in the crystal.
   Thus, you can define a setup for the symmetry operations early in a
   lengthy macro, then modify the crystal and just run the symmetry 
   operation later on.
   In addition you can define the objects that are affected by the 
   symmetry operation with the ==>'osele' and 'odese' commands.
3  origin
!p origin <x>,<y>,<z> [, { "mol" | "cryst" } ]
!p origin "atom", <number> [, { "molecule" | "crystal" } ]

   Specifies the origin of the symmetry operation in direct space coordinates.
   The symmetry axis intersects this point and has the direction specified
   by ==> 'hkl' or 'uvw'. If the symmetry operation is an improper rotation,
   the center of symmetry is at <x>,<y>,<z>.

   In case of molecules to be transformed, the optional last parameter
   specifies if the given origin is relative to the origin of the
   molecule ("mol") or the crystal ("cryst"). Note that the first
   atom within a molecule has to be on the molecules origin (see manual).

   With the second form, the origin is specified as the coordinates of 
   the atom number <number>.
   The last optional parameter tells DISCUS if the atom number is 
   absolute within the crystal, or a relative atom number within a 
   molecule content. 
   In the second case, an atom number "2" for example would be the second
   atom within a chosen molecule. If several molecules are included in the
   symmetry operation, the origin is adapted for each individual molecule.

3  osel
!p osel { "all" | <number> } [ , <number> ...]

   This command serves to select
   those objects that will be modified by the symmetry operation.

   Defines which objects are included in symmetry operation. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all objects of the crystal are included.
!p           This includes the empty objects in the structure, which are
!p           stored as scattering curve number zero.
!p <number>  all molecules of the crystal that are of type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection of objects by 'osel' and atoms by 'sel' are mutually
   exclusive. The symmetry operation uses either atoms or objects.
3  power
!p power <n> {, "multiple" | "single" }

   Sets the power of the symmetry operation. The symmetry operation is
   applied <n> times.

   If the ==> 'mode' of the symmetry operation is "repl", the second
   parameter is meaningless. The symmetry operation that applies in
   this case is :

!p        n         n 
!p  r' = S  * r  + t 

   The atom is moved to the new position that results from an <n> fold 
   application of the symmetry operation.

   If the ==> 'mode' of the symmetry operation is "copy", <n> new atoms
   are created. The position of the first atom results from a single
   application of the symmetry operation, the position of the second from
   a twofold application etc. 
3  reset
!p reset

   Reset all symmetry definitions back to the default values at 
   system start. 
3  run
!p run

   Starts the symmetry operation.
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   This command serves to select those atom types 
   that will be modified by the symmetry operation.
   Chose which actual atoms will be included with the 
   ==> 'incl' command.
   Be sure to combine the 'sel' and 'incl' commands and
   make sure that no 'msel', mdes' or 'mincl' command follows
   prior to the 'run' command.

   Possible values for the first mandatory parameter are
   mutually exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection made stay valid until explicitly deselected!
3  show
!p show

   Shows the current parameters of the symmetry operation.
3  trans
!p trans <t1>,<t2>,<t3>

   Sets the translational part of the symmetry operation. 
   The translation is applied after the rotation according to the matrix
   notation:

!p r' = S*r + t

   Here, r is the original position, r' its image, S the symmetry matrix
   and t the translation vector.
3  type
!p type {"proper" | "improper" }

   A general rotation may be either a "proper" or an "improper" rotation. 
   An improper rotation is a normal rotation followed by an inversion. 
   To create, for example, a mirror operation specify a 180 degree angle
   and an improper rotation.
3  uvw
!p uvw <h>,<k>,<l>
!p uvw "atoms", <from>, <to> [ ,{"crystal"|"molecule"}]

   Specifies the direction of the symmetry axis in direct space
   coordinates. The corresponding reciprocal space coordinates are calculated 
   by the program.

   With the second form, the axis is specified as the direction from 
   the atom number <from> to atom number <to>. 
   The last optional parameter tells DISCUS if the atom numbers are
   absolute within the crystal, or relative atom numbers within a molecule
   content. 
   In the second case, an atom number "2" for example would be the second
   atom within a chosen molecule. If several molecules are included in the
   symmetry operation, the axis is adapted for each individual molecule.

   Alternatively you may specify the direction in reciprocal space by the
   ==> 'hkl" command.

3  use
!p use <number>

   Define the space group symmetry matrix to be used. 
   The symmetry matrix is used as is, therefore this command is 
   incompatible with the commands:
      uvw, hkl, origin, trans, angle, power, type
   The use of any of these commands will automatically switch off the
   space group symmetry matrix.
2  transform
!p tran

   Switches to the unit cell transformation sub menu of DISCUS. 
   At this sub level you can define the relationship between an old and a
   new unit cell and perform the transformation of the atoms in the crystal.
   An interactive transformation allows to calculate the result for any 
   single real and reciprocal space vector in both directions:
   old ==> new and new ==> old.

   You can specify the relation ship between the two unit cells in any of
   six possible options:
   define the new base vectors a,b,c in terms of the old base
   define the old base vectors a,b,c in terms of the new base
   define the new coordinates x,y,z in terms of the old coordinates
   define the old coordinates x,y,z in terms of the new coordinates
   define the new base vectors a*,b*,c* in terms of the old reciprocal base
   define the old base vectors a*,b*,c* in terms of the new reciprocal base

   Independent of the choice above, you can define an optional shift of the
   origin by:
   defining the coordinates of the new origin in terms of the old base
   defining the coordinates of the old origin in terms of the new base

   If all atoms in the crystal are transformed to the new base vectors, then
   the unit cell dimensions and the metric tensors are transformed as well. 
   The space group is set to "P1" to prevent erroneous symmetry operations
   once the present crystal is saved to file and read again. All original
   symmetry operations are transformed and stored as additional generators.

3  commands
   Valid commands at this level are

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p anew    ! Sets the new base vector "a" in terms of the old base
!p aold    ! Sets the old base vector "a" in terms of the new base
!p asnew   ! Sets the new reciprocal base vector "a" in terms of the old base
!p asold   ! Sets the old reciprocal base vector "a" in terms of the new base
!p asym    ! Shows asymmetric unit
!p bnew    ! Sets the new base vector "b" in terms of the old base
!p bold    ! Sets the old base vector "b" in terms of the new base
!p bsnew   ! Sets the new reciprocal base vector "b" in terms of the old base
!p bsold   ! Sets the old reciprocal base vector "b" in terms of the new base
!p c2new   ! Calculates the transformation to "new" for a single vector
!p c2old   ! Calculates the transformation to "old" for a single vector
!p chem    ! Shows the atoms present in the crystal
!p cnew    ! Sets the new base vector "c" in terms of the old base
!p cold    ! Sets the old base vector "c" in terms of the new base
!p csnew   ! Sets the new reciprocal base vector "c" in terms of the old base
!p csold   ! Sets the old reciprocal base vector "c" in terms of the new base
!p continue! Continue a stopped macro (see main help level)
!p des     ! Deselects atoms
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates 'tran'
!p help    ! Gives on line help for unit cell transformations (see main help)
!p h2new   ! Transforms a list of reflections to the new base system
!p h2old   ! Transforms a list of reflections to the old base system
!p incl    ! Sets the range of atoms to be included in the transformation
!p onew    ! Sets the new origin in terms of the old base
!p oold    ! Sets the old origin in terms of the new base
!p reset   ! Reset and clear all definitions
!p run     ! Starts the transformation for the selected atoms
!p sel     ! Selects atoms to be included in the transformation
!p set     ! Sets parameters
!p show    ! Shows the current parameters
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p wait    ! Waits for user input (see main help)
!p xnew    ! Sets the new coordinate "x" in terms of the old x,y,z
!p xold    ! Sets the old coordinate "x" in terms of the new x,y,z
!p ynew    ! Sets the new coordinate "y" in terms of the old x,y,z
!p yold    ! Sets the old coordinate "y" in terms of the new x,y,z
!p znew    ! Sets the new coordinate "z" in terms of the old x,y,z
!p zold    ! Sets the old coordinate "z" in terms of the new x,y,z

3  anew
!p anew a,b,c

   Defines the new base vector "a" in terms of multiples <a>, <b>, <c> of
   the old base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'anew','bnew' and 'cnew'.
3  aold
!p aold a,b,c

   Defines the old base vector "a" in terms of multiples <a>, <b>, <c> of
   the new base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'aold','bold' and 'cold'.
3  asnew
!p asnew a,b,c

   Defines the new reciprocal base vector "a" in terms of 
   multiples <a>, <b>, <c> of the old reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asnew','bsnew' and 'csnew'.
3  asold
!p asold a,b,c

   Defines the old reciprocal base vector "a" in terms of 
   multiples <a>, <b>, <c> of the new reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asold','bsold' and 'csold'.
3  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  bnew
!p bnew a,b,c

   Defines the new base vector "b" in terms of multiples <a>, <b>, <c> of
   the old base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'anew','bnew' and 'cnew'.
3  bold
!p bold a,b,c

   Defines the old base vector "b" in terms of multiples <a>, <b>, <c> of
   the new base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'aold','bold' and 'cold'.
3  bsnew
!p bsnew a,b,c

   Defines the new reciprocal base vector "b" in terms of 
   multiples <a>, <b>, <c> of the old reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asnew','bsnew' and 'csnew'.
3  bsold
!p bsold a,b,c

   Defines the old reciprocal base vector "b" in terms of 
   multiples <a>, <b>, <c> of the new reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asold','bsold' and 'csold'.
3  c2new 
!p c2new x,y,z [, ["d" | "r" } ]
   Calculates the transformation from the old coordinate system to the new
   system for a single vector <x>,<y>,<z>. Default is a direct space vector,
   the fourth optional parameter allows you to define <x>,<y>,<z> as a
   reciprocal space vector. The result of the transformation is displayed
   on the screen and stored in the first three elements of the result array
   "res[i]".
3  c2old
!p c2old x,y,z [, ["d" | "r" } ]
   Calculates the transformation from the new coordinate system to the old
   system for a single vector <x>,<y>,<z>. Default is a direct space vector,
   the fourth optional parameter allows you to define <x>,<y>,<z> as a
   reciprocal space vector. The result of the transformation is displayed
   on the screen and stored in the first three elements of the result array
   "res[i]".
3  csnew
!p csnew a,b,c

   Defines the new reciprocal base vector "c" in terms of 
   multiples <a>, <b>, <c> of the old reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asnew','bsnew' and 'csnew'.
3  csold
!p csold a,b,c

   Defines the old reciprocal base vector "c" in terms of 
   multiples <a>, <b>, <c> of the new reciprocal base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'asold','bsold' and 'csold'.
3  chem
!p chem

   Displays the type of atoms present in the crystal. For each type of
   atom, its scattering curve number, its name and its temperature
   factor are listed.
   Warning, even, if all atoms of a particular type have been deleted, its 
   scattering type will remain in the list. This list could therefore 
   include more types of atoms than are actually present in the crystal.
3  cnew
!p cnew a,b,c

   Defines the new base vector "c" in terms of multiples <a>, <b>, <c> of
   the old base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'anew','bnew' and 'cnew'.
3  cold
!p cold a,b,c

   Defines the old base vector "c" in terms of multiples <a>, <b>, <c> of
   the new base vectors.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'aold','bold' and 'cold'.
3  des
!p des { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'sel' . Possible values
   for the parameter are mutually exclusively:

!p "all"     all atoms of the crystal are deselected.
!p <name>    all the atoms called <name> of the crystal are deselected.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are deselected.

   More than one atom may be deselected at once.
3  h2new
!p h2new <infile>

   Transforms the reflections read from <infile> into reflections according
   to the new base system. The input format is the SHEXL format(3i4,2f8.2,i4).
   All new reflections that are integer are written to the output file
   named <infile>".trans" in SHELX format. You can set an accuracy for
   being integer by the ==> 'set deltahkl' command. All other reflections,
   that are more than +-<deltahkl> away from integer h,k,l are written to
   the file <infile>".rest" as hkl(new), intensity, sigma, batch, hkl(old).
   Here hkl(new) are real values.
3  h2old
!p h2old <infile>

   Transforms the reflections read from <infile> into reflections according
   to the old base system. The input format is the SHEXL format(3i4,2f8.2,i4).
   All old reflections that are integer are written to the output file
   named <infile>".trans" in SHELX format. You can set an accuracy for
   being integer by the ==> 'set deltahkl' command. All other reflections,
   that are more than +-<deltahkl> away from integer h,k,l are written to
   the file <infile>".rest" as hkl(old), intensity, sigma, batch, hkl(new)
   Here hkl(old) are real values.
3  incl
!p incl { <start>,<end> | "all" }

   The unit cell transformation includes all atoms numbered <start> to <end>
   inclusively. All other atoms are ignored. 
   If, instead of explicit numbers, the parameter "all" is given, the
   unit cell transformation will include all atoms of the crystal. This holds
   even, if at a later time you include further atoms in the crystal.
   Thus, you can define a setup for the unit cell transformations early in a
   lengthy macro, then modify the crystal and just run the 
   unit cell transformation later on.
   In addition you can define the atoms that are affected by the 
   unit cell transformation operation with the ==>'sele' and 'dese' commands.
3  onew
!p onew a,b,c

   Defines the position of the new origin in terms of multiples <a>,<b>,<c>
   of the old base vectors. The default at program startup is 0.0, 0.0, 0.0
3  oold
!p oold a,b,c

   Defines the position of the old origin in terms of multiples <a>,<b>,<c>
   of the new base vectors. The default at program startup is 0.0, 0.0, 0.0
3  reset
!p reset

   Reset all transformation definitions back to the default values at 
   system start. 
3  run
!p run

   Starts the transformation operation.
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   This command serves to select
   those atoms that will be modified by the unit cell transformation.

   Defines which atoms are included in unit cell transformations.
   Possible values for the first mandatory parameter are mutually
   exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection made stay valid until explicitly deselected!
3  set
!p set "deltahkl",<value>

   Sets the value of deltahkl to <value>, as needed for ==> 'h2new' and
   'h2old'. When DISCUS transforms a list of reflections, it checks, 
   how close the transformed values are to integer values h,k,l. The 
   allowed deviation from integer numbers is set by this command.
3  show
!p show

   Shows the current parameters of the transformation operation.
3  xnew
!p xnew a,b,c

   Defines the transformation through the relationship between the new 
   "x" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the old coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xnew','ynew' and 'znew'.
3  xold
!p xold a,b,c

   Defines the transformation through the relationship between the old 
   "x" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the new coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xold','yold' and 'zold'.
3  ynew
!p ynew a,b,c

   Defines the transformation through the relationship between the new 
   "y" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the old coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xnew','ynew' and 'znew'.
3  yold
!p yold a,b,c

   Defines the transformation through the relationship between the old 
   "y" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the new coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xold','yold' and 'zold'.
3  znew
!p znew a,b,c

   Defines the transformation through the relationship between the new 
   "z" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the old coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xnew','ynew' and 'znew'.
3  zold
!p zold a,b,c

   Defines the transformation through the relationship between the old 
   "z" coordinate of an atom in terms of multiples <x>, <y>, <z> of
   the new coordinates of the atom.
   If you choose this definition of the unit cell transformation, you MUST
   define all three ==> 'xold','yold' and 'zold'.
2  ther
!p ther [{"all" | "2d"}]
!p ther "mol",[{"all" | "2d"}]
   Error notice: 
   Previous to Version 5.13.0
   the ==> 'therm' command erroneously used too large a displacement.
   The average <u^2> were actually 3 times too large. 

   Randomly displaces all atoms according to their respective isotropic
   thermal coefficient. The directions of the displacements are distributed
   in uniform random distribution, the amplitude of the displacements
   are Gaussian distributed with FWHM calculated from the isotropic B.
   As default the displacements are performed in all 3 dimensions. For
   2d simulations however, the displacement in all directions corresponding
   to a size of one unit cell can be switched off by the parameter "2d".
   The value "all" is equal to the default.

   If the second parameter is set to "mol", the complete rigid molecule
   is displaced according to the isotropic temperature factor 
   defines via a "mole_biso[i]=" statement or specified on a 
   "molecule biso,<value>" statement in the ==> Unit cell file.

   The temperature factor of the atom at the origin of the molecule
   is NO longer used!
2  variables
   The program recognizes free variables:

!p "i[ ]"  integer variables
!p "r[ ]"  real variables

   The current implementation allows 501 free variables [0] through [501] each.

!p "res[ ]"  Result of several calculations that return more than one
!p           value.
!p           res[0] contains the number of values returned, res[1] to 
!p           res[res[0]] contain the actual values.
!p           The values of "res" change every time, a command is applied
!p           that returns more than one value. The old values are lost !

   Several other variables are linked to structural values:

!p "x[<i>]",
!p "y[<i>]" and 
!p "z[<i>]" are the fractional coordinates of the atom number <i>.

!p "at_name[<i>]" is a character variable that holds the name of
!p          of atom number <i>
!p "at_type[<i>]" is a character variable that holds the name of
!p          of atom type <i>

!p "m[<i>]" is the number of the scattering curve for atom <i>.

!p "b[<t>]" is the isotropic B value for atom type <t>.

!p "occ[<t>]" is the occupancy for atom type <t>.

!p "surf[<i>, <j>] are the j components of the surface vector for 
            atom number <i>. These will all be zero unless the 
            atom is close to an external surface.

!p "n[1]"   is the total number of atoms in the crystal, this variable
!p          is read only.
!p "n[2]"   is the total number of different scattering curves in the
!p          crystal, this variable is read only.
!p "n[3]"   is the total number of atoms in the original unit cell,
!p          this variable is read only.
!p "n[4]"   is the total number of molecules in the crystal, this variable
!p          is read only.
!p "n[5]"   is the total number of different molecule types in the
!p          crystal, this variable is read only.
!p "n[6]"   is the total number of molecules in the original unit cell,
!p          this variable is read only.
!p "n[7]"   is the total number of non-void atoms in the original unit cell,
!p          this variable is read only.

!p "cdim[1,1]" lowest  x coordinate of any atom in the crystal.
!p "cdim[1,2]" highest x coordinate of any atom in the crystal.
!p "cdim[2,1]" lowest  y coordinate of any atom in the crystal.
!p "cdim[2,2]" highest y coordinate of any atom in the crystal.
!p "cdim[3,1]" lowest  z coordinate of any atom in the crystal.
!p "cdim[3,2]" highest z coordinate of any atom in the crystal.
               The variable "cdim" is read only.
!p "lat[<i>]"  Lattice constants a,b,c,alpha,beta,gamma
!p "vol[1]"    Unit cell volume in A**3
!p "rvol[1]"   Reciprocal unit cell volume in A**(-3)

!p "sym_n[1]"  Number of symmetry operations for the space group

!p "env[<i>]"      Index of neighboring atoms as found by 
!p                 ==> "find"
!p                 "env[0]" is the number of neighbors.

!p "menv[<i>]"      Index of neighboring molecules as found by 
!p                 ==> "find"
!p                 "menv[0]" is the number of neighbors.

!p "mol_cont[i1,i2]" Content of molecule number i1.
!p                 mol_cont[i1,0] gives the number of
!p                 atoms in the molecule. For <i2> > 0, the
!p                 information about the <i2>'nd atom in the
!p                 molecule is given. The number of the
!p                 atom in the crystal is returned.
!p                 read only
!p "mol_len[i1]"   Number of atoms in molecule i1.
!p                 read only
!p "mol_type[i1]"  Type of molecule no. i1
!p                 read/write
!p "mol_biso[i1]"  Isotropic B-value for Molecule type i1
!p                 read/write

!p "in_mole[i1]"   Molecule number in which atom i1 is located
!p                 read only

!p "pdf_dens[0]"   Number density for PDF calculations
!p "pdf_scal[0]"   Scale factor   for PDF calculations

   The variables can be assigned constant numbers:

!p i[0] =  1               ! Integer variable no 0 is set to "1"
!p r[4] =  1.5             ! Real variable no 4 is set to "1.5"
!p x[5] = -2.7888          ! X-coordinate of atom 5 is set to "-2.7888"

   Arithmetic expressions may be used on the right hand side:

!p i[i[4]+2] = 2.0*(i[2]+i[0])/(i[2]**2)
!p m[i[0]+50] = m[i[0]] ! The atom 50 atoms down the line from
!p                        atom no <i[0]> is assigned the same
!p                        scattering curve, thus essentially switching
!p                        its chemistry around !

   As shown in the example above, arithmetic operations can be nested
   and grouped by brackets "(" and ")".
2  vprod
!p vprod <u1>,<v1>,<w1>,<u2>,<v2>,<w2> [ ,<flag> ]

   This command calculates the vector product <uvw 1> X <uvw 2>.
   The <flag> is a string of three characters that indicates whether the
   input vectors or the output vector are given in direct or reciprocal
   space coordinates. The three characters correspond to: 

!p    first input vector,
!p    second input vector
!p    resulting vector

!p "drd" means: vector one is given in direct space coordinates, vector 2
!p              is in reciprocal space coordinates (hkl) and the
!p              resulting vector product is to be given in direct space
!p              coordinates

   Any combination of "d" and "r" is allowed.

   The output vector is stored in the result variable:
   "res[1]","res[2]","res[3]" vector product of vector 1 and vector 2
2  waves
!p wave

   Displaces the atoms along a wave. It generates sub level with prompt
   "discus/wave >".

   Further help topics are:

3  commands
   Valid commands at this level are

!p @       ! Execute a macro file (see main help)
!p =       ! Assigns the value to a variable (see main help)
!p acco    ! Sets the wave type to acoustic
!p amp     ! Sets the amplitude in Angstrom
!p asym    ! Shows asymmetric unit
!p chem    ! Shows the atoms present in the crystal
!p continue! Continue a stopped macro (see main help level)
!p dens    ! Sets the wave type to density wave
!p des     ! Deselects atoms
!p echo    ! Echo a string (see main help)
!p eval    ! Evaluates an expression for interactive check (see main help)
!p exit    ! Terminates 'wave'
!p func    ! Sets the wave function
!p help    ! Gives on line help for waves (see main help)
!p len     ! Sets the wave length in Angstrom
!p long    ! Sets the wave type to longitudinal
!p mdese   ! Deselects molecule types
!p mrepl   ! Selects molecules to be replaced by density wave
!p msel    ! Selects molecule types
!p opti    ! Sets the wave type to optical
!p osci    ! Oscillation vector for transverse waves
!p phase   ! Sets the phase of the wave at 0,0,0 in direct space
!p phigh   ! Sets the high probability for density waves
!p plow    ! Sets the low probability for density waves
!p repl    ! Selects atoms to be replaced by a density wave
!p rot     ! Sets type to rotational wave (molecules only)
!p reset   ! Reset and clear all definitions
!p run     ! Starts the calculation of the wave
!p sel     ! Selects atoms to be included in the wave
!p shift   ! Allows a constant shift to be added to the displacement
!p show    ! Show current settings
!p stop    ! Stops execution of a macro (see main help level)
!p system  ! Executes operating system command (see main help)
!p tran    ! Sets the wave type to transverse
!p vect    ! Sets wave vector
!p wait    ! Waits for user input (see main help)
3  acco
!p acco

   Sets the wave type to acoustic, atoms of opposite charge are
   displaced in the same direction.
3  amp
!p amp <value>

   Sets the amplitude in Angstrom
3  asym
!p asym

   Shows the content of the asymmetric unit. The names of those atoms,
   a number that is used as index for its scattering type, their position
   and temperature coefficient are listed. The number that is listed,
   is the number that refers to the scattering curve of that atom. It is
   contained in the variable m[<index>]. If a cell was read, all atoms
   are considered to be different, even if they are chemically identical
   and have the same temperature coefficient. If a whole structure was
   read, all atoms that are in the unit cell 0 <= xyz < 1, are chemically
   unique and have a different temperature coefficient are included in
   the asymmetric unit.
3  chem
!p chem

   Displays the type of atoms present in the crystal. For each type of
   atom, its scattering curve number, its name and its temperature
   factor are listed.
   Warning, even, if all atoms of a particular type have been deleted, its 
   scattering type will remain in the list. This list could therefore 
   include more types of atoms than are actually present in the crystal.
3  dens
!p dens

   Sets the type of the wave to be a density wave. All atoms selected
   by 'sel' or 'repl' will be modulated by the wave. The probability
   with which an atom is present oscillates between 'plow' and 'phigh'.
3  des
!p des { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   Deselects choices made by ==> 'sel' or ==> 'repl'. Possible values
   for the parameter are mutually exclusively:

!p "all"     all atoms of the crystal are deselected.
!p <name>    all the atoms called <name> of the crystal are deselected.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are deselected.

   More than one atom may be deselected at once.
3  func
!p func "box" [,<delta>]
!p func "sinus"
!p func "triang" 

   Sets the type of wave function used. The parameter can be any of the 
   strings listed.

   A) displacement waves:

!p "box"   : A box shaped wave function is used. The function is 
!p           symmetrical around the origin. This, however, can be
!p           changed by changing the phase at the origin, see command
!p           ==> 'phase'. The default is a symmetrical box function,
!p           i.e. a value of <delta> of 0.5. The value of <delta>
!p           can be given as additional parameter to us an asymmetric
!p           box function, i.e. maxima and minima have different widths.
!p "sinus" : A sinusoidal wave function is used. The displacement is given
!p           by amp*SIN(arg).
!p "triang": A triangular displacement is applied. The displacement linearly
!p           increases from zero to amp and drops back to zero at the end
!p           of the wave. The point at 0/4 = 4/4 wave length has displacement
!p           zero.

   The constant shift is added to these displacements.

   B) replacement waves:

!p "box"   : A box shaped wave function is used. The occupation probability
!p           of the original atom, see ==> 'repl', is equal to <plow> along 
!p           half the wave length and <phigh> else. Other details were
!p           given above.
!p "sinus" : A sinusoidal wave function is used. The occupation probability
!p           is given by 
!p              amp * SIN(arg) + amp0, where
!p              amp = 0.5*( phigh-plow)
!p              amp0= 0.5*( phigh+plow)
!p           This will give a sinusoidal wave with minimum at <plow> and
!p           maximum value at <phigh>.
!p "triang": A triangular occupation probability is applied. The occupation
!p           probability linearly increases from <plow> to <phigh> and drops
!p           back to zero at the end of the wave.
!p           The point at 0/4 = 4/4 wave length has the occupation
!p           probability of <plow>.
3  len
!p len <value>

   Sets the wave length in Angstrom
3  long
!p long

   Sets the wave type to longitudinal
3  mdes
!p mdes { "all" | <number> } [ , <number> ...]

   This command deselects all or individual molecule types used for
   the plotting output.
3  msel
!p msel { "all" | <number> } [ , <number> ...]

   This command allows to select the molecule types to be used for
   the plotting output. By using 'msel' the atom selection becomes
   invalid. The parameter "all" will select ALL molecule types.
   Alternatively individual molecule types can be selected using the
   corresponding <number>. In order to use atoms again, use the 'sele'
   command.
3  mrep
!p mrep <typ1>,<typ2> [,"viceversa"]

   This command selects the molecules that will be replaced by a density 
   function. The parameter <typ1> specifies the molecule type to 
   eventually be replaced by type <typ2>. Repeat the command to select
   more than one molecule type. To deselect use 'mdes'. To remove the
   molecules rather than replacing them, set <typ2> to zero.

   If the third optional parameter "viceversa" is given, the molecules 
   of type <typ2> are replaced by molecules of type <typ1> with the 
   opposite probability. 
   This is useful, if you have a random arrangement of molecule types
   <typ1> and <typ2> and would like to obtain a density wave that 
   fluctuates between these two types. If the optional parameter is
   omitted, only molecules of type <typ1> are replaced and all 
   molecules of type <typ2> are not changed. 
   Keep in mind that you should select only those molecules that you 
   want to exchange, and do not use the ==> msel all construction.
3  rot
!p rot <u>,<v>,<w> [,<x>,<y>,<z>]

   This command selects the rotational wave mode which is only available
   when using molecules. The wave amplitude is here used as rotation angle
   rather than as displacement or probability as for the other modes.
   The parameters <u>,<v>,<w> define the rotation axis in real space. The
   origin of the rotation axis is the origin of the molecule. However,
   an offset <x>,<y>,<z> for this origin can be specified as optional
   parameters.
3  opti
!p opti

   Sets the wave type to optical, atoms of opposite charge are
   displaced in opposite directions.
3  osci
!p osci <x,y,z>

   Sets the direction of the oscillation vector for transverse
   waves.
3  phase
!p phase { <value> | "random" }

   Sets the phase of the wave at 0,0,0 in direct space in degrees.
   The initial phase is zero. With phase = 0, a sine wave
   results, with phase = 90 a cosine wave.
3  phigh
!p phigh <value>

   Sets the upper probability limit, with which an atom is retained by a
   density wave. The maximum occupancy of the atom reaches <value>. 
3  plow
!p plow <value>

   Sets the lower probability limit, with which an atom is retained by a
   density wave. The minimum occupancy of the atom reaches <value>.
3  repl
!p repl { "all" | <name> | <number> } , { <name> | <number> } [,"viceversa"]

   This command selects those atoms that will be replaced by a density 
   function. Possible values for the first mandatory parameter are mutually 
   exclusively:

!p "all"     all atoms of the crystal are replaced by the atom defined
!p           by the second parameter.
!p <name>    all the atoms called <name> of the crystal are replaced by
!p           the atom defined by the second parameter. This includes
!p           symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <name>
!p           are replaced by the atom defined by the second parameter.

   The second parameter defines the atom, the original is replaced by.
   If a name is given, it need not to be present in the original crystal.
   A new scattering type is automatically added to the table. If a number
   is given, to which no corresponding atom exists, an error message is
   displayed.

   If the third optional parameter "viceversa" is given, the atoms 
   of the first type are replaced by atoms of the second type with the 
   opposite probability. 
   This is useful, if you have a random arrangement of atoms types
   and would like to obtain a density wave that 
   fluctuates between these two types. If the optional parameter is
   omitted, only atoms of the first type are replaced and all 
   atoms of the second type are not changed. 
   Keep in mind that you should select only those atoms that you 
   want to exchange, and do not use the ==> sel all construction.

3  reset
!p reset

   Reset all wave definitions back to the default values at 
   system start. 
3  run
!p run

   Starts the calculation of the wave
3  sel
!p sel { "all" | <name> | <number> } [ , { <name> | <number> } ...]

   This command serves to select
   those atoms that will be modified by a wave function.

   Defines which atoms are included in a wave. Possible values
   for the first mandatory parameter are mutually exclusively:

!p "all"     all atoms of the crystal are included.
             This includes the "voids" in the structure, which are stored
             as scattering curve number zero.
!p <name>    all the atoms called <name> of the crystal are included.
!p           This includes symmetrically not equivalent atoms.
!p <number>  all atoms of the crystal that are of scattering type <number>
!p           are included.

   More than one atom may be selected at once.

   The selection made stay valid until explicitly deselected!
3  shift
!p shift <amount>

   A constant shift <amount> is added to the displacement of the atoms
3  show
!p show

   Shows the current settings for the wave.
3  tran
!p tran

   Sets the wave type to transverse
3  vect
!p vect <x,y,z>

   Sets the direction of the wave vector in units of the lattice
   constants. The wave length has to be set with ==> "len".
2  wyckoff
!p wyckoff <x>,<y>,<z> [,{"full" | "symbol" | "xzy" | "matrix" }

   Shows all symmetry operations that copy an atom at position <x>,<y>,<z>
   onto itself. These are the symmetry operations of the current space group,
   not the simple point group symmetry.

   The following results are written into res[*]:
      res[1] Multiplicity of this site
      res[2] Highest multiplicity divided by multiplicity of this site
             i.e. number of symmetry operations that copy the site onto
             itself.
      res[3] Multiplicity of a general position xyz in this space group
             == highest multiplicity
      res[4...] Number of the space group symmetry elements that copy
             the position onto itself.

!p "full"

   The default setting, produces a full listing. This includes:
       the symmetry matrix as (3x4) matrix
       the symbol as printed in the International Tables
       the resulting atom positions xyz, as printed in the International Tables

   For each symmetry operation DISCUS lists the number in square brackets,
   and for centered space groups the number within each block that corresponds
   to one centering vector in round brackets. With the setting 
   ==> set generator,symmetry the sequence corresponds to that listed
   in the Tables.

!p "symbol"

   This produces a short list that consists of the symbol as used in the
   International Tables.

!p "xyz"

   This produces a short list that consists of the symbolic atom positions
   xyz, as used in the International Tables.

!p "matrix"

   This produces a list that consists of the (3x4) symmetry matrices.

2  bugs
!p Known bugs

   Here is a list of known bugs of DISCUS which are on our 'repair
   list':

!p - DISCUS hangs if the input is redirected from a file ('discus < file')
!p   and the prompt status is ON if command line editing is used. 
!p   Use 'set prompt,off' or 'set prompt,redirect' in the first
!p   line of the file to be redirected to avoid the problem.

2  errors

   The program has been written such that it should handle almost
   any typing error when giving commands and hopefully all errors
   that result from calculation with erroneous data. When an error
   is found an error message is displayed that should get you back
   on track. See the manual for a complete list of error messages.

   Error messages concerning the command language are explained in
   the -> command language section of the online help. Application
   specific commands are described here and are grouped as follows:

!p APPL   Errors specific to DISCUS usage
!p CHEM   Errors at the chemistry sub level
!p FOUR   Errors related to Fourier Transform
!p MMC    Errors at the Monte Carlo level
!p PDF    Errors at the PDF level
!p RMC    Errors at the Reverse Monte Carlo level

   Each error message is displayed together with the corresponding
   category <cccc> and the error number <numb> in the form:

!p ****CCCC****message                    **** numb ****

   Type
   help error <cccc> <numb>
   to get an explanation for the error message and hints for possible
   steps to correct the situation.

   In the default mode DISCUS returns the standard prompt and you can 
   continue the execution from this point. You can set the error status
   to "exit" by the ==>'set' command. In this case DISCUS terminates 
   if an error is detected. This option is useful to terminate a faulty
   sequence of commands when running DISCUS in the batch mode of your
   operating system.
   If you are a bit more daring, you can use the "live" error setting.
   With this setting, DISCUS will continue to run a macro after an 
   error has occurred. This is helpful if you attempt to read a file
   of unknown length with ==> 'fget' and need to catch the EOF signal.
   Other than that be careful!

3  appl

   This category lists error messages that are specific to DISCUS usage.
   You will find error messages regarding improper usage of atoms, 
   space group violations, etc.

4  -1
   Maximum number of Orient. matrices read

   The maximum number of orientation matrices that can be used for 
   microdomains is limited by the parameter "MAX_MD_ORI" in the file
   "microdis.inc". If necessary adjust this parameter and recompile the 
   program.
4  -2
   Improper limits for atom number

   Either of the upper or lower limits used on the 'append' command is 
   outside the range of atoms present in the crystal. Check whether 
   the limits are both positive, the upper limit is higher or equal to 
   the lower limit and whether both limits are less or equal to the 
   number of atoms present in the crystal. The number of atoms in the 
   crystal can be checked with the command: "eval n[1]". 
4  -3
   No atoms selected yet

   The plot and waves can only be run for selected atoms. Use the 'select' 
   command to select individual atom types or to select all atoms present 
   in the crystal. 
4  -4
   Extend of plot space is zero

   The dimensions of the space from which atoms are to be plotted is zero. 
   Check the values displayed by the plot 'show' command and use the 
   'exte' command to give appropriate values.
4  -5
   Too many microdomains within crystal

   DISCUS stores all microdomain positions in an array. The size of
   this array is defined by parameter MC_MAXMICRO in file "microdis.inc".
   If necessary readjust the value of this parameter and recompile the 
   program. 
4  -6
   Unknown microdomain type

   The microdomain type number used with the 'place' command does not 
   correspond to an existing microdomain type in the list. Check with 
   'show types' for a list of microdomain types that have been inserted 
   into the list of available microdomains.
4  -7
   Unknown space group symbol         

   The crystal file contains an unknown space group. Check the spelling of 
   the space group symbol. The allowed space groups are all 230 space 
   groups in the Int. Tables for Crystallography plus the space groups 
   given for alternative settings and cell choices of the monoclinic 
   space groups. 
   Refer to appendix A of the manual for a complete listing of space
   group symbols.
4  -8
   Too many points in reciprocal layer

   The number of points in reciprocal space that can be calculated by the
   Fourier transform is limited by the parameter "MAXQXY" in the file
   "qspace.inc". Check that the product of <na> and <no> is less or equal
   to "MAXQXY". If necessary adjust the parameter "MAXQXY" and recompile
   the program.
4  -9
   Unknown Output Format   

   An unknown output format was defined for the output level. Check 
   that either of: "stan", "gnu", "pgm" or "post" was used as output 
   format with the 'format' command. 
4  -10
   Too many Atoms in crystal

   The maximum number of atoms that can be stored in the structure 
   is determined by the parameter MAXATOMS in the file "crystal.inc". 
   By inserting new atoms or by defining too large a crystal on the 
   'read' command, this number was exceeded. If necessary, change the 
   value of the parameter MAXATOMS and recompile the program. 
4  -11
   Unknown threshold type
   The parameter given on the 'thresh' command does not correspond to 
   a valid entry. Check the spelling of the parameter.
4  -12
   Number of points must be > zero

   The value of the parameter given on the 'abs' or 'ord' command is
   less than one. This value represents the number of data points
   calculated along the respective direction. 
   The value must be at least one or higher.
4  -13
   Correlation matrix index outside limits

   The index of the correlation matrix element(s) is either less than
   one or higher than the number of defined microdomain types.
   Check the 'ccol', 'crow' and 'cele' commands for proper number of
   parameters. Use the 'show type' command at 'microdomain' sub level
   to see the number of microdomains currently defined.
4  -14
   Invalid space group & lattice constants

   While reading a new cell the program checks the space group and the 
   lattice constants for consistency. Either a space group was given 
   that is not included in the program, or the lattice constants do 
   not fulfill the constraints imposed by the space group. Check the 
   space group symbol and the lattice constants given in the input file. 
4  -15
   No microdomain input file name defined

   An attempt was made to insert a microdomain type without specifying
   the input file name. With the exception of content type 'free' all
   microdomains require an input file from which the new atom positions
   are read.
   Check the current defaults by 'show def' and the parameters given on
   then 'cont' command.
4  -16
   Status for log must be : "on" or "off"

   The second parameter for the 'log' command must be either "on" or
   "off".
4  -17
   Index of matrix outside limits

   The first parameter on the 'mrow' command is the index of the row
   that is to be inserted. Allowed values are one, two or three.
4  -18
   No orientation with this number exists

   The orientation matrix requested as parameter on the 'orie' command
   does not exist. Use the 'show orie' command to view the list of
   defined orientation matrices. Check whether three 'mrow' commands
   were used for each orientation matrix that you intended to set up.
4  -19
   Atom number outside limits

   The number of the atom is either less than one, larger than the current
   number of atoms in the crystal or even larger than the maximum 
   number of atoms allowed in your implementation.
   Check the value of the parameter(s) on the 'remove' and 'switch'
   commands or check the index of the variables "m", "x", "y" or "z".
   Check the number of atoms present in the crystal by the command:
   'eval n[1]'.
4  -20
   Unknown element, no Fourier calculated

   An element was detected in the list of atoms for which there is no 
   scattering curve available. The Fourier transform is not calculated 
   at all. Check the name of all atoms present in the crystal using 
   the 'asym' and 'chem' commands. If a charged ion was given, this 
   valence might not be present in the list of scattering curves. 
   Refer to Appendix b of the manual for a list of internally stored 
   names.
   If the 'scat' and/or 'delf' commands were used, any name may be used.
   Check whether the commands were used properly.
4  -21
   No element present, no Fourier calculated

   There are no elements present at all in the crystal. The Fourier 
   transform is not calculated at all. Most likely, the Fourier 
   was called before a structure or unit cell was read, or an error 
   occurred during the reading of the structure or unit cell. 
4  -22
   Incompatible standard file sizes

   While attempting to add two Standard files, DISCUS encountered
   different length of rows or columns in the two input files. The 
   adding is interrupted at this stage. The indices along the
   abscissa and ordinate at which the error occurred, is displayed
   as well, check the input file for erroneous content.
   Also check, whether the parameters nx,ny in the two input files
   are identical as well as the xmin,xmax,ymin and ymax parameters
   in the second line of both input files. 
4  -23
   Incompatible GNUPLOT file sizes

   While attempting to add two GNUPLOT files, DISCUS encountered
   different length of rows or columns in the two input files. The
   adding is interrupted at this stage. The line number in which
   the error occurred, is displayed as well, check the input file
   for erroneous content.
4  -24
   Different coordinates in GNUPLOT files

   While attempting to add two GNUPLOT files, DISCUS encountered
   different coordinates in the two input files. The adding 
   is interrupted at this stage. The line number in which the
   error occurred, is displayed as well, check the input file for
   erroneous content.
4  -25
   Different coordinates in 1-dim files

   While attempting to add two 1-dim files, DISCUS encountered different
   coordinates in the two input files. The adding is interrupted at this
   stage.The line number in which the error occurred, is displayed as
   well, check the input file for erroneous content.
4  -26
   Too many different atoms in crystal

   The maximum number of different atoms allowed in your implementation 
   was exceeded. No more new types of atoms can be inserted into the
   structure. Check the chemistry of your crystal by the 'asym' and
   'chem' commands. All atoms are considered different types that are
   chemically different, have different charge or a different temperature
   coefficient. If all types are needed, modify the parameter "maxscat"
   in the file "param.inc" and recompile the program. See chapter 9.1
   of the manual for further information. 
4  -27
   No atom of this type present in crystal

   An atom was selected for displacement by a wave or for plotting that 
   does not exist within the crystal. Check the spelling of the atom 
   name, and the chemistry of the crystal by the 'asym' and 'chem' 
   commands. 
4  -28
   Input parameters must be > zero

   This function/command requires non-negative parameters.
   Check the values of the parameters and the explanation for the function
   or command used for valid ranges of numerical input.
4  -29
   Too many different microdomain types

   The maximum number of microdomain types is defined by the parameter 
   MAX_MD_TY in file "microdis.inc". If necessary adjust this parameter 
   and recompile the program. 
4  -30
   Unknown boundary type

   The boundary type of microdomains is not set to either of "block", 
   "face", "fuzzy" or "sphere". Check the 'boundary' command at sublevel 
   'microdomains' for proper spelling. 
4  -31
   Unknown distribution mode

   The distribution type for microdomains is not set to either of 
   "lattice", "paracrystal" or "random". Check the 'distribution' command 
   at sublevel 'microdomains' for proper spelling. 
4  -32
   Length of vector is zero

   An attempt was made to calculate the angle between two vectors 
   while one of them is of length zero. Check the parameters given 
   on the 'bang' or 'rang' command for proper numbers. 
4  -33
   No microdomain types defined yet

   An attempt was made to use the 'create' or 'run' command before 
   any microdomains were defined by the 'insert' command. Check for 
   proper sequence of commands and missing or misspelled 'insert' commands. 
4  -34
   Form does not appear to be closed

   A microdomain type of boundary type 'face' was defined for which 
   the form supplied by the 'bound' command does appear not to be closed. 
   DISCUS checks whether the origin of the microdomain is inside the
   microdomain and the positions at 1.0*10**9 along each of the base
   vectors is outside the microdomain. If one of these conditions is
   not met, the error message is given. Check the 'boundary' commands
   used to define the microdomain type. 
4  -35
   Volume of unit cell <= zero

   The volume of the unit cell was calculated as zero or a negative
   value.
   Check the lattice parameters given in the input file. Are there
   any accidental "-" signs ? Do the angles form an impossible shape ?
4  -36
   Unsuitable file types for inverse Fourier

   Not every combination of file types is allowed for an inverse
   Fourier synthesis. Allowed file combinations are:

!p   file  a     file b
!p   intensity   phase
!p   amplitude   phase
!p   real part   imaginary part
4  -37
   No filename defined yet            

   An attempt was made to write output to or read from a file without 
   defining a file name. DISCUS does not provide default names for the
   output of the 'plot' command or the input file names. Check the
   'outfile' command at sublevel 'output' and 'plot' or the 'content'
   command at sublevel 'microdomains'. 
4  -38
   Unsuitable file types for Patterson

   Not every combination of file types is allowed for a Patterson
   synthesis. Allowed file combinations are:

!p   file  a     file b
!p   intensity   any file type
!p   amplitude   any file type
!p   real part   imaginary part
4  -39
   All elements of correlation matrix zero

   Since the correlation matrix gives the probabilities for existence 
   of a microdomain type, not all elements may be equal to zero. The 
   default values at startup are 1 for the diagonal elements and zero 
   for all other elements. Display the correlation matrix with the
   command 'show corr' and check the 'ccol', 'cele' and 'crow' commands 
   for proper values. 
4  -40
   Microdomain type cannot be removed

   DISCUS can only remove those microdomain types from the list of types 
   that have not yet been used by the 'create' command, i.e. only those
   microdomain types that have been inserted into the list by the 'insert'
   command after the last 'create' command. 
4  -41
   File specifier must be "a" or "b"

   The two files for inverse Fourier and Patterson synthesis are
   referred to by "a" and "b". The first parameter on the 'file' and
   the 'type' commands must be either "a" or "b".
4  -42
   Type must be: inten,ampl,phase,real,imag

   The file type for inverse Fourier and Patterson synthesis must be
   specified as one of the following strings:
   "intensity","amplitude","phase","real","imaginary"
   They may be abbreviated to a unique string.

   Check the spelling of the parameter.
4  -43
   Not enough parameter for filename format

   An attempt was made to generate a file name from a string like
   "text%dtext" without supplying enough numerical parameters.
   Check that the spelling of the sting within " " is correct. Are 
   there any unwanted %d combinations?. Check the number and type
   of parameters following the file name.
4  -44
   Right quotation mark missing in format

   An attempt was made to generate a file name from a string like
   "text%dtext" without supplying the right quotation mark.
   Check the line and provide the missing ".
4  -45
   Too many atoms in environment

   The indices of all atoms found are stored in the internal variable
   "res". More atoms were found that fit into the dimensions of "res".
   Restrict the search for the environment to a smaller shell or
   change the dimension of "res_para" in file "param.inc".
4  -46
   Error reading title of structure

   An error occurred while reading the title line of a structure or
   unit cell file. Check the file for any garbage.
4  -47
   Error reading space group symbol

   An error occurred while reading the space group  line of a structure or
   unit cell file. Check the file for any garbage.
4  -48
   Error reading lattice constants

   An error occurred while reading the lattice constants of a structure
   or unit cell file. Check the file for any garbage or accidental letters.
4  -49
   Error reading atom coordinates

   An error occurred while reading the atom coordinates of the atom 
   listed.  Check the file for any garbage. Is the line of the type
   Name x y z B
   Are there letters among the numerical values?
4  -50
   Wrong format for 1-dimensional data

   You tried to write a one-dimensional section of space as either
   Postscript, PGM or PPM Bitmap. One-dimensional data can only be
   written as "gnuplot" or "standard" format.
4  -51
   Unsuitable file type for SHELXL format

   If the file format is set to "shelxl" to calculate the inverse Fourier of
   Patterson form SHELXL data, the file type must be set to either of
   "fobs" or "fcalc".

   Check the 'type' command for erroneous input.
4  -52
   Unsuitable input value for SHELXL format

   If the file format is set to "shelxl" to calculate the inverse Fourier of
   Patterson form SHELXL data, the optional second parameter must be either of
   "fobs" or "fcalc".
   Check the input line for the 'form' command.
4  -53
   Too many different layer types

   You tried to define too many different layer types for a crystal with
   stacking faults.

   If necessary modify the value of "ST_MAXTYPE" in file "stack.inc"
   and compile the program.
4  -54
   Index outside limits

   The value given is outside the proper limits allowed by this command.
   This usually means that an array element is outside the current
   dimension of an array, for example a correlation matrix or you are
   trying to include too many atoms in the crystal. Check the section
   on dimensions in the manual.
4  -55
   No layers created at all

   During the creation of the stacking faults, none of the layer types
   met the conditions imposed by the correlation matrix. Check the
   correlation matrix for proper values.
4  -56
   Av. Transl. in plane of modulo vectors

   The average translation vector, - calculated from the matrix of
   translation vectors and the correlation matrix or read via the 'aver'
   command is in the plane defined by the two modulo vector that were
   read using the 'modu' command. 
   Use the 'show' command to check the values of the vectors. Correct
   the vectors by the 'aver', 'modu' commands.
4  -57
   Av. Translation is zero

   The average translation vector is a vector of length zero. 
   Use the 'show' command to check the values of the vector.
   If the average vector is set explicitly by ==> 'set trans,fixed', then
   correct the vector by the 'aver' command. 
   If the average vector is calculated from the translation and correlation
   matrix, the weighted sum of translation vectors is equal to zero.
   Use the 'show' command to check the values of the two matrices. 
   Correct the values by the ==> 'trans', 'crow', 'ccol', 'cele' commands.
4  -58
   No atoms written to file

   No atoms were written to the plot file after the run command. Check
   the settings using the command 'show' and check the online help for
   further details. The most common problem is a too small value for
   'thick'.
4  -59
   Invalid color or type selected for atom

   The color or type selected for plotting atoms is invalid. Check the
   online help for a list of valid numbers.
4  -60
   Output value NOT allowed using lots

   You calculated the Fourier using ==> 'lots'. In this case you can write
   intensities only as output.
4  -61
   Too many additional generators

   You tried to specify too many additional generators through the 
   "generator" key word in the structure file. The maximum number of 
   generators is specified in the file "gen_add.inc". If necessary, increase
   the value and compile DISCUS.
4  -62
   Too many additional symmetry operators

   You tried to specify too many additional symmetry operators through the
   "symmetry"  key word in the structure file. The maximum number of
   symmetry operators is specified in the file "gen_add.inc". If necessary,
   increase the value and compile DISCUS.
4  -63
   Molecule number outside limits

   You tried to select a molecule number that is less than zero or higher
   than the number of molecules in the crystal. Or the upper limit of a 
   range of numbers could be less than the lower limit.
4  -64
   Molecule type outside limits

   You tried to select a molecule type that is less than zero or higher
   than the number of molecule types in the crystal. Or the upper limit of a
   range of numbers could be less than the lower limit.
4  -65
   Too many molecules created

   You created more molecules than fit into the corresponding arrays. 
   Check the size of the crystal or the limits of loops used to create
   the molecules.
   If necessary adjust the maximum number of molecules in the file
   "molecule.inc" and compile DISCUS.
4  -66
   Too many molecules types created

   You created more molecule types than fit into the corresponding arrays. 
   Check the number of molecules in the crystal file or the limits of loops
   used to create the molecules.
   If necessary adjust the maximum number of molecule types in the file
   "molecule.inc" and compile DISCUS.
4  -67
   Molecules have different number of atoms

   You tried to swap two molecules of different length. This mode is
   possible for molecules of equal length only.
4  -68
   Mode only available for molecules

   Rotational waves are can act only onto molecules, not onto individual
   atoms
4  -69
   Microdomains overlap

   An atom was found that is inside at least two microdomains. The atom
   number and the microdomain numbers are written onto the screen.
   Check the distribution of the microdomains and the corresponding
   microdomain radii. Either the two microdomains are too close to each
   other or the radii of the microdomains are too large.
4  -70
   Delta value must be in interval 0 -> 1

   A wave function of type "box" was chosen. The optional second parameter
   gives the width of the lower half of the box in multiples of the 
   wave length. This value must be in the range 0 -> 1. The values 0 and 1
   are not allowed either.
4  -71
   Too many points in direct space layer

   The number of data points you selected with the 'rhona' and 'rhono'
   commands exceeds the maximum number of data points DISCUS can handle.
   The maximum value is defined in the variable MAXQXY in the file
   "config.inc". If necessary adjust this parameter and compile DISCUS
   again.
4  -72
   Too many atom types in file

   The number of different atom types in the structure file is too
   large. Note that DISCUS treats atoms of the same name but with 
   different B values as different atom types. The maximum value
   is defined in the variable MAXSCAT in 'config.inc'. If necessary 
   adjust this parameter and compile DISCUS again.
4  -73
   Transform. requires too many generators

   The old symmetry operations of the space group are always changed into
   additional generators and the new space group is P1. This allows you 
   to generate the structure from the list of atoms in the old asymmetric
   unit without running into a conflict between the symmetry and the 
   unit cell shape.
   If you have transformed the old unit cell into an oddly shaped or into
   a very large new cell, the old translations will be transformed into 
   a very large number of generators.
4  -74
   Molecule atom-number outside limits

   The argument to the variable "mol_cont" is outside the number of 
   atoms in this molecule, i.e. negative or too large.
   Check the number of atoms in this molecule through "mol_cont[i1,0],
   where <i1> is the number of the molecule.
   If you are reading a crystal structure, then the number of atoms is
   too large to fit into the space allocated for molecules. Adjust the
   parameter MOLE_MAX_ATOM in the file "molecule.inc"
4  -75

   No bond valence parameters for atom pair
4  -76
   Function not available for molecules

   The selected items for the program ATOMS must be individual atoms,
   not molecules.
4  -77
   Unknown wave length symbol used

   You used a wave length symbol unknown to DISCUS. Check for a typing
   error and consult the list of allowed wave length symbols in the help
   file through "help wavelength". The wave length of non listed radiations
   must be explicitly given as real value in Angstrom. 
4  -78
   Wrong optional parameter for HKLF4 format
4  -79
   Too many atoms in result array

   Through finding environments or similar operations too many atoms
   were found. Reduce the radius of the environment that you are searching.
   Alternatively increase the size of the variable "MAXPAR_RES" in file
   "param.inc"
4  -80
   Angle between Normal and Abscissa is 0

   The angle between the normal and the abscissa of the plot is 
   zero degrees. Check the values you selected with the ==> 'uvw', 'hkl'
   and ==> 'abs' commands, and verify the angle in the ==> 'show'
   output.
4  -81
   Invalid flag for space type

   Commands like ==> 'projection' and the ==> 'function' "scalpro" take
   an optional flag that indicates whether the vectors are to be taken 
   from direct or reciprocal space. Accordingly the flags are 2 to 4
   characters long and may contain only the letters "d" and "r".
4  -82
   Invalid molecule character

   The character keyword for a molecule may only be "atom". 
   If the molecule represents an extended object, used in small angle 
   scattering calculations, it may be "cube", "cylinder", or
   "sphere". 
   If the molecule represents a domain, it may be "cube", "cylinder", 
   "sphere", or "fuzzy". 
4  -83
   Molecule buildup failed

   DISCUS could not create the molecule.
   Check the molecule parameter lines in the structure file.
4  -84
   Error reading molecule parameters

   There seems to be a wrong keyword in the molecule entries.
4  -85
   Sharpened patternson requires HKLF4 file

   In order to calculate a sharpened Patterson function, the input file
   must be a SHELX HKLF4 file, i.e. contain h,k,l, I, sigma(i).
4  -86
   Unknown import format

   The import command was called with an unknown input format. Check the
   documentation on the ==> 'import" command for allowed values.
4  -87
   Different lattice constants

   You tried to include a domain into a host structure, whose lattice
   constants are different from those of the host crystal. 
   Check the header of the domain file and the host structure for 
   different metric. 
   If necessary, ==> 'transform' the domain structure into the unit cell
   metric of the host crystal prior to the insertion.
4  -88
   Bravais types differ

   You tried to include a domain into a host structure, whose Bravais
   lattice type is different from that of the host crystal. 
   Check the header of the domain file and the host structure for 
   different space group symbols
   If necessary, ==> 'transform' the domain structure into the unit cell
   metric of the host crystal prior to the insertion.
4  -89
   Unknown keyword in unit cell file

   There is an unknown keyword in the unit cell file. See help entry
   data for a complete listing of allowed keywords.

   Check the spelling of all keywords in the file.
   Is the first keyword identical to "title" ?
   Did you include the keyword "atoms" as last keyword of the header?
   Do all molecules end with "molecule end" ?
4  -90
   Unknown diffractometer geometry

   The powder diffraction module can handle Lorentz/Polarisation
   corrections for the following geometries:
   bragg    Bragg-Brentano Geometry
   neutron  A neutron Diffractometer in Debye-Scherrer geometry
   synchrotron  Synchrotron 
4  -91
   Unexpected pseudoatom name read

   DISCUS was reading a structure file in which the atom names stand for 
   a cluster. the cluster read, does not occur in the list of defines
   cluster names.
4  -92
   Error reading generators from structure

   DISCUS was reading a structure file which contained a "generator" 
   key word when the error occurred.

   Check that there are all 13 required parameters, that there are no
   alphabetic characters etc.
4  -93
   Unit cell constants <= zero

   At least one of the unit cell constants given in the current 
   structure or unit cell file is zero or less than zero.

   Check the 'cell' line in the input file for these errors.
4  -94
   Invalid domain descriptor in input file

   This error occurred while reading the file that contains descriptions 
   of domains. The file name was set by ==> 'input' within the 
   ==> 'domain' menu.
   The first parameter of the "domain" keywords in this file must be
   "character" or "content" or "file" or "fuzzy" or "end" or blank
   for the first "domain" keyword.
4  -95
   First domain keyword has parameters

   This error occurred while reading the file that contains descriptions 
   of domains. The file name was set by ==> 'input' within the 
   ==> 'domain' menu.
   The first "domain" keyword must not have any parameters, and must 
   be terminated by a "domain end" keyword, once all setting have been
   defined.
4  -96
   Illegal keyword in domain input file

   This error occurred while reading the file that contains descriptions 
   of domains. The file name was set by ==> 'input' within the 
   ==> 'domain' menu.
   
   After the standard header, a domain input file may contain only 
   domain descriptors. These start with a "domain" keyword and end
   with a "domain end" keyword". Valid specifiers within a domain are 
   "POSI", "XAXI", "YAXI, "ZAXI", "CENT", "XDIM", "YDIM", "ZDIM"
4  -97
   Atom type outside proper limits

   The atom type number is less than zero, or larger than the current
   number of different atom types present in the crystal. 
   Check the value, compare its value to n[2].
4  -98
   No atom types exist at present

   Wilson statistics requires that DISCUS knows which atom types were
   present in the sample, as a plot of 
   ln(average(formfactor**2)/average(intensity)) versus sin(theta)/lambda
   is evaluated. 
   Insert the atom types into a (dummy) structure and make sure that their
   relative amount is close to the actual sample composition.
4  -99
   No wavelength has been set

   Wilson statistics requires that DISCUS knows which wave length was used
   in the experiment, as a plot of 
   ln(average(formfactor**2)/average(intensity)) versus sin(theta)/lambda
   is evaluated. 
   Set the wave length through the ==> 'wvle' command in the 
   ==> 'fourier' menu.
4  -100
   Space group symbol missing in cell file

   The required "spcgr" <symbol> line in the input file does not contain
   a space group symbol. Check the input file and provide a proper 
   space group symbol.
4  -101
   Dimension of lots < 0 or > than crystal

   You are trying to use lots in the single crystal Fourier mode. At 
   least one of the lots dimension is less than zero or larger than 
   the crystal along that dimension. Check the line and inquire the
   crystal size with the ==> 'show cdim' command from the main menu.
4  -102
   Property value outside defined range

   While reading a cell file or structure, DISCUS encountered a property
   flag that is either zero or larger than currently defined. 
   May be the input file was edited manually? Set the property flag to
   1 to define the questionable atom as a standard atom type.
4  -103
   Too many atoms per unit cell

   The ==> 'aver' command in the ==> 'chem' menu experiences a situation 
   in which there seem too many atom per unit cell. 
   This error should never occur. 
   Please document and report to the author.
4  -104
   Powder output not defined as TTH or Q

   You did a ==> 'powder' calculation without defining the axis as either
   ==> 'set axis,tth' or ==> 'set axis,q'. The output menu does not know
   which axis you intended. Please rerun the powder calculation with the
   correct axis set.
4  -105
   Atom number outside limits

   While reading an internally stored structure, the actual atom number is
   found to be larger that the maximum atom number stored in the header.

   This error should never occur. 
   Please document and report to the author.
4  -106
   HKL steps for complete powder must be >0

   All three step sizes for the HKL increment ==> 'set dh', 'set dk',
   'set dl' are equal to zero!
   Make sure that at least one of these is set to a value larger than zero.
4  -107
   2Theta limits or step width are illegal

   You are using the ==> 'set axis,tth' option and either:
   The upper limit of 2Theta is lesser than the lower limit, 
      ==> 'set tthmin',    ==> 'set tthmax'
   The 2Theta step size is zero or negative
      ==> 'set dtth'

   Check the values and provide correct values.
4  -108
   Q limits or step width are illegal

   You are using the ==> 'set axis,q' option and either:
   The upper limit of Q is lesser than the lower limit, 
      ==> 'set   qmin',    ==> 'set   qmax'
   The Q step size is zero or negative
      ==> 'set dq'

   Check the values and provide correct values.
4  -109
   Connectivity definition does not exist

   You are referencing a connectivity definition by name or number,
   that DISCUS cannot find. 
   Was this connectivity never defined, or are you using a definition
   with a different atom type?
4  -110
   No connectivity definitions exist at all

   You are referencing a connectivity definition by name or number,
   but no definitions exist. 

   Did you forget to define connectivity definitions or did you read
   a new unit cell/structure after the connectivity was defined?
4  -111
   Error reading SCAT instruction
4  -112

   DISCUS encountered an error while reading the "scat" line in the current
   input file. Check if there are non printable characters in this line
   or if the line is empty.
   Error reading ADP  instruction

   DISCUS encountered an error while reading the "apd" line in the current
   input file. Check if there are non printable characters in this line
   or if the line is empty.
4  -113
   Could not find internal storage

   DISCUS cannot find the internally saved structure. 
   Check for typing differences between the save and read lines.
4  -114
   Error allocating

   DISCUS could not allocate the memory space for internal storage.
   
   Does your computer offer enough memory space, have you written huge files
   into the internal storage?
4  -115
   Different atom no on SCAT and ADP

   DISCUS uses the names and values on the "scat" and "adp" lines in the 
   cell/structure input file to assign atom types. As there is a one to one
   correspondence between the parameters on these two lines, the number of
   parameters on both lines must be identical.
4  -116
   Could not find definition

   You referenced a connectivity definition which does not exist. 
   Check that the connectivity definition was added and that the 
   connectivities were run.
   Check for spelling errors on all respective commands
4  -117
   This DISCUS has NeXus support disabled

   In order for DISCUS to be able to write NeXus files, it must be compiled
   and linked with the NeXus library. 
   Get the NeXus development library, with all dependencies and build a
   new DISCUS with NeXus.
4  -118
   No Fourier calculated yet, no output
   
   Before DISCUS can write an output file you need to calculated a diffraction
   pattern. This could be a:
   single crystal pattern via ==> 'fourier'
   powder pattern via ==> 'powder'
   single crystal pattern vis stacking faults ==> 'stack'
   Patternson ==> 'patterson'
   inverse Fourier vie ==> 'inverse'
4  -119
   Error reading atom number from RMCPROFILE

   DISCUS encountered an error while reading the number of atoms from
   an RMCPROFILE *.cssr file.
   Check line 3 of the input file. DISCUS expects an integer number.
4  -120
   Conn. Name is equal to variable name

   You used a connectivity name that is already used as a 
   variable name. This may lead to odd errors, as DISCUS would in most
   cases use the variable value instead of the connectivity name.

   You must choose a connectivity name that is not used as variable name.
4  -121
   Error calculating x-position for powder
4  -122
   Atom type number outside limits
4  -123
   Atoms are at identical positions

   While calculation a powder pattern DISCUS found a pair of atoms
   on identical positions. 
4  -124
   Powder output type wrong /= I, S(Q), F(Q)
4  -125
   S(Q), F(Q) require Q-axis
4  -126
   H-M symbol in CIF file is a question mark

   The Herman Mauguin Symbol in the CIF file is a question mark.
   Please correct the space group in the structure file.
   Currently DISCUS does not interpret the symmetry operations
   listed in the CIF file
4  -127
   Empty content file

   One of the domain content files does not contain any atoms. 
   Check the files to ensure that they all contain at least one
   atom.
   If an empty file is intended, set the error handling to 'live'.
   See 'set error, live'
4  -128
   Could not add the new decoration
4  -129
   No decoration definition exists yet

   DISCUS was instructed to start decorating the crystal, yet no
   definitions for the decorations had been set. 
   Use ==> 'add' to start a decoration type
4  -130
   No surface atoms found

   DISCUS could not find any of the surface atoms specified for the 
   decoration model. 
   Plot the crystal and inspect its surface, use ==> 'chem' to 
   check the composition. 
4  -131
   No surface sites for ligands found

   DISCUS could not find any of the surface atoms specified for the 
   decoration model. 
   Plot the crystal and inspect its surface, use ==> 'chem' to 
   check the composition. 
4  -132
   Mismatch between corners and increments

   You used 'na', 'no', 'nt' to specify the number of data
   points along an axis in reciprocal space. The corresponding
   corners are, however, identical. 
   Adjust the number of data points along this axis to "1"
   or adjust the corners vie 'll', 'lr', 'ul', 'tl'.
4  -133
   Refinement param index outside limits

   You used a refinement parameter "ref_para[<index>]" with an
   index outside the dimension defined in the diffev section.
   Has DIFFEV been initialized properly?
   Did you use the DIFFEV command "run_mpi"?
   DID you use the DIFFEV "write kid" command ? 
4  -134
   Connectivity list has not been created

   A connectivity list was referenced, but has never been 
   created. Use the ==> 'connectivity' command "create" first.
4  -135
   Did not find a connectivity for this atom

   A connectivity list was referenced for an atom, but 
   has never been created. Use the ==> 'connectivity' 
   command "create" first.
4  -136
   Connectivity name does not match

   A connectivity list was referenced by its name but 
   does not seem to exist. Use the ==> 'connectivity' 
   command "create" first.
   Check for typing mismatched between the creation and usage.
4  -137
   Atom number is outside crystal

   An atom number was referenced that is either zero or 
   negative or higher that the current number of atoms 
   in the structure. 
   Check for typing errors in the expression that is used
   to calculate the atom.
4  -138
   Atom is already inside a molecule

   The molecularizer detected that an atom is already part 
   of a valid molecule. Currently any given Atom may be part
   of a single molecule only.
4  -139
   Layer type outside limits

   The ==> 'first' command in the stack menu allows to specify 
   the type of the first layer. By default it is randomly
   chosen from all layer types. If you specify a number on the
   'first' command, this number must be in the range 
   [1: number_of_layers_specified]
   Check the number of ==> 'layer' commands and the value of
   the number on the 'first' command line. 
4  -140
   CSSR file not allowed for read cell

   The RMCprofile cssr file will in all likelihood contain 
   atoms from several unit cells. You have to read this as 
   a "structure". If the file does indeed contain atoms 
   just from a asymmetric unit, read the file as "structure"
   then save it as a "cell" file and expand this file to a 
   full unit cell.
4  -141
   Atoms are too close to each other

   During a read/cell, DISCUS discovered that atoms are at 
   identical places in a unit cell. 
   Check the values for the atom coordinates in the cell file.
   There might be two atoms in the file that are separated 
   by integer unit cell vectors.
4  -142
   Cubeoctahedron only allowed in cubic systems.

   A cobeoctahedron was specified as the form on the boundary
   command for a crystal that is not cubic. The
   cubeoctahedron is a special form for cubic crystals only.
   Unpredictable forms would result for other crystal systems.
4  -143
   Wrong parameters for this bond type

   The various bond models require a specific number of
   anchor atom types for the surface. 
   normal   1 surface atom
   bridge   2 surface atom
   double   1 surface atom for each bond
   acceptor 1 surface atom
   donor    1 surface atom

   Check if the current environment is properly named
   on the ==> "add" command within the decoration menu.
   Check the parameters on the 'bond' command.
4  -144
   Too few atoms in ligand molecule 

   The bond or axis instruction within the decoration menu
   contained an atom number for the ligand molecule that is
   outside the range of atoms in the molecule. Check if an 
   atom is missing in the ligand structure file or if the 
   atom number on the bond/axis command is erroneous.
4  -145
   Decoration name not recognized

   The first parameter on the ==> 'decoration' 'set'
   command must be the name of one of the decoration
   schemes that were started with an 'add' command.  
   add <name>, <deco_type>
   set <name>, ...
   For the current command the value of <name> differs
   from all names given on any 'add' command.
4  -146
   No. of atoms not an integer multiple of sites

   An attempt was made to create structure with the atoms
   in a unit cell sequence from an RMCprofile input file.
   The total number of atoms in the input file should 
   have been an integer multiple of the number of 
   sites per unit cell.

   Check the RMCprofile setting that were used to create the 
   structure. Another reason might be that the atoms are 
   very disordered and DISCUS cannot find the correct number
   of sites per unit cell.

4  -147
   Unknown export format

   The export format that was given is not known.
   Check the command line for erroneous spelling.
4  -148
   1bar not at origin

   A centrosymmetric structure that you want to export to SHELX
   must have its center of symmetry at the origin. 
   Check the setting. If necessary shift the origin with the
   ==> 'transform' menu.
   
4  -149
   Error reading OCC instruction

   An error occurred while reading the OCC instruction in
   a crystal file. Check the input file for erroneous numbers
   or values.
4  -150
   Occupancy outside [0:1]
   
   An atom occupancy must be in the interval [0:1]
   Check all parameters and expressions from which the
   occupancy was derived.
4  -151
   AND and DEFAULT simultaneously in isprop
   
   The function 'isprop' takes arguments like:
   isprop('NMDOEIL')         ! By default == AND
   isprop(AND:'NMDOEIL')
   isprop(OR:'NMDOEIL')
   isprop(AND:'NMDOEIL', OR:'NMDOEIL')
   The combination
   isprop('NMDOEIL', AND:'NMDOEIL') 
   is illeagal, as the first argument without keyword 
   corresponds to the AND condition as well.
4  -152
   Interactive plot for JMOL only
   
   Currently the only interactive plot program 
   associated by the Discus-suite is JMOL. 
   Linux users: Make sure you have JMOL and JAVA
   installed.
   Windows users, make sure you have the Java Runtime
   Environment JRE installed.
4  -153
   Angle between Normal and Ordinate is 0
   
   A plot was attempted with this angle 
   at zero degrees. Check the setting for the 
   normal, given by the ==> 'plot' 'uvw' or
   ==> 'plot' 'hkl' command and the ordinate
   ==> 'plot' 'ord'.
4  -154
   Angle Ordinate to (Normal/Abscissa) is 0
   
   A plot was attempted with this angle 
   at zero degrees. Check the setting for the 
   normal, given by the ==> 'plot' 'uvw' or
   ==> 'plot' 'hkl' command and the abscissa
   ==> 'plot' 'abs'.
4  -155
   Coordination range is erroneous

   For the user defined property like behavior, the 
   coordination number limits must be given as
   nmin:<lower>, nmax:<upper>
   emin:<lower>, emax:<upper>
   For each of the pairs nmin/nmax and emin/emax
   the value of <lower> must be less or equal to 
   the value of <upper>.
3  chem
   Errors at the chemistry level of DISCUS

4  -1
   Too many points for histogram

   The number of points you specified for the histogram exceeds the 
   dimensions of the array. 
   Check whether you need this many points. If so enlarge the value
   of "chem_max_bin" in the file "chem.inc"
4  -2
   Can't store all information in variable RES

   The number of items produced by the command exceeds the dimension of the
   result array.
4  -3
   Invalid range for bond-length histogram

   The minimum value of the bond lengths is +0.01, and the maximum 
   value (parameter #2) must be greater than the minimum value.
   Check the parameters on the ==>'set bl' command.
4  -4
   Invalid SIGMA entered

   The sigmas must all be larger than zero.
   Check the parameters on the ==>'set fs', 'set wsig' commands.
4  -5
   Too many different atoms on ONE site

   The number of different atoms found on one site in the unit cell 
   exceeds the dimensions of the array. 

   You have to set the value of "chem_max_ave" to a larger value and
   compile DISCUS again.
4  -6
   Atom name ALL not allowed for this command

   The ==>'corr' command requires explicit atom names. You cannot use
   the atom name "ALL".
4  -7
   Atoms need to be different

   The ==>'corr' command requires the two atom types to be different. 
   The self correlation of atom1 with itself is stored by the 'freq'
   command as well.
   If you know that there are no other atom types in the given direction, 
   set the second atom type to "void".
4  -8
   No neighboring atoms found

   The 'freq' command found no neighboring atoms for the given distance
   and direction. Check the online help for more information on 'neig'.
4  -9
   Invalid correlation vector index given

   The given correlation vector index was invalid. Check your input.
4  -10
   Invalid crystal site given

   A invalid site number for the current crystal was entered. Check that
   the structure is loaded and your site number is valid.
4  -11
   No correlations selected

   Before you can calculate correlations you need to define the calculation
   more using the 'set neig' command in the 'chem' sublevel.
4  -12
   Too many correlation definitions

   The command 'set corr,add' was executed but there is no more space
   for the additional correlation definition. Use 'set corr,rese' to
   discard previous definitions or adjust the value of CHEM_MAX_COR in
   'chem.inc' and recompile DISCUS.
4  -13
   Correlation direction invalid

   The entered direction for the calculation of the displacement correlations
   is invalid (e.g. length zero), check your input.
4  -14
   Too many displacement directions

   You have entered too many displacement directions for the calculation
   of displacement correlations. Use 'set dir,rese' to discard the
   previous input our adjust the parameter CHEM_MAX_DIR in 'chem.inc'
   and recompile DISCUS.
4  -15
   No displacement directions selected

   You have tried to calculate displacement correlations but there are
   no directions defined that are used to obtain the displacement. Use
   the command 'set dir,..' to enter the desired values.
4  -16
   Failed to apply periodic boundaries

   DISCUS is not able to apply periodic crystal boundaries (should not
   happen).
4  -17
   Correlation fields require same mode

   To calculate correlation fields, all neighbor definitions must be
   made using the same mode, i.e. 'dist' or 'vec'. Redefine the neighbors
   to be used via the command 'set neig'. This condition is only valid 
   for 2-dimensional correlation fields.
4  -18
   Correlation fields require same # vectors

   If working with neighboring vector definitions to determine a
   2D correlation field, the number of vectors must be the same for both
   directions.
4  -19
   No neighboring molecules found

   For the current neighbor definitions no neighboring molecules were
   found. Check your input.
4  -20
   No molecules present in crystal

   You cannot use the 'molecule' mode without having at least one molecule
   within the model crystal. Check the manual how to define molecules.
4  -21
   Molecule types need to be different

   In order to execute the selected operation (e.g. determine correlations),
   the selected molecule types need to be different. Check your input.
4  -22
   Command not available in molecule mode

   This particular command (e.g. aver) is not available in 'molecule'
   mode. Switch to 'atoms' mode using the command 'mode atom' and 
   reenter the desired command.
4  -23
   Too many neighboring atoms/molecules

   The current operation has found too many neighboring atoms or molecules.
   Either restrict the neighbor definitions of adjust the variable
   CHEM_MAX_NEIG in the file 'config.inc' and recompile DISCUS. 
4  -24
   Invalid correlation angle index given

   
   You tried to reference an environment of "angle" type that 
   has not been defined. Check the list of defined environments and 
   the values of parameters in the current command line.
4  -25
   Invalid range for bond-angle histogram

   The upper and lower limits of the bond angle histogram are invalid.
   Check that none is lower than 0 degrees or larger than 180 degrees,
   and that the upper limit is larger than the lower.
4  -26
   Invalid correlation environment index given

   You tried to reference an environment of "correlation" type that 
   has not been defined. Check the list of defined environments and 
   the values of parameters in the current command line.
4  -27
   No atoms present in crystal

   A number of commands can only be used if the crystal contains 
   any atoms.
   Check the number of atoms "n[1] present in your crystal.
4  -28
   Invalid correlation conn   index given

   The given correlation conn index was invalid. Check your input.
   The index must be larger than 0.
4  -29
   Atom type outside valid range
4  -30
   Multiple identical sites in unit cell

   Several sites exist within the unit cell with (almost) identical
   coordinates. Thus DISCUS has a tough time to decide which of these
   sites you have in mind. 
   The symmetry expansion is carried out, but the results are written to 
   file only. This gives you a better chance to sort them out manually.
3  four
   These are the possible error messages related to the calculation
   of the Fourier Transform

4  -2
   Invalid lot shape selected 

   The only two supported lot shapes are 'eli' and 'box' ! Select a
   proper shape.
4  -3
   SIN(THETA)/LAMBDA > lookup table limits

   To speed up the calculation of the Fourier Transform, DISCUS uses
   a lookup table for SIN(THETA)/LAMBDA. You need to adjust the maximum
   h,k,l or the wave length. Alternatively, the values CFPKT and CFINC
   in the file 'config.inc' might be adjusted to the specific needs 
   and DISCUS recompiled.
4  -4
   Component of increment vector is zero

   The corners of the plane in reciprocal space to be calculated are
   invalid since two or more corners are the same. Adjust your input. 
3  mmc
   These are the error messages of the MC section of DISCUS

4  -1 
   Invalid or no energy type selected

   Before running a MC simulation, a valid energy definition (e.g.
   occupational correlations or distortions) must be selected using
   the 'set energy' command.
4  -2 
   No valid move after 1000 cycles

   After 1000 cycles NO valid MC move was generated and DISCUS has
   terminated the simulation. Check your input.
4  -3
   Invalid mode selected for COCC MC run

   Occupational ordering requires the SWCHEM mode to be selected. Use
   the command 'set mode' to select the correct mode and restart the
   simulation.
4  -4
   Number of MC cycles is zero

   A Monte Carlo run was tried with zero number of refinement cycles.
   The number of cycles must be at least equal to one.
   Check the parameters on the last ==> 'set cycle' command, 
   check that a ==> 'set cycle' command was used at all.
4  -5
   Number of feedback intervals is zero

   The feedback interval must be at least equal to one. 
   Check the parameters on the last ==> 'set feed' command. 
   check that a ==> 'set feed' command was used at all.
3  pdf
   Errors at the PDF Level

4  -1
   Too many points in PDF

   The specified range and grid size for the PDF results in too many
   points. Either adjust your input or change the parameter MAXDAT
   in 'config.inc' and recompile DISCUS.
4  -2
   Cannot extend r-range for corr. convolution

   In order to carry out the convolution with the SINC function defined
   by the value of Q(max), the calculation range for the PDF needs to
   be extended. This error message occurs when there is not enough 
   space for the additional data points. Either adjust your input or 
   change the parameter MAXDAT in 'config.inc' and recompile DISCUS.
4  -3
   Crystal too large to create periodic bound.

   The size of the crystal is too large for the periodic boundary array
   DISCUS uses for rapid calculation of the PDF. Either use a smaller
   model crystal or change the parameter MAXBND in 'config.inc' and 
   recompile DISCUS.
4  -4
   No structure defined yet (>= 1 atoms)

   You do not have a crystal structure with at least one atom.
   Create a structure first.
4  -5
   PDF data must start with r=Dr

   The data in the input file must be evenly spaced with step size
   ==> 'set range'. 
   The first data point must be at a distance value r equal to this
   set size.

   Check the values on the ==> 'set range' command and check the 
   data file. If necessary repeat the determination of the experimental
   PDF or extrapolate the data from the current minimum r-value down
   to r(min) = Dr.
4  -6
   PDF range fixed with data loaded
4  -7
   Disable Gaussian mode and recalculate
4  -8
   Atom type ALL not allowed

   The ==> 'set partial' command must receive individual atom names, not
   the atom name "ALL".
4  -9
   No atoms in asymmetric unit

   The crystal does not contain any atoms in the asymmetric unit. It may
   have been read with the 'structure' command or generated via stacking
   faults. 
   Under these circumstances you must use the exact mode in connection 
   with the ==> 'set bound' 
4  -10
   User Fit minimum outside data range

   You specified a fit range via ==> 'frange' that is outside the 
   distance range of the data set. Check your data set and the 'frange'
   command and ensure consistency.
4  -11
   User Fit maximum outside data range

   You specified a fit range via ==> 'frange' that is outside the 
   distance range of the data set. Check your data set and the 'frange'
   command and ensure consistency.
3  rmc
   Errors at the Reverse Monte Carlo Level

4  -1
   Too many experimental data planes

   This message appears if the user tries to read an additional plane of 
   experimental data and the maximal number of planes is exceeded. If that 
   many data planes are really needed, the variable RMC_MAX_PLANES has to 
   be adjusted in the file 'config.inc' and DISCUS must be recompiled.
4  -2
   Too many experimental data points

   The experimental data file contains too many data points. In order to 
   be able to use the particular data file the variable RMC_MAX_Q must
   be altered in 'config.inc' and DISCUS must be recompiled.
4  -3
   No atoms present in model crystal

   The command 'run' was entered but there is no model crystal present. 
   The starting structure has to be set up before entering the RMC sublevel.
4  -4
   No experimental data present

   The command 'run' was entered but no experimental data are present. 
   Use the command 'data' to read the experimental data.
4  -5
   Invalid method (x,n) selected

   When using the 'data' command an invalid scattering method was used. 
   The present version of the program recognizes "neutron" and "x-ray" data. 
   The method parameter can be abbreviated to a single letter. The input 
   is not case sensitive.
4  -7
   Invalid plane selected

   An invalid data plane was selected. Use the command 'show' for a list
   of loaded data planes.
4  -8
   Invalid symmetry number selected

   The selected symmetry number is invalid. Use the command 'show' for a
   list of the current settings.
4  -9
   Invalid RMC mode selected

   An invalid RMC mode was selected. Check the online help entry for
   'set mode' in the RMC sublevel for a list of allowed RMC moves.
4  -10
   No atom types selected for RMC run

   No atoms were selected for the RMC refinement. Use the command 'sele'
   to select the atom types to be used for the RMC run.
4  -11
   Only ONE atom type present in SWCHEM mode

   The RMC mode SWCHEM requires two different atom types to be selected.
   Vacancies are to be selected as VOID.
4  -12
   Displacements too small for SWDISP mode

   The displacements present in the starting structure are too small
   to use the SWDISP mode. The limit is set in 'rmc.f' if there is any
   need to change that.
4  -13
   Too many symmetrically equivalent planes

   The number of symmetrically equivalent planes exceeds the limit
   set by RMC_MAX_SYM in 'config.inc'. You can either adjust that
   value and recompile DISCUS or set the space group symbol in the
   structure file to P1 if you don't want to use the symmetry information.
4  -14
   No experimental data within given q limits

   There are no experimental data in the gives q limits. Check the 
   current settings with 'show' and adjust the limits using the
   command 'set range' in the RMC sublevel.
4  -15
   Invalid data type selected

   DISCUS can read PGM and NIPL files as input data. You selected a
   non supported data type. Check the online help for 'data' for a
   description of the valid data formats.
4  -16
   Invalid weighting scheme or weighting file

   The entered weighting scheme is invalid. Check the online help for 
   'data' for a description of the valid weighting schemes.
4  -17
   Data and weight file have different sizes

   If you read weights from a file, data file and weight file MUST
   have the same size.
4  -18
   Data file is not an ASCII PGM file

   In the present version, DISCUS can only read ASCII PGM files with
   the code P2 in the first line. Use the tool 'pnmnoraw' to transform
   from a binary to an ASCII version of your input file. The tool
   'pnmnoraw' is part of the 'netpbm' package.
4  -19
   Invalid constrain entered

   The entered constrain is invalid. Check the online help for 
   more information.
4  -20
   No valid move after 1000 display intervals

   After 1000 display intervals, DISCUS has not generated a single valid
   move. Check the settings for minimal allowed atom distances and all 
   other RMC settings. 
4  -21
   Number of LOTS exceeds maximum

   The number of 'lots' (crystal volumes to be averaged) exceeds the 
   maximum number RMC_MAX_LOTS defined in 'config.inc'.
2  space_groups
!p List of allowed Space groups

   a) Standard space groups settings

!p #   1 : P1          #   2 : P-1

!p #   3 : P2          #   4 : P21         #   5 : C2          #  6 : Pm
!p #   7 : Pc          #   8 : Cm          #   9 : Cc          #  10 : P2/m
!p #  11 : P21/m       #  12 : C2/m        #  13 : P2/c        #  14 : P21/c
!p #  15 : C2/c

!p #  16 : P222        #  17 : P2221       #  18 : P21212      #  19 : P212121
!p #  20 : C2221       #  21 : C222        #  22 : F222        #  23 : I222
!p #  24 : I212121     #  25 : Pmm2        #  26 : Pmc21       #  27 : Pcc2
!p #  28 : Pma2        #  29 : Pca21       #  30 : Pnc2        #  31 : Pmn21
!p #  32 : Pba2        #  33 : Pna21       #  34 : Pnn2        #  35 : Cmm2
!p #  36 : Cmc21       #  37 : Ccc2        #  38 : Amm2        #  39 : Abm2=Aem2
!p #  40 : Ama2        #  41 : Aba2=Aea2   #  42 : Fmm2        #  43 : Fdd2
!p #  44 : Imm2        #  45 : Iba2        #  46 : Ima2        #  47 : Pmmm
!p #  48 : Pnnn        #  49 : Pccm        #  50 : Pban        #  51 : Pmma
!p #  52 : Pnna        #  53 : Pmna        #  54 : Pcca        #  55 : Pbam
!p #  56 : Pccn        #  57 : Pbcm        #  58 : Pnnm        #  59 : Pmmn
!p #  60 : Pbcn        #  61 : Pbca        #  62 : Pnma        #  63 : Cmcm
!p #  64 : Cmca=Cmce   #  65 : Cmmm        #  66 : Cccm        #  67 : Cmma=Cmme
!p #  68 : Ccca=Ccce   #  69 : Fmmm        #  70 : Fddd        #  71 : Immm
!p #  72 : Ibam        #  73 : Ibca        #  74 : Imma

!p #  75 : P4          #  76 : P41         #  77 : P42         #  78 : P43
!p #  79 : I4          #  80 : I41         #  81 : P-4         #  82 : I-4
!p #  83 : P4/m        #  84 : P42/m       #  85 : P4/n        #  86 : P42/n
!p #  87 : I4/m        #  88 : I41/a       #  89 : P422        #  90 : P4212
!p #  91 : P4122       #  92 : P41212      #  93 : P4222       #  94 : P42212
!p #  95 : P4322       #  96 : P43212      #  97 : I422        #  98 : I4122
!p #  99 : P4mm        # 100 : P4bm        # 101 : P42cm       # 102 : P42nm
!p # 103 : P4cc        # 104 : P4nc        # 105 : P42mc       # 106 : P42bc
!p # 107 : I4mm        # 108 : I4cm        # 109 : I41md       # 110 : I41cd
!p # 111 : P-42m       # 112 : P-42c       # 113 : P-421m      # 114 : P-421c
!p # 115 : P-4m2       # 116 : P-4c2       # 117 : P-4b2       # 118 : P-4n2
!p # 119 : I-4m2       # 120 : I-4c2       # 121 : I-42m       # 122 : I-42d
!p # 123 : P4/mmm      # 124 : P4/mcc      # 125 : P4/nbm      # 126 : P4/nnc
!p # 127 : P4/mbm      # 128 : P4/mnc      # 129 : P4/nmm      # 130 : P4/ncc
!p # 131 : P42/mmc     # 132 : P42/mcm     # 133 : P42/nbc     # 134 : P42/nnn
!p # 135 : P42/mbc     # 136 : P42/mnm     # 137 : P42/nmc     # 138 : P42/ncm
!p # 139 : I4/mmm      # 140 : I4/mcm      # 141 : I41/amd     # 142 : I41/acd

!p # 143 : P3
!p # 144 : P31                             # 145 : P32
!p # 146 : R3: hexagonal axes              # 147 : P-3
!p # 148 : R-3: hexagonal axes             # 149 : P312
!p # 150 : P321                            # 151 : P3112
!p # 152 : P3121                           # 153 : P3212
!p # 154 : P3221                           # 155 : R32: hexagonal axes
!p # 156 : P3m1                            # 157 : P31m
!p # 158 : P3c1                            # 159 : P31c
!p # 160 : R3m: hexagonal axes             # 161 : R3c: hexagonal axes
!p # 162 : P-31m                           # 163 : P-31c
!p # 164 : P-3m1                           # 165 : P-3c1
!p # 166 : R-3m: hexagonal axes            # 167 : R-3c: hexagonal axes

!p # 168 : P6          # 169 : P61         # 170 : P65         # 171 : P62
!p # 172 : P64         # 173 : P63         # 174 : P-6         # 175 : P6/m
!p # 176 : P63/m       # 177 : P622        # 178 : P6122       # 179 : P6522
!p # 180 : P6222       # 181 : P6422       # 182 : P6322       # 183 : P6mm
!p # 184 : P6cc        # 185 : P63cm       # 186 : P63mc       # 187 : P-6m2
!p # 188 : P-6c2       # 189 : P-62m       # 190 : P-62c       # 191 : P6/mmm
!p # 192 : P6/mcc      # 193 : P63/mcm     # 194 : P63/mmc

!p # 195 : P23         # 196 : F23         # 197 : I23         # 198 : P213
!p # 199 : I213        # 200 : Pm-3        # 201 : Pn-3        # 202 : Fm-3
!p # 203 : Fd-3        # 204 : Im-3        # 205 : Pa-3        # 206 : Ia-3
!p # 207 : P432        # 208 : P4232       # 209 : F432        # 210 : F4132
!p # 211 : I432        # 212 : P4332       # 213 : P4132       # 214 : I4132
!p # 215 : P-43m       # 216 : F-43m       # 217 : I-43m       # 218 : P-43n
!p # 219 : F-43c       # 220 : I-43d       # 221 : Pm-3m       # 222 : Pn-3n
!p # 223 : Pm-3n       # 224 : Pn-3m       # 225 : Fm-3m       # 226 : Fm-3c
!p # 227 : Fd-3m       # 228 : Fd-3c       # 229 : Im-3m       # 230 : Ia-3d


   b) non standard settings of space groups

!p # 231 : P112:       #   3: P2 : unique c axis 
!p # 232 : P1121:      #   4: P21 : unique c axis
!p # 233 : A121:       #   5: C2 : unique b axis: cell choice 2
!p # 234 : I121:       #   5: C2 : unique b axis: cell choice 3
!p # 235 : A112:       #   5: C2 : unique c axis: cell choice 1
!p # 236 : B112:       #   5: C2 : unique c axis: cell choice 2
!p # 237 : I112:       #   5: C2 : unique c axis: cell choice 3
!p # 238 : P11m:       #   6: Pm : unique c axis 
!p # 239 : P1n1:       #   7: Pc : unique b axis: cell choice 2
!p # 240 : P1a1:       #   7: Pc : unique b axis: cell choice 3
!p # 241 : P11a:       #   7: Pc : unique c axis: cell choice 1
!p # 242 : P11n:       #   7: Pc : unique c axis: cell choice 2
!p # 243 : P11b:       #   7: Pc : unique c axis: cell choice 3
!p # 244 : A1m1:       #   8: Cm : unique b axis: cell choice 2
!p # 245 : I1m1:       #   8: Cm : unique b axis: cell choice 3
!p # 246 : A11m:       #   8: Cm : unique c axis: cell choice 1
!p # 247 : B11m:       #   8: Cm : unique c axis: cell choice 2
!p # 248 : I11m:       #   8: Cm : unique c axis: cell choice 3
!p # 249 : A1n1:       #   9: Cc : unique b axis: cell choice 2
!p # 250 : I1a1:       #   9: Cc : unique b axis: cell choice 3
!p # 251 : A11a:       #   9: Cc : unique c axis: cell choice 1
!p # 252 : B11n:       #   9: Cc : unique c axis: cell choice 2
!p # 253 : I11b:       #   9: Cc : unique c axis: cell choice 3
!p # 254 : P112/m:     #  10: P2/m : unique c axis
!p # 255 : P1121/m:    #  11: P21/m : unique c axis
!p # 256 : A12/m1:     #  12: C2/m : unique b axis: cell choice 2
!p # 257 : I12/m1:     #  12: C2/m : unique b axis: cell choice 3
!p # 258 : A112/m:     #  12: C2/m : unique c axis: cell choice 1
!p # 259 : B112/m:     #  12: C2/m : unique c axis: cell choice 2
!p # 260 : I112/m:     #  12: C2/m : unique c axis: cell choice 3
!p # 261 : P12/n1:     #  13: P2/c : unique b axis: cell choice 2
!p # 262 : P12/a1:     #  13: P2/c : unique b axis: cell choice 3
!p # 263 : P112/a:     #  13: P2/c : unique c axis: cell choice 1
!p # 264 : P112/n:     #  13: P2/c : unique c axis: cell choice 2
!p # 265 : P112/b:     #  13: P2/c : unique c axis: cell choice 3
!p # 266 : P121/n1:    #  14: P21/c : unique b axis: cell choice 2
!p # 267 : P121/a1:    #  14: P21/c : unique b axis: cell choice 3
!p # 268 : P1121/a:    #  14: P21/c : unique c axis: cell choice 1
!p # 269 : P1121/n:    #  14: P21/c : unique c axis: cell choice 2
!p # 270 : P1121/b:    #  14: P21/c : unique c axis: cell choice 3
!p # 271 : A12/n1:     #  15: C2/c : unique b axis: cell choice 2
!p # 272 : I12/a1:     #  15: C2/c : unique b axis: cell choice 3
!p # 273 : A112/a:     #  15: C2/c : unique c axis: cell choice 1
!p # 274 : B112/n:     #  15: C2/c : unique c axis: cell choice 2
!p # 275 : I112/b:     #  15: C2/c : unique c axis: cell choice 3

!p # 276 : Pnnn:       #  48: origin choice 2
!p # 277 : Pban:       #  50: origin choice 2
!p # 278 : Pmmn:       #  59: origin choice 2
!p # 279 : Ccca:       #  68: origin choice 2
!p # 280 : Fddd:       #  70: origin choice 2

!p # 281 : P4/n:       #  85: origin choice 2
!p # 282 : P42/n:      #  86: origin choice 2
!p # 283 : I41/a:      #  88: origin choice 2
!p # 284 : P4/nbm:     # 125: origin choice 2
!p # 285 : P4/nnc:     # 126: origin choice 2
!p # 286 : P4/nmm:     # 129: origin choice 2
!p # 287 : P4/ncc:     # 130: origin choice 2
!p # 288 : P42/nbc:    # 133: origin choice 2
!p # 289 : P42/nnn:    # 134: origin choice 2
!p # 290 : P42/nmc:    # 137: origin choice 2
!p # 291 : P42/ncm:    # 138: origin choice 2
!p # 292 : I41/amd:    # 141: origin choice 2
!p # 293 : I41/acd:    # 142: origin choice 2

!p # 294 : R3:         # 146 rhombohedral axes
!p # 295 : R-3:        # 148 rhombohedral axes
!p # 296 : R32:        # 155 rhombohedral axes
!p # 297 : R3m:        # 160 rhombohedral axes
!p # 298 : R3c:        # 161 rhombohedral axes
!p # 299 : R-3m:       # 166 rhombohedral axes
!p # 300 : R-3c:       # 167 rhombohedral axes

!p # 301 : Pn-3:       # 201: origin choice 2
!p # 302 : Fd-3:       # 203: origin choice 2
!p # 303 : Pn-3n:      # 222: origin choice 2
!p # 304 : Pn-3m:      # 224: origin choice 2
!p # 305 : Fd-3m:      # 227: origin choice 2
!p # 306 : Fd-3c:      # 228: origin choice 2

!p # 307 : Pbnm:       #  62: Pnma non-standard orientation
!p # 308 : Pmnn:       #  58: Pnnm non-standard orientation

   Non-standard settings of all orthorhombic space groups are recognized 
   either via the spcgr line in the form:
   spcgr Pnma, setting:cab
   or by using the explicit non-standard space group name:
!
!p         abc      bac      cab      cba      bca      acb
!p #  16   P222     P222     P222     P222     P222     P222   
!p #  17   P2221    P2221    P2122    P2122    P2212    P2212  
!p #  18   P21212   P21212   P22121   P22121   P21221   P21221 
!p #  19   P212121  P212121  P212121  P212121  P212121  P212121
!p #  20   C2221    C2221    A2122    A2122    B2212    B2212  
!p #  21   C222     C222     A222     A222     B222     B222   
!p #  22   F222     F222     F222     F222     F222     F222   
!p #  23   I222     I222     I222     I222     I222     I222   
!p #  24   I212121  I212121  I212121  I212121  I212121  I212121
!
!          abc      bac      cab      cba      bca      acb
!p #  25   Pmm2     Pmm2     P2mm     P2mm     Pm2m     Pm2m   
!p #  26   Pmc21    Pcm21    P21ma    P21am    Pb21m    Pm21b  
!p #  27   Pcc2     Pcc2     P2aa     P2aa     Pb2b     Pb2b   
!p #  28   Pma2     Pbm2     P2mb     P2cm     Pc2m     Pm2a   
!p #  29   Pca21    Pbc21    P21ab    P21ca    Pc21b    Pb21a  
!p #  30   Pnc2     Pcn2     P2na     P2an     Pb2n     Pn2b   
!p #  31   Pmn21    Pnm21    P21mn    P21nm    Pn21m    Pm21n  
!p #  32   Pba2     Pba2     P2cb     P2cb     Pc2a     Pc2a   
!p #  33   Pna21    Pbn21    P21nb    P21cn    Pc21n    Pn21a  
!p #  34   Pnn2     Pnn2     P2nn     P2nn     Pn2n     Pn2n   
!p #  35   Cmm2     Cmm2     A2mm     A2mm     Bm2m     Bm2m   
!p #  36   Cmc21    Ccm21    A21ma    A21am    Bb21m    Bm21b  
!p #  37   Ccc2     Ccc2     A2aa     A2aa     Bb2b     Bb2b   
!p #  38   Amm2     Bmm2     B2mm     C2mm     Cm2m     Am2m   
!p #  39   Aem2     Bme2     B2em     C2me     Cm2e     Ae2m   
!p #  40   Ama2     Bbm2     B2mb     C2cm     Cc2m     Am2a   
!p #  41   Aea2     Bbe2     B2eb     C2ce     Cc2e     Ae2a   
!p #  42   Fmm2     Fmm2     F2mm     F2mm     Fm2m     Fm2m   
!p #  43   Fdd2     Fdd2     F2dd     F2dd     Fd2d     Fd2d   
!p #  44   Imm2     Imm2     I2mm     I2mm     Im2m     Im2m   
!p #  45   Iba2     Iba2     I2cb     I2cb     Ic2a     Ic2a   
!p #  46   Ima2     Ibm2     I2mb     I2cm     Ic2m     Im2a   
!
!p         abc      bac      cab      cba      bca      acb
!p #  47   Pmmm     Pmmm     Pmmm     Pmmm     Pmmm     Pmmm   
!p #  48   Pnnn     Pnnn     Pnnn     Pnnn     Pnnn     Pnnn   
!p #  49   Pccm     Pccm     Pmaa     Pmaa     Pbmb     Pbmb   
!p #  50   Pban     Pban     Pncb     Pncb     Pcna     Pcna   
!p #  51   Pmma     Pmmb     Pbmm     Pcmm     Pmcm     Pmam   
!p #  52   Pnna     Pnnb     Pbnn     Pcnn     Pncn     Pnan   
!p #  53   Pmna     Pnmb     Pbmn     Pcnm     Pncm     Pman   
!p #  54   Pcca     Pccb     Pbaa     Pcaa     Pbcb     Pbab   
!p #  55   Pbam     Pbam     Pmcb     Pmcb     Pcma     Pcma   
!p #  56   Pccn     Pccn     Pnaa     Pnaa     Pbnb     Pbnb   
!p #  57   Pbcm     Pcam     Pmca     Pmab     Pbma     Pcmb   
!p #  58   Pnnm     Pnnm     Pmnn     Pmnn     Pnmn     Pnmn   
!p #  59   Pmmn     Pmmn     Pnmm     Pnmm     Pmnm     Pmnm   
!p #  60   Pbcn     Pcan     Pnca     Pnab     Pbna     Pcnb   
!p #  61   Pbca     Pcab     Pbca     Pcab     Pbca     Pcab   
!p #  62   Pnma     Pmnb     Pbnm     Pcmn     Pmcn     Pnam   
!p #  63   Cmcm     Ccmm     Amma     Amam     Bbmm     Bmmb   
!p #  64   Cmce     Ccme     Aema     Aeam     Bbem     Bmeb   
!p #  65   Cmmm     Cmmm     Ammm     Ammm     Bmmm     Bmmm   
!p #  66   Cccm     Cccm     Amaa     Amaa     Bbmb     Bbmb   
!p #  67   Cmme    *Cmmb     Aemm    *Acmm     Bmem    *Bmam   
!p #  68   Ccce    *Cccb     Aeaa    *Acaa     Bbeb    *Bbab   
!p #  69   Fmmm     Fmmm     Fmmm     Fmmm     Fmmm     Fmmm   
!p #  70   Fddd     Fddd     Fddd     Fddd     Fddd     Fddd   
!p #  71   Immm     Immm     Immm     Immm     Immm     Immm   
!p #  72   Ibam     Ibam     Imcb     Imcb     Icma     Icma   
!p #  73   Ibca     Icab     Ibca     Icab     Ibca     Icab   
!p #  74   Imma     Immb     Ibmm     Icmm     Imcm     Imam   
!
   Note: for space groups 67 Cmme and 68 Ccce, the settings
   bac, cba and acb are given in the traditional name
   instead of using the 'e' glide plane name. This choice 
   allows you to distinguish these settings.
2  wavelength
!p List of allowed wavelength symbols 

!p TIA1   2.748410    TIA2   2.752070     TIB    2.513810     TI     2.740000
!p CRA1   2.28970     CRA2   2.29361      CRB    2.0848       CR     2.2909
!p FEA1   1.193604    FEA2   1.93998      FEB    1.75653      FE     1.9373
!p COA1   1.788920    COA1   1.792780     COB    1.620750     CO     1.780000
!p CUA1   1.54056     CUA2   1.54439      CUB    1.39217      CU     1.5418
!p MOA1   0.709309    MOA2   0.71335      MOB    0.63225      MO     0.7107
!p AGA1   0.55941     AGA2   0.56380      AGB    0.49701      AG     0.5608
!p TAA1   0.215484    TAA2   0.220290     TAB    0.190076     TA     0.560800
!p WA1    0.208992    WA2    0.213813     WB     0.184363,    W      0.560800
!p AUA1   0.180185    AUA2   0.185064     AUB    0.158971,    AU     0.560800

   If the last two characters of the wave length symbol are "12", the 
   powder pattern are calculated as the sum of Kalpha1 + Kalpha2
2  atom_names
!p List of allowed atom names

!p H    H.   H1-  D.   HE   LI   LI1  BE   BE2+ B    C    N    O    O1-  
!p O2-  F    F1-  NE   NA   NA1+ MG   MG2+ AL   AL3+ SI   SI.  SI4+ S    
!p P    CL   CL1- AR   K    K1+  CA   CA2+ SC   SC3+ TI   TI2+ TI3+ TI4+ 
!p V    V2+  V3+  V5+  CR   CR2+ CR3+ MN   MN2+ MN3+ MN4+ FE   FE+  FE3+ 
!p CO   CO2+ CO3+ NI   NI2+ NI3+ CU   CU1+ CU2+ ZN   ZN2+ GA   GA3+ GE   
!p GE4+ AS   SE   BR   BR1- KR   RB   RB1+ SR   SR2+ Y    Y3+  ZR   ZR4+ 
!p NB   NB3+ NB5+ MO   MO3+ MO5+ MO6+ TC   RU   RU3+ RU+  RH   RH3+ RH4+ 
!p PD   PD2+ PD4+ AG   AG1+ AG2+ CD   CD2+ IN   IN3+ SN   SN2+ SN4+ SB   
!p SB3+ SB5+ TE   I    I1-  XE   CS   CS1+ BA   BA2+ LA   LA3+ CE   CE3+ 
!p CE4+ PR   PR3+ PR4+ ND   ND3+ PM   PM3+ SM   SM3+ EU   EU2+ EU3+ GD   
!p GD3+ TB   TB3+ DY   DY3+ HO   HO3+ ER   ER3+ TM   TM3+ YB   YB2+ YB3+ 
!p LU   LU3+ HF   HF4+ TA   TA5+ W    W6+  RE   OS   OS4+ IR   IR3+ IR4+ 
!p PT   PT2+ PT4+ AU   AU1+ AU3+ HG   HG1+ HG2+ TL   TL1+ TL3+ PB   PB2+ 
!p PB4+ BI   BI3+ BI5+ PO   AT   RN   FR   RA   RA2+ AC   AC3+ TH   TH4+ 
!p PA   U    U3+  U4+  U6+  NP   NP3+ NP4+ NP6+ PU   PU3+ PU4+ PU6+ AM   
!p CM   BK   CF   

   The symbols ending with a period have special meanings as listed:

!p H.   Hydrogen HF scattering factor
!p C.   Carbon HF scattering factor
!p SI.  Silicon HF scattering factor
!p D.   Deuterium (for neutron diffraction only)
!p O2-  Oxygen, taken from Acta Cryst. 19, p 486 (1965).

   Other special names:

!p E1-  Single electron with form factor =1 independent of sin( )/ 


   Other names may be used as well, if scattering curves are supplied for 
   these names. See the 'delf, and 'scat' commands at 'fourier' sublevel 
   for details.
