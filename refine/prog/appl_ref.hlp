1  refine

   General refinement section

   This section allows to perform a Least-Squares fit to
   experimental data.
   The calculated data are derived by a user supplied macro.
   Derivatives of the calculated function with respect to the 
   refinement parameters are determined numerically by calling
   the macro at p +-h where p is the current parameter value
   and h a small deviation.

2  Summary

   Here is a list and brief description of valid REFINE commands. Further
   help can be obtained by typing the corresponding command name at the
   help prompt.

!p data     ! Defines the data set 
!p finished ! Terminates the slave macro
!p fix      ! Fixes a parameter, free with newparam
!p newparam ! Defines and sets a new parameter, which is to be refined  
!p reset    ! Performs a global reset to system start conditions
!p run      ! Starts the refinement
!p show     ! Shows settings
!p set      ! Sets control values like cycles, convergence criteria
!p sigma    ! For 2D data; defines a file that contains experimental uncertainties
2  News          : Information on program updates

   This is the initial release of the REFINE section.
3  2020_Dec

   Added variables par und sig that are read only
2  Example

   A simple fit might refine parameters of a straight line to
   observed data. Lets assume that the data are in a simple x/y
   file "observed.data". A suitable macro to refine is:

!p refine                       ! Switch from SUITE to REFINE section   
!p data xy, observed.data       ! Load data set "observed.data"
!p                              ! The load command creates user variables
!p                              ! F_DATA = Number of Data set in Kuplot
!p                              ! F_XMIN, F_XMAX, F_XSTP 
!p                              ! F_YMIN, F_YMAX, F_YSTP 
!p                              ! That contain the data limits and step size.
!p newparam P_inter, value:1.0  ! Define y-axis intersept as first parameter
!p newparam P_slope, value:1.0  ! Define slope as second parameter
!p set cycle, 10                ! Define maximum number of cycles
!p run fit_work.mac             ! Start the fit with user macro fit_work.mac
!p exit                         ! Back to SUITE

   The user macro fit_run should be something like:

!p branch kuplot                ! Step into the KUPLOT section
!p                              !   or for structures into DISCUS
!p func P_inter + P_slope*r[0], F_DATA
!p                              ! Calculate the function, 
!p                              !   limits are set automatically from
!p                              !   data set F_data that was loaded by refine.
!p exit                         ! Back to REFINE
!p finished                     ! Special keyword signals end of user macro
2  data
!p data "kuplot", <number>
!p data <type>, <infile>

!p data "kuplot", <number>
   The calculation will refine parameters versus the observed data
   that are stored in the KUPLOT data set number <number>

!p data <type>,<infile>
   The calculation will refine parameters versus the observed data
   that are loaded from file <infile>.
      See the ==> 'kuplot/load' command for details on proper
      ways to load a data set.

   Refer to the KUPLOT section for instructions on loading data.
2  finished
!p finished

   This command must be the last instruction in any slave macro.
   The command instructs refine to terminate execution of the slave 
   macro. REFINE will then evaluate the results and proceed to the
   next refinement cycle.
2  fix
!p fix <parname> [,"value:"<number>]

   Fixes a parameter. Its value will remain at its current value
   or at <number>, if the optional parameter "value:" is used.

   A fixed parameter can be freed with a ==> 'newparam' command.
2  newparam
!p newparam <parname> [,"value:"<start>] [,"status:"<flag>]
!p                    [,"range:["<lower>,<upper>"]"]
!p                    [,"shift:"<value>] [,"points:"<nderiv>]

   The command performs three tasks:
   - Defines a new parameter named <parname>
   - Frees a parameter <pname> that had previously been fixed 
     by the ==> 'fix' command
   - Defines a constant <pname> that you may need to use in the 
     user macro.

   Defines a new parameter name <parname>. This should be any valid
   user defined variable name, limited to a length of 16 characters.
   The user variable is allowed to have been defined previously, 
   and its current value will be used if the "value:" option is omitted.

   See the general command line section for details on the definition
   of variables.

   Optional parameters are:
   value:<start>
      The Parameter will be initialized to the <start> value.
      If omitted, the parameter value will take on its current value.

   status:refine
   status:free
   status:fix
   status:fixed
      With the flags "refine" or "free" the parameter will be refined
      during the refinement cycles.
      With the flags "fixed" or "fix", the parameter will remain fixed
      at its current value. Be careful that the user macro does not
      change the parameter value!
      Default flag is "refine".

   range:[<lower>, upper>]
      Defines a lower and upper boundary for the parameter. The 
      fit will ensure that the parameter does not move outside the
      specified range.  <lower> must be less than <upper>.
      If either <lower> or <upper> is absent, but the comma is present:
          [,<upper>] or [<lower>,]
         the missing side is not constrained. 
      If the "range:" parameter is omitted, the default behavior
      is to assume no boundaries. 
      In order to turn the boundaries off, simply state the 
      'newparam' command again for the refinement parameter 
      without the "range:" option.

   shift:<value>
      To calculate the numerical derivatives REFINE needs to calculate
      the cost function at the current parameter value and at points 
      at slightly smaller and slightly larger values. REFINE calculates
      the shift of the original parameter values as par*<value>. It is
      not straightforward to recommend good values. For parameters that
      can be expected to give a smooth variation of the cost function
      like scale factors a value of 0.003 seems to be good. For
      parameters like nano particle diameters larger values like 0.1 to
      0.01 seem to be better. 
      Default: shift:0.003
               For parameters called "P_dia" the default is 0.01

   points:<nderiv>
      REFINE estimates the derivative by calculating the cost function
      at either:
      the 3 points        p-h; p; p+h          or at 
      the 5 points  p-2h; p-h; p; h+h; p+2h.
      The five point estimate is more accurate and is recommended 
      for parameters like nanoparticle diameters. 
      Default: points:3
               For FWHM parameters "P_u", "P_v", "P_w" the default is 5
2  reset
!p reset

   Puts the REFINE section back into the state at system start.
2  run
!p run <work.mac> [, "plot:"<kuplot_macro.mac>]

   Starts the actual refinement using the macro <work.mac> to 
   simulate the structure and to evaluate the cost function.

   The optional parameter "plot:" instructs REFINE to display the
   observed and calculated data at each cycle. The macro 
   <kuplot_macro> must be a pure KUPLOT macro. The last line in this
   macro must be an 'exit' command that returns to REFINE. 
2  show
!p show

   Shows the current refinement status.
2  set
!p set cycle,<maxc>
!p set conver, ["status:on" | "status:off"]
!p set conver ["dchi:"<delta>] [,"pshift:"<max>] [,"conf:"<level>]
!p            ["chisq:<value>]
!p set relax  ["start:"<lamda_s>] [,"fail:"<lamda_f>] 
!p            [,"success:"<lamda_g>]
!p
3  cycle
!p set cycle,<maxc>
   Sets the maximum number of refinement cycles

3  convergence
!p set conver [,"dchi:"<delta>] [,"pshift:"<max>] [,"conf:"<level>]
!p            [,"chi2:"<level>] [,"status:on" | "status:off"]

   Allows the user to define convergence criteria.

   If the status is set to "on", the convergence criteria are used.
   Otherwise the refinement will run for the cycles defined 
   by ==> 'set cycle'.

   dchi:<delta>
     If the value of Chi^2/(Ndata-Npara) decreases by less than <delta>
     convergence is reached.
     Defaults to 0.5
   pshift:<max>
     If all refinement parameters change by less then |DeltaP/Sigma|
     convergence is reached.
     Defaults to 0.005
   conf:<level>
     If the confidence level is greater than <level> 
     convergence is reached.
     Defaults to 0.010
   chi2:<level>
     If the value of Chi^2/(Ndata-Npara) falls below <level>
     convergence is reached.
     Defaults to 0.500

   Convergence is reached, if:
   Either one of the three conditions:
      (dchi AND pshift AND conf) 
   or
      (dchi AND pshift>0)
   or 
      chi2
   are met. 

3  relax
!p set relax  ["start:"<lamda_s>] [,"fail:"<lamda_f>] 
!p            [,"success:"<lamda_g>]

   Allows to fine tune the relaxation behavior. 
   The initial Levenberg-Marquardt lamda parameter is defined
   with ["start:"<lamda_s>]. Default is 0.001 

   If a cycle was successful, the value of lamda is multiplied 
   by <lamda_g>, default is 0.5.

   If a cycle was not successful, the value of lamda is multiplied 
   by <lamda_f>, default is 4.0.

   A larger value of lambda implies smaller steps for the 
   refinement parameters.
2  sigma
!p sigma "kuplot", <number> 
!p sigma <type>,<infile>

!p sigma "kuplot", <number> 
   The calculation will refine parameters versus the observed data
   and use sigmas 
   that are stored in the KUPLOT data set number <number>

!p sigma <type>,<infile>
   The calculation will refine parameters versus the observed data
   and use sigmas 
   that are loaded from file <infile>.
      See the ==> 'kuplot/load' command for details on proper
      ways to load a data set.

   Refer to the KUPLOT section for instructions on loading data.
